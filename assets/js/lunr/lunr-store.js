var store=[{title:"Opinions about Mac, iPhone and Other Apple Products",excerpt:"Many geeks are using Macbook or iMac, and they are sharing their opinions about Apple products. That\u2019s why I\u2019ve decided to buy a Macbook too. Here is\xa0a collection of views or feelings on Apple computer from different people, as well as some useful tips for using it.   \u674e\u7b11\u6765@xiaolai: All About Apple https://www.lixiaolai.com/apple   \u5f90\u5ba5@mathena: \u5f00\u53d1\u4eba\u5458\u4e3a\u4f55\u5e94\u8be5\u4f7f\u7528Mac OS X\u517cOS X\u5c0f\u53f2   \u970d\u70ac@virushuo: \u8fd9\u6bb5\u65f6\u95f4\u5728\u5e72\u4ec0\u4e48,\u987a\u4fbf\u8bf4\u8bf4\u82f9\u679c https://blog.devep.net/virushuo/2006/04/06/apple-and-my-situation.html   \u8303\u51ef@robbinfan:   \u6211\u7684PIM\u4e4b\u65c5(1) - Windows\u4e0a\u9047\u5230\u7684\u95ee\u9898   \u6211\u7684PIM\u4e4b\u65c5(2) - \u7528Mac\u548ciPhone\u6765\u5b9e\u73b0\u6211\u7684PIM   \u6211\u7684PIM\u4e4b\u65c5(3) - PIM\u4e91\u5e94\u7528   \u4e3a\u5565\u56fd\u5916\u7684\u5f00\u53d1\u4eba\u5458\u90fd\u559c\u6b22\u7528Mac\u5462\uff1f   \u90dd\u57f9\u5f3a@tinyfool: \u4e3a\u4ec0\u4e48\u6211\u8ba4\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u5458\u90fd\u5e94\u8be5\u7528Mac OS X\uff1f https://tiny4.org/blog/2010/02/why-programmers-should-use-mac-os-x/   \u5f20\u742e\u7fd4@vgod: \u4e3a\u4ec0\u4e48\u6211\u7528Mac   \u65b9\u5757@KrzyCube: Mac\u8bf1\u60d1 https://blog.krzycube.net/mac-attraction/   \u963f\u7985@jason5ng32:   \u4f60\u662f\u5426\u771f\u7684\u9700\u8981iPhone?   Macbook Pro\u521d\u4f53\u9a8c   Notes from July 2020   It\u2019s been almost ten years since this post was initially published and unfortunately many of the links in this post have stopped working, so I\u2019ve removed those links. Please keep in mind that even for the links that do work, information in those posts might be out of date.  ",categories:[],tags:["Apple","Mac","iPhone"],url:"https://www.wiserfirst.com/blog/opinions-about-mac-iphone-and-other-apple-products/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-22/apple_store_1280_400.jpg"},{title:"\u5173\u4e8e\u963f\u6241\u8fd9\u4e2a\u4e0d\u9760\u8c31\u7684\u201d\u7406\u60f3\u4e3b\u4e49\u8005\u201d",excerpt:"\u90a3\u5929\u5728\u63a8\u4e0a\u770b\u5230\u6709\u4eba\u63d0\u5230\u9f99\u5e94\u53f0\u8bf4\u9648\u6c34\u6241\u4ed6\u4eec\uff0c\u201c\u8fd9\u4e9b\u6240\u8c13\u7684\u201c\u7406\u60f3\u4e3b\u4e49\u8005\u201d\u4e5f\u90fd\u4e0d\u53ef\u4fe1\u201d\u3002\u963f\u6241\u56e0\u4e3a\u5bb6\u65cf\u5f0a\u6848\u53d7\u5ba1\u88ab\u7f81\u62bc\uff0c\u73b0\u5728\u65e0\u8bba\u5728\u53f0\u6e7e\u8fd8\u662f\u5927\u9646\u57fa\u672c\u90fd\u662f\u5c5e\u4e8e\u201c\u8fc7\u8857\u8001\u9f20\uff0c\u4eba\u4eba\u558a\u6253\u201d\u90a3\u4e00\u7c7b\uff08\u5c3d\u7ba1\u5728\u53f0\u6e7e\u8fd8\u6709\u963f\u6241\u7684\u652f\u6301\u8005\u5728\u8857\u5934\u6297\u8bae\u4ed6\u88ab\u7f81\u62bc\uff09\uff0c\u4f46\u662f\u5173\u4e8e\u4ed6\u8d2a\u6c61\u5f0a\u6848\u4ee5\u53ca\u6ca6\u4e3a\u9636\u4e0b\u56da\u7684\u62a5\u9053\u770b\u591a\u4e86\uff0c\u6211\u5374\u8d8a\u6765\u8d8a\u60f3\u8bf4\u8bf4\u963f\u6241\u7684\u6b63\u9762\u610f\u4e49\uff1a      \u4ed6\u51fa\u8eab\u5e73\u6c11\uff0c\u4e5f\u80fd\u5f53\u4e0a\u603b\u7edf\uff0c\u8bf4\u660e\u53f0\u6e7e\u662f\u4e00\u4e2a\u666e\u901a\u4eba\u4e5f\u6709\u673a\u4f1a\u548c\u5e0c\u671b\u7684\u5730\u65b9\u3002   \u4ed6\u4ece\u7f8e\u4e3d\u5c9b\u4e8b\u4ef6\u7684\u5f8b\u5e08\u5230\u540e\u6765\u52a0\u5165\u6c11\u8fdb\u515a\uff0c\u5728\u53f0\u6e7e\u793e\u4f1a\u7531\u72ec\u88c1\u5230\u6c11\u4e3b\u7684\u8f6c\u578b\u4e2d\u8d77\u8fc7\u4e00\u5b9a\u63a8\u52a8\u4f5c\u7528\u3002\u8fd9\u4e2a\u5e94\u8be5\u662f\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u5426\u5219\u5f53\u5e74\u4e0d\u4f1a\u88ab\u770b\u505a\u4f5c\u201c\u7406\u60f3\u4e3b\u4e49\u8005\u4e86\u201d   \u4ed6\u4f5c\u4e3a\u524d\u4efb\u603b\u7edf\u4e0d\u4ec5\u6ca1\u6709\u88ab\u4ee5\u8001\u540c\u5fd7\u7684\u540d\u4e49\u7528\u7eb3\u7a0e\u4eba\u7684\u94b1\u517b\u8d77\u6765\u80fd\u591f\u56e0\u4e3a\u5f0a\u6848\u88ab\u8d77\u8bc9\u5e76\u4e14\u88ab\u5224\u6709\u7f6a\u672c\u8eab\u5c31\u6709\u91cd\u5927\u7684\u610f\u4e49\uff1a\u8fd9\u8bf4\u660e\u4ed6\u81ea\u5df1\u4e5f\u66fe\u51fa\u8fc7\u529b\u63a8\u52a8\u7684\u53f0\u6e7e\u6c11\u4e3b\u5236\u5ea6\u4e0d\u662f\u6446\u8bbe\uff0c\u8fde\u603b\u7edf\u6709\u95ee\u9898\u90fd\u53ef\u4ee5\u67e5\uff0c\u67e5\u7684\u51fa\u3002\u5f53\u7136\uff0c\u8fd9\u70b9\u5bf9\u4ed6\u81ea\u5df1\u800c\u8a00\u786e\u5b9e\u6709\u4e9b\u53cd\u8bbd\u3002   \u4e0b\u9762\u8bf4\u8bf4\u4ed6\u6267\u653f\u7684\u516b\u5e74\uff0c\u5f88\u591a\u4eba\u90fd\u6307\u8d23\u4ed6\u7684\u4efb\u671f\u4e4f\u5584\u53ef\u9648\uff0c\u8fd9\u53ef\u80fd\u662f\u4e8b\u5b9e\uff1b\u4f46\u662f\u6211\u540c\u65f6\u4e5f\u6ce8\u610f\u5230\u4ee5\u4e0b\u7684\u4e00\u4e9b\u4e8b\u5b9e\uff1a            \u4ed6\u6ca1\u6709\u5f3a\u884c\u5265\u593a\u666e\u901a\u6c11\u4f17\u7684\u571f\u5730\uff0c\u516c\u53f8\u7b49\u5404\u79cd\u8d22\u4ea7\uff1b       \u6ca1\u6709\u53d1\u52a8\u5404\u79cd\u8fd0\u52a8\u5bfc\u81f4\u51e0\u5343\u4e07\u4eba\u5728\u548c\u5e73\u793e\u4f1a\u975e\u6b63\u5e38\u6b7b\u4ea1\uff1b       \u6ca1\u6709\u8840\u8165\u9547\u538b\u8fc7\u5bf9\u4ed6\u672c\u4eba\u516c\u5f00\u6297\u8bae\u7684\u666e\u901a\u6c11\u4f17\uff1b       \u6ca1\u6709\u7981\u6b62\u5a92\u4f53\u62a5\u9053\u81ea\u5df1\u5bb6\u65cf\u4ee5\u53ca\u5176\u4ed6\u653f\u5e9c\u9ad8\u5b98\u7684\u6240\u8c13\u201c\u8d1f\u9762\u6d88\u606f\u201d\uff1b       \u6ca1\u6709\u4e3a\u53f0\u6e7e\u7f51\u6c11\u514d\u8d39\u63d0\u4f9b\u9632\u706b\u5899\u670d\u52a1\u3002           \u8bf4\u4e86\u8fd9\u4e48\u591a\u963f\u6241\u7684\u597d\uff0c\u6700\u540e\u5f3a\u8c03\u4e00\u4e0b\uff0c\u8bf4\u8fd9\u4e9b\u4e0d\u662f\u8981\u7ed9\u4ed6\u72af\u4e0b\u7684\u7f6a\u505a\u4efb\u4f55\u8fa9\u89e3\uff0c\u6211\u4e5f\u652f\u6301\u5224\u4ed6\u6709\u7f6a\uff0c\u53ea\u8981\u8bc1\u636e\u786e\u51ff\uff08\u4e8b\u5b9e\u4f3c\u4e4e\u7684\u786e\u5982\u6b64\uff09\u3002\u6211\u771f\u6b63\u60f3\u8bf4\u7684\u662f\uff0c\u963f\u6241\u8fd9\u4e2a\u4eba\u662f\u5426\u9760\u8c31\u5176\u5b9e\u5e76\u4e0d\u91cd\u8981\uff0c\u91cd\u8981\u7684\u662f\u53f0\u6e7e\u6709\u4e00\u4e2a\u9760\u8c31\u7684\u5236\u5ea6\uff1a\u80fd\u591f\u8ba9\u5c3d\u91cf\u9760\u8c31\u7684\u4eba\u5f53\u4e0a\u4ed6\u4eec\u7684\u603b\u7edf\uff1b\u5373\u4f7f\u4e0d\u5c0f\u5fc3\u72af\u4e86\u9519\u8bef\u5f04\u51fa\u6765\u4e2a\u4e0d\u9760\u8c31\u7684\uff0c\u8fd8\u80fd\u628a\u4ed6\u9009\u4e0b\u53bb\uff0c\u5e76\u4e14\u5ba1\u5224\u6e05\u7b97\u4ed6\u7684\u7f6a\u6076\u3002\u4e00\u4e2a\u56fd\u5bb6\u6216\u8005\u5730\u533a\u7684\u6700\u9ad8\u9886\u5bfc\u4eba\u8d2a\u6c61\u8150\u8d25\uff0c\u5f04\u51fa\u6765\u50cf\u963f\u6241\u90a3\u6837\u7684\u5bb6\u65cf\u5f0a\u6848\u5f53\u7136\u662f\u8ba9\u4eba\u5f88\u5931\u671b\u7684\u4e8b\uff1b\u4f46\u662f\u53cd\u8fc7\u6765\u60f3\u60f3\uff0c\u4e00\u4e2a\u56fd\u5bb6\u7684\u6700\u9ad8\u9886\u5bfc\u4eba\u6c38\u8fdc\u90fd\u6b63\u786e\u96be\u9053\u5c31\u771f\u7684\u662f\u597d\u4e8b\u5417\uff1f  ",categories:[],tags:["Chinese","Taiwan"],url:"https://www.wiserfirst.com/blog/about-chen-shui-bian-corruptions/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-22/taipei_1280_400.jpg"},{title:"\u5bc4\u8bed\u5eb7\u5eb7",excerpt:"   \u5e0c\u671b\u4f60\u5065\u5eb7\u5feb\u4e50\u7684\u6210\u957f\uff0c\u4e00\u76f4\u80fd\u4fdd\u6301\u4e00\u9897\u7ae5\u5fc3\uff0c\u4fdd\u6301\u73b0\u5728\u7684\u5929\u771f\u4e0e\u597d\u5947\uff0c\u65e0\u8bba\u591a\u5927\uff0c\u7238\u7238\u90fd\u4e0d\u613f\u610f\u4f60\u53d8\u5f97\u8001\u4e8e\u4e8b\u6545\u3001\u4e00\u526f\u72ac\u5112\u5fc3\u6001\u3002   \u6709\u68a6\u60f3\uff0c\u4e5f\u76f8\u4fe1\u81ea\u5df1\u53ef\u4ee5\u5b9e\u73b0\u68a6\u60f3\uff0c\u613f\u610f\u4e3a\u81ea\u5df1\u7684\u68a6\u60f3\u53bb\u594b\u6597\u548c\u8ffd\u6c42\u3002   \u5bf9\u81ea\u5df1\u8d1f\u8d23\uff0c\u61c2\u5f97\u5982\u4f55\u4e3a\u81ea\u5df1\u505a\u51fa\u9009\u62e9\uff0c\u5e76\u627f\u62c5\u76f8\u5e94\u7684\u8d23\u4efb\u6216\u540e\u679c\u3002   \u5c0a\u91cd\u4ed6\u4eba\uff0c\u5c3d\u91cf\u5b66\u4f1a\u7528\u53cc\u8d62\u7684\u601d\u7ef4\u8003\u8651\u95ee\u9898\u3002   \u4e50\u89c2\uff0c\u77e5\u9053\u8be5\u5982\u4f55\u5bfb\u627e\u5feb\u4e50\u5e76\u4e14\u80fd\u591f\u5728\u8fd9\u4e2a\u4e16\u754c\u4e0e\u81ea\u5df1\u7684\u5185\u5fc3\u4e4b\u95f4\u627e\u5230\u5e73\u8861\u3002   \u4e0d\u4e00\u5b9a\u8981\u6709\u5f88\u591a\u94b1\uff0c\u4f46\u4e00\u5b9a\u8981\u80fd\u591f\u81ea\u98df\u5176\u529b\u3002  ",categories:[],tags:["Chinese","parenting"],url:"https://www.wiserfirst.com/blog/word-to-kenneth/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-22/parent_child_1280_400.jpg"},{title:"\u5386\u53f2\u4e0a\u90a3\u4e9b\u6700\u611a\u8822\u7684\u8bdd",excerpt:"\u672c\u6587\u4e3a\u7ffb\u8bd1\uff0c\u5e76\u975e\u539f\u521b\u3002\u51fa\u5904\u5728\u6b64\uff1aSEVERAL DOZEN OF THE STUPIDEST THINGS EVER SAID   \u201cComputers in the future may weigh no more than 1.5 tons.\u201d \u2013Popular Mechanics, forecasting the relentless march of science, 1949  \u201c\u672a\u6765\u7684\u8ba1\u7b97\u673a\u5e94\u8be5\u4e0d\u4f1a\u8d85\u8fc7\u4e00\u70b9\u4e94\u5428\u91cd\u201d\u2014\u2014Popular Mechanics \uff08\u8bd1\u6ce8\uff1a\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u5a92\u4f53\uff09\uff0c\u5bf9\u79d1\u5b66\u4e0d\u65ad\u8fdb\u6b65\u7684\u9884\u6d4b\uff0c1949   \u201cI think there is a world market for maybe five computers.\u201d \u2013Thomas Watson, Chairman of IBM, 1943\\ \u201c\u6211\u60f3\u8ba1\u7b97\u673a\u7684\u5168\u7403\u5e02\u573a\u4e0a\u600e\u4e48\u4e5f\u5f97\u6709\u4e94\u53f0\u8ba1\u7b97\u673a\u5427\u201d\u2014\u2014Thomas Watson, IBM\u4e3b\u5e2d\uff0c1943   \u201cI have traveled the length and breadth of this country and talked with the best people, and I can assure you that data processing is a fad that won\u2019t last out the year.\u201d \u2013The editor in charge of business books for Prentice Hall, 1957  \u201c\u6211\u5230\u8fc7\u8fd9\u4e2a\u56fd\u5bb6\u5f88\u591a\u5730\u65b9\uff0c\u548c\u6700\u4f18\u79c0\u7684\u4eba\u804a\u8fc7\uff0c\u6211\u73b0\u5728\u53ef\u4ee5\u5411\u4f60\u4fdd\u8bc1\u6570\u636e\u5904\u7406\u4e0d\u4f1a\u6d41\u884c\u8fc7\u4eca\u5e74\u7684\u201d\u2014\u2014Prentice Hall\u5546\u5b66\u7c7b\u4e66\u7c4d\u7684\u4e3b\u7f16\uff0c1957   \u201cBut what \u2026 is it good for?\u201d \u2013Engineer at the Advanced Computing Systems Division of IBM, 1968, commenting on the microchip.  \u201c\u4f46\u662f\u8fd9\u4e1c\u897f\u2026\u2026\u6709\u5565\u7528\u554a\uff1f\u201d\u2014\u2014IBM\u9ad8\u7ea7\u8ba1\u7b97\u7cfb\u7edf\u90e8\u5de5\u7a0b\u5e08\uff0c\u5bf9\u5fae\u578b\u82af\u7247\u7684\u8bc4\u8bba\uff0c1968   \u201cThere is no reason anyone would want a computer in their home.\u201d \u2013Ken Olson, president, chairman and founder of Digital Equipment Corp., 1977  \u201c\u6ca1\u7406\u7531\u6bcf\u4e2a\u4eba\u5bb6\u91cc\u90fd\u9700\u8981\u4e00\u53f0\u8ba1\u7b97\u673a\u7684\u201d\u2014\u2014Ken Olson\uff0cDEC\u516c\u53f8\u603b\u88c1\u3001\u4e3b\u5e2d\u53ca\u521b\u5efa\u4eba\uff0c1977   \u201cThis \u2018telephone\u2019 has too many shortcomings to be seriously considered as a means of communication. The device is inherently of no value to us.\u201d \u2013Western Union internal memo, 1876.  \u201c\u8fd9\u4e2a\u6240\u8c13\u2018\u7535\u8bdd\u2019\u4f5c\u4e3a\u4e00\u79cd\u901a\u8baf\u5de5\u5177\u6709\u592a\u591a\u7684\u7f3a\u70b9\u9700\u8981\u8ba4\u771f\u8003\u8651\u3002\u8fd9\u79cd\u8bbe\u5907\u4ece\u672c\u8d28\u4e0a\u5bf9\u6211\u4eec\u6765\u8bf4\u6ca1\u6709\u4efb\u4f55\u4ef7\u503c\u201d\u2014\u2014Western Union\u5185\u90e8\u5907\u5fd8\u5f55\uff0c1876   \u201cThe wireless music box has no imaginable commercial value. Who would pay for a message sent to nobody in particular?\u201d \u2013David Sarnoff\u2019s associates in response to his urgings for investment in the radio in the 1920s.  \u201c\u8fd9\u4e2a\u65e0\u7ebf\u97f3\u4e50\u76d2\u6ca1\u6709\u53ef\u60f3\u8c61\u7684\u5546\u4e1a\u4ef7\u503c\u3002\u8c01\u4f1a\u4ed8\u94b1\u53bb\u53d1\u4e00\u6761\u6ca1\u6709\u7279\u5b9a\u53d7\u4f17\u7684\u6d88\u606f\u5462\uff1f\u201d\u2014\u2014David Sarnoff\u7684\u540c\u4e8b\u5bf9\u4ed6\u529b\u8350\u6295\u8d44\u65e0\u7ebf\u7535\u5e7f\u64ad\u7684\u56de\u5e94\uff0c\u4e0a\u4e16\u7eaa\u4e8c\u5341\u5e74\u4ee3   \u201cThe concept is interesting and well-formed, but in order to earn better than a \u2018C,\u2019 the idea must be feasible.\u201d \u2013A Yale University management professor in response to Fred Smith\u2019s paper proposing reliable overnight delivery service. (Smith went on to found Federal Express Corp.)  \u201c\u8fd9\u4e2a\u89c2\u5ff5\u5f88\u6709\u8da3\uff0c\u8bf4\u660e\u5f62\u5f0f\u4e5f\u4e0d\u9519\uff0c\u4e0d\u8fc7\u8981\u60f3\u5f97\u5230\u8d85\u8fc7C\u7684\u8bc4\u4ef7\uff0c\u60f3\u6cd5\u5fc5\u987b\u662f\u53ef\u5b9e\u73b0\u7684\u201d\u2014\u2014\u4e00\u4f4d\u8036\u9c81\u5927\u5b66\u7ba1\u7406\u5b66\u6559\u6388\u5bf9Fred Smith\u63d0\u51fa\u53ef\u9760\u9694\u591c\u5feb\u9012\u670d\u52a1\u7684\u8bc4\u4ef7\u3002\uff08Smith\u540e\u6765\u521b\u5efa\u4e86\u8054\u90a6\u5feb\u9012\uff09   \u201cWho the hell wants to hear actors talk?\u201d \u2013H.M. Warner, Warner Brothers, 1927.  \u201c\u8c01\u4ed6\u5988\u60f3\u542c\u6f14\u5458\u8bf4\u8bdd\uff1f\u201d\u2014\u2014H.M. Warner\uff0c\u534e\u7eb3\u5144\u5f1f\uff0c1927   \u201cI\u2019m just glad it\u2019ll be Clark Gable who\u2019s falling on his face and not Gary Cooper.\u201d \u2013Gary Cooper on his decision not to take the leading role in \u201cGone With The Wind.\u201d\\ \u201c\u6211\u5f88\u9ad8\u5174\u4e22\u8138\u7684\u662fClark Gable\u800c\u4e0d\u662fGary Cooper\u201d\u2014\u2014Gary Cooper\u5bf9\u4e8e\u4ed6\u4e0d\u9886\u8854\u4e3b\u6f14\u300a\u4e71\u4e16\u4f73\u4eba\u300b\u51b3\u5b9a\u7684\u8bc4\u4ef7   \u201cA cookie store is a bad idea. Besides, the market research reports say America likes crispy cookies, not soft and chewy cookies like you make.\u201d \u2013Response to Debbi Fields\u2019 idea of starting Mrs. Fields\u2019 Cookies.  \u201c\u997c\u5e72\u5e97\u662f\u4e2a\u574f\u4e3b\u610f\u3002\u53e6\u5916\uff0c\u5e02\u573a\u7814\u7a76\u8868\u660e\u7f8e\u56fd\u4eba\u559c\u6b22\u5403\u8106\u7684\u997c\u5e72\uff0c\u800c\u4e0d\u662f\u4f60\u505a\u7684\u90a3\u79cd\u8f6f\u800c\u4e14\u9700\u8981\u56bc\u7684\u201d\u2014\u2014\u5bf9\u4e8eDebbi Fields\u521b\u5efaMrs. Fields\u2019 Cookies\u60f3\u6cd5\u7684\u56de\u5e94   \u201cWe don\u2019t like their sound, and guitar music is on the way out.\u201d \u2013Decca Recording Co. rejecting the Beatles, 1962.  \u201c\u6211\u4eec\u4e0d\u559c\u6b22\u4ed6\u4eec\u7684\u58f0\u97f3\uff0c\u5e76\u4e14\u5409\u4ed6\u97f3\u4e50\u4e5f\u65e5\u6e10\u5f0f\u5fae\u201d\u2014\u2014Decca Recording Co.\u62d2\u7edd\u4e86\u7532\u58f3\u866b\u4e50\u961f\uff0c1962   \u201cHeavier-than-air flying machines are impossible.\u201d \u2013Lord Kelvin, president, Royal Society, 1895.\\ \u201c\u6bd4\u7a7a\u6c14\u91cd\u7684\u98de\u884c\u5668\u662f\u4e0d\u53ef\u80fd\u9020\u51fa\u6765\u7684\u201d\u2014\u2014Lord Kelvin\uff0cRoyal Society\u603b\u88c1\uff0c1895   \u201cIf I had thought about it, I wouldn\u2019t have done the experiment. The literature was full of examples that said you can\u2019t do this.\u201d \u2013Spencer Silver on the work that led to the unique adhesives for 3-M \u201cPost-It\u201d Notepads.  \u201c\u5982\u679c\u6211\u8003\u8651\u8fc7\u90a3\u4e9b\uff0c\u6211\u5c31\u4e0d\u4f1a\u505a\u8fd9\u8bd5\u9a8c\u4e86\u3002\u6587\u732e\u8d44\u6599\u4e0a\u5168\u662f\u4f60\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u505a\u8fd9\u4e2a\u7684\u4f8b\u5b50\u201d\u2014\u2014Spencer Silver\u5bf9\u4e8e3-M\u6613\u4e8b\u8d34\u524d\u671f\u5de5\u4f5c\u7684\u8bc4\u4ef7   \u201cSo we went to Atari and said, \u2018Hey, we\u2019ve got this amazing thing, even built with some of your parts, and what do you think about funding us? Or we\u2019ll give it to you. We just want to do it. Pay our salary, we\u2019ll come work for you.\u2019 And they said, \u2018No.\u2019 So then we went to Hewlett-Packard, and they said, \u2018Hey, we don\u2019t need you. You haven\u2019t got through college yet.\u2019\u201d \u2013Apple Computer Inc. founder, Steve Jobs, on attempts to get Atari and H-P interested in his and Steve Wozniak\u2019s personal computer.  \u201c\u6211\u4eec\u53bb\u4e86Atari\uff0c\u8bf4\u2018\u563f\uff0c\u6211\u4eec\u6709\u8fd9\u4e86\u4e0d\u8d77\u7684\u4e1c\u4e1c\uff0c\u800c\u4e14\u8fd8\u7528\u4e86\u4e00\u4e9b\u4f60\u4eec\u7684\u96f6\u4ef6\uff0c\u4f60\u4eec\u89c9\u5f97\u7ed9\u6211\u4eec\u6295\u8d44\u5982\u4f55\uff1f\u6216\u8005\u6211\u4eec\u628a\u5b83\u7ed9\u4f60\u4eec\u3002\u6211\u4eec\u53ea\u662f\u60f3\u505a\u8fd9\u4e2a\u3002\u4ed8\u6211\u4eec\u85aa\u6c34\uff0c\u6211\u4eec\u7ed9\u4f60\u4eec\u5de5\u4f5c\u3002\u2019\u7136\u540e\u4ed6\u4eec\u8bf4\u2018\u4e0d\u3002\u2019\u63a5\u7740\u6211\u4eec\u53bb\u4e86\u60e0\u666e\uff0c\u4ed6\u4eec\u8bf4\u2018\u563f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4f60\u4eec\u3002\u4f60\u4eec\u8fde\u6bd5\u4e1a\u90fd\u8fd8\u6ca1\u6bd5\u4e1a\u5462\u3002\u2019\u201d\u2014\u2014\u82f9\u679c\u516c\u53f8\u521b\u5efa\u4ebaSteve Jobs\u5f53\u521d\u8bd5\u56fe\u8ba9Atari\u548c\u60e0\u666e\u5bf9\u4ed6\u548cSteve Wozniak\u7684\u4e2a\u4eba\u8ba1\u7b97\u673a\u611f\u5174\u8da3   \u201cProfessor Goddard does not know the relation between action and reaction and the need to have something better than a vacuum against which to react. He seems to lack the basic knowledge ladled out daily in high schools.\u201d \u20131921 New York Times editorial about Robert Goddard\u2019s revolutionary rocket work.  \u201cGoddard\u6559\u6388\u4e0d\u61c2\u5f97\u4f5c\u7528\u4e0e\u53cd\u4f5c\u7528\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u4ed6\u9700\u8981\u4e00\u4e2a\u6bd4\u8bd5\u56fe\u4ece\u771f\u7a7a\u83b7\u53d6\u53cd\u4f5c\u7528\u66f4\u597d\u7684\u6a21\u578b\u3002\u4ed6\u4f3c\u4e4e\u7f3a\u4e4f\u9ad8\u4e2d\u6240\u4f20\u6388\u7684\u57fa\u7840\u77e5\u8bc6\u3002\u201d\u2014\u2014\u7ebd\u7ea6\u65f6\u62a5\u5bf9Robert Goddard\u5728\u706b\u7bad\u4e0a\u6240\u4f5c\u9769\u547d\u6027\u5de5\u4f5c\u7684\u793e\u8bba\uff0c1921   \u201cYou want to have consistent and uniform muscle development across all of your muscles? It can\u2019t be done. It\u2019s just a fact of life. You just have to accept inconsistent muscle development as an unalterable condition of weight training.\u201d \u2013Response to Arthur Jones, who solved the \u201cunsolvable\u201d problem by inventing Nautilus.  \u201c\u4f60\u5e0c\u671b\u5168\u8eab\u808c\u8089\u90fd\u80fd\u5f97\u5230\u4e00\u8d2f\u548c\u540c\u7b49\u7684\u953b\u70bc\uff1f\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u8fd9\u5c31\u662f\u73b0\u5b9e\u3002\u4f60\u53ea\u80fd\u63a5\u53d7\u4e0d\u534f\u8c03\u7684\u808c\u8089\u953b\u70bc\u662f\u91cd\u91cf\u8bad\u7ec3\u4e2d\u4e0d\u53ef\u6539\u53d8\u7684\u6761\u4ef6\u3002\u201d\u2014\u2014\u5bf9Arthur Jones\u7684\u56de\u5e94\uff0c\u4ed6\u540e\u6765\u53d1\u660e\u4e86Nautilus\u5065\u8eab\u5668\u5e76\u89e3\u51b3\u4e86\u8fd9\u4e2a\u6240\u8c13\u201c\u4e0d\u53ef\u80fd\u201d\u7684\u95ee\u9898\u3002   \u201cDrill for oil? You mean drill into the ground to try and find oil? You\u2019re crazy.\u201d \u2013Drillers who Edwin L. Drake tried to enlist to his project to drill for oil in 1859.\\ \u201c\u94bb\u4e95\u63a2\u6cb9\uff1f\u4f60\u662f\u8bf4\u5728\u5730\u4e0a\u6253\u4e95\u6765\u8bd5\u56fe\u627e\u77f3\u6cb9\uff1f\u4f60\u75af\u4e86\u3002\u201d\u2014\u2014Edwin L. Drake\u8bd5\u56fe\u529d\u8bf4\u4e00\u4e9b\u6253\u4e95\u5de5\u52a0\u5165\u4ed6\u7684\u94bb\u4e95\u63a2\u6cb9\u9879\u76ee\u65f6\u5f97\u5230\u7684\u56de\u5e94\uff0c1859   \u201cStocks have reached what looks like a permanently high plateau.\u201d \u2013Irving Fisher, Professor of Economics, Yale University, 1929.  \u201c\u80a1\u5e02\u4f3c\u4e4e\u5df2\u7ecf\u5230\u8fbe\u4e86\u6c38\u4e45\u7684\u9ad8\u70b9\u201d\u2014\u2014Irving Fisher, \u8036\u9c81\u5927\u5b66\u7ecf\u6d4e\u5b66\u6559\u6388\uff0c1929   \u201cAirplanes are interesting toys but of no military value.\u201d \u2013Marechal Ferdinand Foch, Professor of Strategy, Ecole Superieure de Guerre.  \u201c\u98de\u673a\u662f\u5f88\u6709\u8da3\u7684\u73a9\u5177\uff0c\u4f46\u662f\u6ca1\u6709\u519b\u4e8b\u4ef7\u503c\u3002\u201d\u2014\u2014Marechal Ferdinand Foch\uff0c\u6218\u7565\u6559\u6388\uff1f\uff08\u8bd1\u6ce8\uff1a\u8fd9\u673a\u6784\u540d\u6211\u4e5f\u7ffb\u4e0d\u51fa\u6765\u2026\u2026\u53ea\u77e5\u9053\u662f\u5fb7\u56fd\u7684\u3001\u548c\u519b\u4e8b\u6709\u5173\u7684\uff09   \u201cEverything that can be invented has been invented.\u201d \u2013 Charles H. Duell, Commissioner, U.S. Office of Patents, 1899.  \u201c\u6240\u6709\u80fd\u53d1\u660e\u7684\u4e1c\u897f\u90fd\u5df2\u7ecf\u88ab\u53d1\u660e\u4e86\u3002\u201d\u2014\u2014Charles H. Duell\uff0c\u7f8e\u56fd\u4e13\u5229\u5c40\u59d4\u5458\uff0c1899   \u201cLouis Pasteur\u2019s theory of germs is ridiculous fiction\u201d. \u2013Pierre Pachet, Professor of Physiology at Toulouse, 1872.\\ \u201cLouis Pasteur\u7684\u75c5\u83cc\u7406\u8bba\u662f\u65e0\u7a3d\u4e4b\u8c08\u3002\u201d\u2014\u2014Pierre Pachet\uff0c\u56fe\u5362\u5179\u751f\u7406\u5b66\u6559\u6388   \u201cThe abdomen, the chest, and the brain will forever be shut from the intrusion of the wise and humane surgeon\u201d. \u2013Sir John Eric Ericksen, British surgeon, appointed Surgeon- Extraordinary to Queen Victoria 1873.  \u201c\u8179\u8154\uff0c\u80f8\u8154\u548c\u9885\u8154\u5c06\u6c38\u8fdc\u662f\u660e\u667a\u548c\u4eba\u9053\u7684\u5916\u79d1\u533b\u751f\u7684\u7981\u5730\u3002\u201d\u2014\u2014Sir John Eric Ericksen\uff0c\u82f1\u56fd\u533b\u751f\uff0c\u7ef4\u591a\u5229\u4e9a\u5973\u738b\u6307\u5b9a\u533b\u751f\uff0c1873   \u201c640K ought to be enough for anybody.\u201d \u2013 Bill Gates, 1981  \u201c640K\u5e94\u8be5\u5bf9\u6bcf\u4e2a\u4eba\u90fd\u591f\u4e86\u201d\u2014\u2014\u6bd4\u5c14\u76d6\u8328\uff0c1981   Many thanks to Jody Culham for sending me this (and to Celia Raia, who sent it to her).\\ \u611f\u8c22Jody Culham\u5411\u6211\u53d1\u9001\u8fd9\u4e9b\uff08\u540c\u65f6\u611f\u8c22\u53d1\u7ed9\u5979\u7684Celia Raia\uff09   ",categories:[],tags:["quotes"],url:"https://www.wiserfirst.com/blog/several-dozen-of-the-stupidest-things-ever-said/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-22/ancient_theater_1280_400.jpg"},{title:"Wordpress\u7528\u6237\u5bc6\u7801\u4fee\u6539",excerpt:"\u9996\u5148\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\u300aWordPress\u7528\u6237\u5bc6\u7801\u7b97\u6cd5\u89c4\u5219\u300b\uff0c\u53ef\u4e86\u89e3\u5176\u5bc6\u7801\u8bbe\u7f6e\u4fdd\u5b58\u7684\u89c4\u5219\u3002\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c\u5bc6\u7801\u4fee\u6539\uff1a      \u8ba1\u7b97\u8981\u8bbe\u7f6e\u5bc6\u7801\u7684MD5\u503c\u3002\u5230\u8fd9\u91cc\uff0c\u8f93\u5165\u5bc6\u7801\u5b57\u7b26\u4e32\uff0c\u70b9\u51fb\u201cGenerate MD5\u201d\uff0c\u5f97\u5230\u5bc6\u7801\u7684MD5\u503c\u3002\u4f8b\u5982\u8981\u8bbe\u5bc6\u7801\u4e3aHello_world!\uff0c\u8ba1\u7b97\u51fa\u7684MD5\u4e3a8522b5c3cab95bebdc2b35836207a902   \u4f7f\u7528phpMyAdmin\u767b\u5f55MySQL\u6570\u636e\u5e93\uff0c\u67e5\u770bWordpress\u4f7f\u7528\u7684\u6570\u636e\u5e93\uff08\u8fd9\u4e2a\u662f\u5728\u5b89\u88c5LNMP\u65f6\u81ea\u5df1\u547d\u540d\u7684\uff09\u4e2d\u5b58\u653eusers\u7684\u8868\uff08\u901a\u5e38\u662fwp_users\uff09\uff0c\u5728\u5bf9\u5e94\u7528\u6237\u7684\u90a3\u4e00\u884c\u70b9\u51fbEdit\uff0c\u5373\u90a3\u4e2a\u94c5\u7b14\u6309\u94ae\uff0c\u7136\u540e\u5c06\u5bc6\u7801\u5b57\u6bb5\uff08\u6211\u8fd9\u91cc\u662fuser_pass\uff09\u7684\u503c\u6539\u4e3a\u521a\u521a\u5f97\u5230\u7684MD5\u503c\uff0c\u6700\u540e\u70b9\u51fbGO\u3002   \u8fd9\u4e2a\u64cd\u4f5c\u76f8\u5f53\u4e8e\u8fd0\u884c\u4e86\u5982\u4e0b\u7684SQL\u8bed\u53e5\uff1a   UPDATE `your_dbname`.`wp_users` SET `user_pass` = '8522b5c3cab95bebdc2b35836207a902' WHERE `wp_users`.`ID` = 1;   \u5982\u679c\u8db3\u591f\u719f\u6089\u7684\u8bdd\u4e5f\u53ef\u4ee5\u81ea\u5df1\u5199SQL\u8bed\u53e5\u6765\u6267\u884c\uff0c\u5bf9\u4e0a\u9762\u8bed\u53e5\u7a0d\u505a\u4fee\u6539\uff1a   UPDATE `your_dbname`.`wp_users` SET `user_pass` = '8522b5c3cab95bebdc2b35836207a902' WHERE `wp_users`.`user_login` = `your_username`;   \u6ce8\u610f\uff0c\u5176\u4e2d\u7684your_dbname\u548cyour_username\u8981\u66ff\u6362\u6210\u4f60\u7684\u6570\u636e\u5e93\u540d\u548c\u7528\u6237\u540d\u3002\u8fd9\u6837\u5199\u7684\u597d\u5904\u662f\u4e0d\u7528\u53bb\u67e5\u7528\u6237\u540d\u5bf9\u5e94\u7684ID\u3002 \u5230\u8fd9\u91cc\u5c31\u5df2\u7ecf\u5b8c\u6210\u4e86\u5bc6\u7801\u7684\u4fee\u6539\uff0c\u6b63\u5982\u6708\u5149\u8001\u5e08\u6240\u8bf4\uff0c\u6211\u4eec\u5199\u8fdb\u53bb\u7684\u662f\u5bc6\u7801\u7684MD5\u503c\uff0c\u4e0b\u6b21\u4f7f\u7528\u8fd9\u4e2a\u5bc6\u7801\u767b\u5f55\u540e\uff0cWordpress\u4f1a\u5c06\u5176\u4fee\u6539\u4e3a\u66f4\u52a0\u5b89\u5168\u7684\u5f62\u5f0f\u3002   ",categories:[],tags:["Chinese","wordpress","tiny-tips"],url:"https://www.wiserfirst.com/blog/wordpress-user-password-update/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-22/el_capitan_1280_400.jpg"},{title:"\u4f7f\u7528VPS\u505aSSH\u4ee3\u7406",excerpt:"\u9996\u5148\u767b\u5f55\u5230VPS\u5e76\u5207\u6362\u5230root\u5e10\u53f7\uff08\u4e5f\u53ef\u4ee5\u4f7f\u7528sudo\u547d\u4ee4\uff09\uff0c\u7136\u540e\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u5efa\u7acb\u65b0\u5e10\u6237\uff0c\u4e13\u95e8\u7528\u4e8eSSH\u4ee3\u7406\uff1a   useradd -M -s /sbin/nologin -n username   \u7136\u540e\u4e3a\u8be5\u7528\u6237\u8bbe\u7f6e\u5bc6\u7801:   passwd username   \u63a5\u7740\u6839\u636e\u63d0\u793a\u8f93\u5165\u4e24\u904d\u8fd9\u4e2a\u7528\u6237\u7684\u5bc6\u7801\u5373\u53ef\u3002\uff08\u53c2\u8003\u4e86\u8fd9\u7bc7\u6587\u7ae0\u300a\u5728VPS\u4e0a\u5efa\u7acb\u6700\u4f4e\u6743\u9650\u7684SSH\u5e10\u53f7\u7528\u4e8e\u4ee3\u7406\u670d\u52a1\u300b\uff09\u82e5\u8981\u5220\u9664\u8fd9\u4e2a\u7528\u6237\uff0c\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4:   userdel username   \u4e3a\u4e86\u4fdd\u8bc1\u7528\u6237\u540d\u548c\u5bc6\u7801\u7684\u5b89\u5168\u6027\uff0c\u6211\u4f7f\u7528\u4e86\u4e00\u4e2a\u56fd\u5916\u7f51\u7ad9\u4e0a\u7684\u5728\u7ebf\u5de5\u5177\u751f\u6210\u968f\u673a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u5730\u5740\u5728\u8fd9\u91cc(2021-04-02\u6ce8\uff1a\u6b64\u5de5\u5177\u7f51\u7ad9\u5df2\u4e0b\u7ebf)\u3002\u53ef\u4ee5\u6307\u5b9a\u5305\u542b\u5b57\u7b26\u7684\u7c7b\u522b\u548c\u4e32\u7684\u957f\u5ea6\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u633a\u597d\u7528\u7684\uff0c\u56de\u5934\u6709\u65f6\u95f4\u81ea\u5df1\u5199\u4e00\u4e2a\u3002   \u5bc6\u7801\u8bbe\u597d\u4ee5\u540e\uff0cServer\u914d\u7f6e\u5c31\u5b8c\u6210\u4e86\uff0c\u63a5\u4e0b\u6765\u505aClient\u914d\u7f6e\u3002\u5728Windows\u4e0b\u53ef\u4ee5\u4f7f\u7528Bitvise Tunnelier(2020-07-27\u6ce8\uff1a\u5df2\u66f4\u540d\u4e3aBitvise SSH Client)\uff0c\u70b9\u8fd9\u91cc\u4e0b\u8f7d\uff0c\u5176\u914d\u7f6e\u5b9e\u7528\u53c2\u8003\u4e86\u8fd9\u7bc7\u6587\u7ae0\u3002   \u4e0b\u8f7d\u5b89\u88c5Tunnelier\u8f6f\u4ef6\u540e\uff0c\u9996\u5148\u5728Login\u9875\u9762\u4e2d\u8f93\u5165VPS\u5730\u5740\u53ca\u5176SSH\u7aef\u53e3\uff0c\u4ee5\u53ca\u521a\u521a\u8bbe\u7f6e\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002\u5728Options\u9875\u9762\u7684On Login\u4e0b\u53d6\u6d88\u9009\u4e2dOpen Terminal\u548cOpen SFTP\uff0c\u8fd9\u6837\u4f7f\u7528\u8fd9\u4e2a\u5e10\u6237\u767b\u5f55\u65f6\u5c31\u4e0d\u4f1a\u81ea\u52a8\u6253\u5f00Terminal\u548cSFTP\u7a97\u53e3\u3002\u5176\u5b9e\u8fd9\u91cc\u5373\u4f7f\u4e0d\u53d6\u6d88\u4e5f\u662f\u767b\u5f55\u4e0d\u4e0a\u53bb\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5e10\u6237\u6743\u9650\u4e0d\u591f\u3002\u6700\u540e\u5728Service\u9875\u9762\u9009\u4e2dSOCKS/HTTP Proxy Forwarding\u4e0b\u9762\u7684Enable\uff0c\u5e76\u5728Listen Port\u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u4f60\u60f3\u4f7f\u7528\u7684\u7aef\u53e3\u53f7\uff0c\u59824567\u3002\u8fd9\u6837\u672c\u5730\u4ee3\u7406\u7684\u914d\u7f6e\u5c31\u5b8c\u6210\u4e86\u3002   \u60f3\u8981\u901a\u8fc7\u8fd9\u4e2a\u4ee3\u7406\u4e0a\u7f51\u53ea\u9700\u8981\u5728\u6d4f\u89c8\u5668\u4e2d\uff0c\u8bbe\u7f6e\u4ee3\u7406\u5730\u5740\u4e3a127.0.0.1:4567\u5373\u53ef\u3002\u5f53\u7136\u5982\u679c\u4f60\u4f7f\u7528Firefox\u5e76\u4e14\u5b89\u88c5\u4e86Autoproxy\u63d2\u4ef6\uff0c\u8fd8\u53ef\u4ee5\u6839\u636e\u7f51\u5740\u65e0\u7f1d\u5207\u6362\u7ffb\u5899\u4e0e\u5426\uff0c\u5341\u5206\u65b9\u4fbf\u3002\u53ea\u9700\u5728Autoproxy\u63d2\u4ef6\u7684\u914d\u7f6e\u4e2d\u5c06SSH -D\u65b9\u5f0f\u540e\u9762\u7684\u7aef\u53e3\u53f7\u6539\u4e3a4567\uff0c\u5e76\u9009\u62e9\u4f7f\u7528SSH -D\u5373\u53ef\u3002\u5173\u4e8e\u8be6\u7ec6\u7684\u8bbe\u7f6e\u8bf7\u81ea\u884cGoogle\u4e4b\u3002   ",categories:[],tags:["Chinese","vps","ssh","proxy"],url:"https://www.wiserfirst.com/blog/vps-as-ssh-proxy/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-21/nasa_earch_1280_400.jpg"},{title:"\u6587\u827a\u9752\u5e74\u6539\u53d8\u4e16\u754c?",excerpt:"\u5728\u8c46\u74e3\u770b\u5230\u4e00\u7bc7\u96c4\u6587\u300a\u6587\u827a\u9752\u5e74\u6539\u53d8\u4e16\u754c\u300b\u3002\u6587\u4e2d\u4e3e\u4e86\u624e\u574e\u4f2f\u683c\u3001\u6bd4\u5c14\u76d6\u8328\u3001Google\u521b\u59cb\u4eba\u7b49\u7684\u4f8b\u5b50\u6765\u8bc1\u660e\u201c\u53ea\u4f1a\u7f16\u7a0b\u7684\u4eba\u201d\u4e0d\u53ef\u80fd\u6539\u53d8\u4e16\u754c\uff0c\u6211\u8ba4\u4e3a\u8fd9\u4e2a\u5c42\u9762\u8bc1\u660e\u7684\u8fd8\u6bd4\u8f83\u6e05\u695a\uff1b\u7136\u800c\u6587\u672b\u7684\u7ed3\u8bba\u5374\u6709\u4e9b\u83ab\u540d\u5176\u5999\u2014\u2014\u201c\u6587\u827a\u9752\u5e74\u6539\u53d8\u4e16\u754c\u201d\u3002   \u7ecf\u5e38\u6709\u641e\u6280\u672f\u7684\u4f1a\u5ffd\u89c6\u6280\u672f\u4ee5\u5916\u7684\u4fee\u517b\uff0c\u800c\u8ba4\u4e3a\u201c\u53ea\u61c2\u7f16\u7a0b\u5c31\u591f\u4e86\u201d\u3002\u8fd9\u5f53\u7136\u662f\u4e0d\u5bf9\u7684\uff0c\u4f5c\u8005\u5728\u6587\u4e2d\u4e5f\u901a\u8fc7\u4e3e\u4f8b\u8bf4\u660e\u4e86\u90a3\u4e9b\u6539\u53d8\u4e86\u4e16\u754c\u7684\u4eba\u9664\u4e86\u7f16\u7a0b\u6280\u672f\u8fc7\u786c\u4e4b\u5916\u90fd\u6709\u5f88\u597d\u7684\u6280\u672f\u4ee5\u5916\u7684\u4fee\u517b\uff0c\u6bd4\u5982\u53e4\u5178\u8bed\u8a00\u3001\u7ed8\u753b\u7b49\u7b49\uff1b\u4f5c\u8005\u660e\u663e\u503e\u5411\u4e8e\u662f\u8fd9\u4e9b\u6280\u672f\u4ee5\u5916\u7684\u4fee\u517b\u624d\u4f7f\u4ed6\u4eec\u6709\u4e86\u201c\u8fdc\u89c1\u5353\u8bc6\u201d\uff0c\u4ece\u800c\u80fd\u591f\u5bf9\u4e16\u754c\u6709\u4e00\u4e9b\u5f71\u54cd\u3001\u6709\u4e00\u4e9b\u63a8\u52a8\u3002\u90a3\u4e48\u80fd\u5426\u5c31\u56e0\u6b64\u5c06\u624e\u574e\u4f2f\u683c\u7b49\u4eba\u5c31\u79f0\u4e3a\u201c\u6587\u827a\u9752\u5e74\u201d\u5462\uff1f\u6211\u60f3\u4e0d\u5149\u662f\u61c2\u6587\u827a\u7684Hacker\u4eec\uff0c\u8fde\u90a3\u4e9b\u771f\u6b63\u53ea\u61c2\u6587\u827a\u7684\u6587\u827a\u9752\u5e74\u4e5f\u8be5\u51fa\u6765\u6297\u8bae\u4e86\u3002\u8fde\u4f5c\u8005\u81ea\u5df1\u90fd\u627f\u8ba4\u201c\u7f16\u7a0b\u662f\u5fc5\u5907\u80fd\u529b\uff0c\u662f\u521b\u9020\u4e00\u4ef6\u4e1c\u897f\u9700\u8981\u7684\u57fa\u672c\u80fd\u529b\u201d\uff0c\u90a3\u5982\u4f55\u80fd\u5f97\u51fa\u201c\u6587\u827a\u9752\u5e74\u6539\u53d8\u4e16\u754c\u201d\u8fd9\u4e48\u4e2a\u7ed3\u8bba\uff1f\u5047\u5982\u7ed3\u8bba\u662f\u60f3\u8981\u901a\u8fc7\u6280\u672f\u6539\u53d8\u4e16\u754c\uff0c\u9664\u4e86\u7f16\u7a0b\u8fd8\u8981\u61c2\u201c\u5199\u4f5c\u3001\u7ed8\u753b\u3001\u53e4\u5e0c\u814a\u8bed\u201d\u7b49\u6587\u827a\u65b9\u9762\u7684\u4e1c\u897f\uff0c\u6211\u60f3\u4e0d\u4f1a\u6709\u591a\u5c11\u4eba\u53cd\u5bf9\u3002   \u4f5c\u8005\u7684\u903b\u8f91\u4f3c\u4e4e\u662f\u8fd9\u6837\u7684\uff1a\u5f88\u591a\u6210\u529f\u7684Hacker\u90fd\u6709\u5f88\u9ad8\u7684\u6587\u827a\u7d20\u517b=&gt;\u53ea\u61c2\u7f16\u7a0b\u4e0d\u591f=&gt;\u6587\u827a\u8db3\u4ee5\u6539\u53d8\u4e16\u754c\u3002\u6069\uff0c\u597d\u5427\u2014\u2014\u201c\u6587\u827a\u9752\u5e74\u6539\u53d8\u4e16\u754c\u201d\u3002   \u597d\u5427\uff0c\u6211\u5766\u767d\uff0c\u6211\u4e0d\u662f\u6587\u827a\u9752\u5e74\uff0c\u6211\u5199\u4f5c\u6c34\u5e73\u5f88\u70c2\u7684\u3002\u6211\u8fd8\u662f\u4e0d\u8bd5\u56fe\u6539\u53d8\u4e16\u754c\u4e86^_^   ",categories:[],tags:["Chinese","hipsters"],url:"https://www.wiserfirst.com/blog/hipster-change-the-world/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-21/boathouse_1280_400.jpg"},{title:"\u901a\u8fc7API\u66f4\u65b0Google\u8d26\u6237\u901a\u8baf\u5f55",
excerpt:"\u4e4b\u524d\u7528\u7684\u624b\u673a\u662fNokia\uff0c\u4e3a\u4e86\u4fdd\u5b58\u4e0a\u9762\u7684\u901a\u8baf\u5f55\uff0c\u6211\u6309\u7167\u8fd9\u91cc\u7684\u65b9\u6cd5\u4f7f\u7528Google Sync\u5c06\u5176\u540c\u6b65\u5230Google\u5e10\u6237\u3002\u7136\u540e\u5c31\u53ef\u4ee5\u5728Gmail\u7684\u901a\u8baf\u5f55\u5f53\u4e2d\u8bbf\u95ee\u4e86\u3002\u6362\u4e86iPhone\u4e4b\u540e\u81ea\u7136\u8981\u628a\u901a\u8baf\u5f55\u4eceGoogle\u5e10\u6237\u540c\u6b65\u8fc7\u6765\u3002   \u6b65\u9aa4\u5982\u4e0b\uff1a      \u5728\u8bbe\u7f6e\u2013&gt;\u90ae\u4ef6\u3001\u901a\u8baf\u5f55\u3001\u65e5\u5386 \u4e2d\u9009\u62e9\u6dfb\u52a0\u5e10\u6237   Microsoft Exchange   \u586b\u5165\u4f60\u7684Google\u5e10\u6237\uff08\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u670d\u52a1\u5668\u586bm.google.com\uff09   \u63a5\u7740\u5728\u8be5\u5e10\u6237\u7684\u8bbe\u7f6e\u4e2d\uff0c\u8981\u786e\u8ba4\u90ae\u4ef6\u3001\u901a\u8baf\u5f55\u548c\u65e5\u5386\u8fd9\u4e09\u9879\u7684\u540c\u6b65\u662f\u5426\u8981\u6253\u5f00\uff0c\u8fd9\u4e2a\u6839\u636e\u81ea\u5df1\u9700\u8981\u5904\u7406\u5427\u3002\u5f53\u7136\u4e86\uff0c\u8981\u540c\u6b65\u901a\u8baf\u5f55\u7684\u8bdd\uff0c\u901a\u8baf\u5f55\u8fd9\u9879\u4e00\u5b9a\u8981\u6253\u5f00\u624d\u884c   \u90ae\u4ef6\u3001\u901a\u8baf\u5f55\u3001\u65e5\u5386\u2013&gt;\u83b7\u53d6\u65b0\u6570\u636e \u4e2d\u6253\u5f00\u63a8\u9001\uff08\u6700\u597d\u5728\u6709WiFi\u63a5\u5165\u70b9\u65f6\uff09   \u8fd9\u6837\u8bbe\u7f6e\u5b8c\u6210\u4ee5\u540e\uff0c\u7a0d\u7b49\u4e00\u5c0f\u4f1a\uff0c\u518d\u6253\u5f00iPhone\u901a\u8baf\u5f55\u65f6\uff0c\u5c31\u4f1a\u53d1\u73b0Gmail\u901a\u8baf\u5f55\u91cc\u7684\u8054\u7cfb\u4eba\u4e86\u3002   \u5230\u8fd9\u91cc\u4f3c\u4e4e\u5c31\u5927\u529f\u544a\u6210\u4e86\uff0c\u7136\u800c\u5b9e\u9645\u60c5\u51b5\u5f80\u5f80\u5e76\u4e0d\u5982\u610f\u3002\u6bd4\u5982\u6211\u8fd9\u91cc\u5c31\u51fa\u4e86\u4e2a\u5c0f\u95ee\u9898\uff1a\u90e8\u5206\u8054\u7cfb\u4eba\u4e00\u5207\u6b63\u5e38\uff1b\u4f46\u662f\u53e6\u4e00\u90e8\u5206\u8054\u7cfb\u4eba\u91cc\u9762\u6ca1\u6709\u7535\u8bdd\u53f7\u7801\uff0c\u53ea\u662f\u4e2a\u7a7a\u7684\u8054\u7cfb\u4eba\u3002\u7ecf\u8fc7\u5bf9\u6bd4iPhone\u901a\u8baf\u5f55\u548cGmail\u901a\u8baf\u5f55\uff0c\u6211\u53d1\u73b0\u4e00\u4e2a\u89c4\u5f8b\uff0c\u5373Gmail\u4e2d\u7684\u53f7\u7801\u7c7b\u578b\u6807\u7b7e\u4e3aOther\u7684\u7535\u8bdd\u53f7\u7801\uff0ciPhone\u4e0a\u7edf\u7edf\u6ca1\u6709\u3002   \u7b2c\u4e00\u53cd\u5e94\u662f\u95eeGoogle\uff0c\u4f46\u662f\u4e00\u756a\u641c\u7d22\u5e76\u6ca1\u6709\u53d1\u73b0\u89e3\u51b3\u65b9\u6848\u2014\u2014\u4f3c\u4e4e\u6ca1\u6709\u4eba\u78b0\u5230\u8fd9\u4e2a\u95ee\u9898\u2026\u2026   \u90a3\u53ea\u80fd\u5c1d\u8bd5\u7740\u81ea\u5df1\u52a8\u624b\u4e86\u3002\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e94\u8be5\u662f\u628a\u53f7\u7801\u6807\u7b7e\u7c7b\u578b\u4eceOther\u6539\u6210Mobile\u6216\u8005Home\u3002\u767b\u5f55\u5230Gmail\u4e0a\u624b\u52a8\u6539\u5f53\u7136\u662f\u53ef\u4ee5\u4e86\uff0c\u4e0d\u8fc7\u5076\u7684\u901a\u8baf\u5f55\u6709200\u591a\u6761\uff0c\u4e00\u4e2a\u4e2a\u6539\u592a\u9ebb\u70e6\u4e86\u3002\u4f5c\u4e3a\u7a0b\u5e8f\u5458\uff0c\u5e94\u8be5\u5c1d\u8bd5\u81ea\u5df1\u5199\u4ee3\u7801\u89e3\u51b3\u95ee\u9898\uff0cGoogle\u5e94\u8be5\u6709\u63d0\u4f9b\u4fee\u6539\u8054\u7cfb\u4eba\u7684API\u3002\u67e5\u4e00\u4e0b\u679c\u7136\u6709\uff0c\u5c31\u662f\u8fd9\u4e2aGoogle Contacts API\u3002Google\u63d0\u4f9bJava\u3001.NET\u53capython\u7b49\u591a\u79cd\u8bed\u8a00\u63a5\u53e3\uff0c\u7531\u4e8e\u6b63\u5728\u81ea\u5b66python\uff0c\u5c31\u7528\u5b83\u5427\u3002\u4e0b\u8f7dgdata-python-client\uff0c\u7136\u540e\u5f00\u59cb\u7814\u7a76\u7535\u8bdd\u53f7\u7801\u53ca\u5176\u6807\u7b7e\u662f\u4f7f\u7528\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u4fdd\u5b58\u7684\u3002\u7ed3\u679c\u5982\u4e0b\uff1a      \u901a\u8baf\u5f55\u6761\u76ee\u7c7b\u578b\u4e3aclass gdata.contacts.data.ContactEntry\uff1b   \u5176\u4e2d\u7684\u7535\u8bdd\u53f7\u7801\u5b57\u6bb5\u540d\u4e3aphone_number\uff0c\u5b83\u662f\u4e00\u4e2alist\uff0c\u6bcf\u4e2a\u7535\u8bdd\u53f7\u7801\u4e3alist\u4e2d\u4e00\u9879\uff0c\u7c7b\u578b\u662fclass gdata.data.PhoneNumber\uff1b   PhoneNumber\u7c7b\u578b\u7684rel\u5b57\u6bb5\u662f\u4e00\u4e2a\u7c7b\u4f3c\u4e8ehttp://schemas.google.com/g/2005#other\u7684\u5b57\u7b26\u4e32\uff0c\u4fdd\u5b58\u4e86\u53f7\u7801\u6807\u7b7e\uff1b\u800c\u662f\u5176text\u5b57\u6bb5\u662f\u771f\u6b63\u7684\u7535\u8bdd\u53f7\u7801\uff0c\u598213526541245\uff0c\u4f46\u5176\u7c7b\u578b\u8fd8\u4e0d\u662fstring\uff0c\u9700\u8981\u5bf9\u5176\u8c03\u7528str()\u624d\u80fd\u5f97\u5230\u5b57\u7b26\u4e32\u3002   \u53e6\u5916\uff0c\u7ecf\u9a8c\u8bc1\u8fd8\u53d1\u73b0\uff1a\u5728Gmail\u7684\u901a\u8baf\u5f55\u4e2d\uff0c\u53f7\u7801\u6807\u7b7e\u5171\u67099\u79cd\u7c7b\u578b\uff0c\u4ee5\u4e0b\u516d\u79cd\u53ef\u4ee5\u6b63\u786e\u540c\u6b65\u5230iOS\u8bbe\u5907\u7684\u901a\u8baf\u5f55\u4e2d                  Gmail       iOS                       Mobile       \u79fb\u52a8\u7535\u8bdd                 Work       \u5de5\u4f5c                 Work Fax       \u5de5\u4f5c\u4f20\u771f                 Home       \u4f4f\u5b85                 Home Fax       \u4f4f\u5b85\u4f20\u771f                 Pager       \u4f20\u547c           \u53e6\u59163\u79cd\u7c7b\u578b\uff08Google Voice, Main, Custom\uff09\u4e0d\u80fd\u540c\u6b65\u5230iOS\u8bbe\u5907\u7684\u901a\u8baf\u5f55\u3002\u6ce8\u610f\u8fd9\u4e2aCustom\u662f\u7528\u6237\u81ea\u5b9a\u4e49\uff0c\u4e5f\u5c31\u662f\u5b57\u6bb5\u540d\u53ef\u4ee5\u662f\u4e00\u5b9a\u957f\u5ea6\u4ee5\u5185\u7684\u4efb\u4f55\u5b57\u7b26\u4e32\uff0c\u5728Gmail\u901a\u8baf\u5f55\u90fd\u53ef\u4ee5\u6b63\u786e\u4fdd\u5b58\u3002\u4f7f\u7528Gsync\u540c\u6b65Nokia\u624b\u673a\u901a\u8baf\u5f55\u5230Gmail\u7684\u65f6\u5019\uff0c\u6709\u4e9b\u624b\u673a\u53f7\u7684\u6807\u7b7e\u4f1a\u662fOther\uff0c\u4e5f\u5c31\u662f\u4e00\u79cd\u81ea\u5b9a\u4e49\u7c7b\u578b\u3002\u5c31\u662f\u8fd9\u4e2a\u5bfc\u81f4\u4eceNokia\u624b\u673a\u540c\u6b65\u8fc7\u6765\u7684\u901a\u8baf\u5f55\u4e2d\u6709\u4e9b\u8054\u7cfb\u4eba\u540d\u5b57\u5728\u4f46\u662f\u53f7\u7801\u5374\u662f\u7a7a\u7684\u3002   \u7136\u540e\u5c31\u5f00\u59cb\u5199\u4ee3\u7801\uff0c\u903b\u8f91\u65e0\u975e\u5c31\u662f\uff1a   if \u53f7\u7801\u6807\u7b7e\u4e3aOther: \xa0\xa0 \xa0if \u624b\u673a\u53f7: \xa0\xa0 \xa0 \xa0 \xa0\u5c06\u53f7\u7801\u6807\u7b7e\u6539\u4e3aMobile \xa0\xa0 \xa0else: \xa0\xa0 \xa0\xa0\xa0 \xa0\u5c06\u53f7\u7801\u6807\u7b7e\u6539\u4e3aWork   \u771f\u6b63\u5b9e\u73b0\u8fd9\u4e2a\u903b\u8f91\u5e76\u6ca1\u6709\u82b1\u591a\u5c11\u65f6\u95f4\uff0c\u5728Google\u63d0\u4f9b\u7684sample\u4ee3\u7801\u91cc\u9762\u5f88\u5bb9\u6613\u5c31\u6539\u51fa\u6765\u4e86\uff1b\u5012\u662f\u627e\u8868\u793a\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bb5\u540d\uff0c\u4ee5\u53ca\u8868\u793a\u53f7\u7801\u6807\u7b7e\u7684\u5b57\u6bb5\u540d\uff0c\u82b1\u4e86\u4e00\u4e9b\u65f6\u95f4\u3002\u56e0\u4e3aGoogle\u6240\u63d0\u4f9b\u7684\u5e93\u4e2d\uff0c\u7c7b\u7684\u5b9a\u4e49\u5b9e\u5728\u662f\u6709\u70b9\u590d\u6742\u2014\u2014\u81f3\u5c11\u5bf9\u6211\u8fd9\u4e2a\u6ca1\u63a5\u89e6\u8fc7\u7684\u65b0\u624b\u800c\u8a00\u662f\u8fd9\u6837\u3002\u5168\u90e8\u7406\u6e05\u5934\u7eea\u4ee5\u540e\uff0c\u56de\u8fc7\u5934\u60f3\u60f3\u5176\u5b9e\u6574\u4e2a\u8fc7\u7a0b\u5e76\u4e0d\u56f0\u96be\uff0c\u5982\u679c\u5bf9Google\u7684\u5e93\u6709\u4e9b\u719f\u6089\uff0c\u5e94\u8be5\u5f88\u5feb\u5c31\u80fd\u641e\u5b9a\u7684\u3002   ",categories:[],tags:["Chinese","google","python"],url:"https://www.wiserfirst.com/blog/update-google-contacts-via-api/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-21/google_sunnyvale_1280_400.jpg"},{title:"Updating Multiple Text Files in Terminal with Regular Expression",excerpt:"I am trying to do this in Cygwin on Windows, but I think it should work just fine on Linux. The steps are as listed below.   Find the files needed to be updated (here I want to find all cshtml files containing a certain pattern in its content):   find . -name \"*cshtml\" -exec grep -l \"old-pattern\" {} \\;   Sometimes there are white spaces in filenames, so pipe the output to sed to provide valid filenames for later use:   sed -e 's/\\s/\\\\ /g'   Last, do the actual replacement by sed:   sed -i 's/old-pattern/new-pattern/g'   The full command is:   find . -name \"*cshtml\" -exec grep -l \"old-pattern\" {} \\; | sed -e 's/\\s/\\\\ /g' | sed -i 's/old-pattern/new-pattern/g'   Although step one may not seem necessary, it prevents accidentally changing files that doesn\u2019t contain the target pattern.  ",categories:[],tags:["cygwin","linux","regex","sed"],url:"https://www.wiserfirst.com/blog/updating-multiple-text-files-in-terminal-with-regex/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-21/scenic_route_1280_400.jpg"},{title:"Stop the Photos App Opening Automatically when iPhone Connects",excerpt:"When connecting an iPhone to your Mac, the Photos app will open automatically by default, which could sometimes be pretty annoying. So here is how to prevent that:      Connect the iPhone to the Mac and let Photos app launch itself as usual   Under the \u201cImport\u201d tab of Photos app, look in the upper left corner to find the device name, this will indicate which iPhone (or hardware) will no longer automatically activate Photos app   Click the checkbox so that \u201cOpen Photos for this device\u201d is no longer selected (likewise, toggling this on would enable Photos app to open itself again automatically when this device is connected)   Quit out of Photos app, the change is immediate for that device \u2013 this can be switched back at any time in the same OS X Photos app screen   For more details please refer to this article on OSXDaily   ",categories:[],tags:["iPhone","Photos"],url:"https://www.wiserfirst.com/blog/stop-photos-opening-automatically-when-iphone-connects/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-21/colosseum_1280_400.jpg"},{title:"Install Latest Versions of Linux, Nginx, MySQL and PHP (LEMP) on Ubuntu 12.04",excerpt:"Installing the LEMP stack on Ubuntu is pretty simple, you can follow a step-by-step guide like this one on Digital Ocean. But as of July 2015, the versions of Nginx and PHP are 1.1.19 and 5.3.10 respectively, both of which are pretty old. If you want the latest version of Nginx and PHP, there are a few extra steps to take.   First of all you need to install python-software-properties package, in order to add ppa later:   sudo apt-get -y install python-software-properties   Next add ppa for Nginx and install the latest version:   sudo apt-get -y install python-software-properties sudo add-apt-repository ppa:nginx/stable sudo apt-get update sudo apt-get install nginx   Then add ppa for PHP5.6 and install the latest version:   sudo apt-get -y install python-software-properties sudo add-apt-repository ppa:ondrej/php5-5.6 sudo apt-get update sudo apt-get remove php-pear php5-fpm php5-cgi php5-cli php5-common php5-curl php5-dev php5-gd php5-mcrypt php5-mysql libssh2-php sudo apt-get autoremove sudo apt-get install php5-fpm php5-mysql php5-gd php5-mcrypt php5-curl php5-dev php-pear libssh2-1-dev libssh2-php php5-redis   Notice that you need to remove old php 5.3 related packages first before installing the new php packages for PHP 5.6, otherwise you might get into trouble like     apt couldn\u2019t resolve dependencies    ",categories:[],tags:["linux","nginx","mysql","php","ubuntu"],url:"https://www.wiserfirst.com/blog/install-latest-versions-of-lemp-on-ubuntu-12-04/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-21/sunset_tree_1280_400.jpg"},{title:"All about Redirection",excerpt:"There are three special file descriptors: stdin, stdout and stderr (std stands for standard), which are defined as file descriptor 0, 1 and 2. You can do different types of redirections with them.      redirect stdout to a file   ls -la &gt; la.log      redirect stderr to a file   ack 'pattern' 2&gt; ack-error.log      redirect stdout to stderr   ack 'pattern' 1&gt;&amp;2      redirect stderr to stdout   ack 'pattern' 2&gt;&amp;1      redirect stderr and stdout to a file   ack 'pattern' &amp;&gt; /dev/null   References      All about redirection from TLDP   Linux file descriptor  ",categories:[],tags:["linux","redirection"],url:"https://www.wiserfirst.com/blog/all-about-redirection/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-21/path_in_forest_1280_400.jpg"},{title:"\u795e\u7ea7\u8f93\u5165\u6cd5\u9f20\u9b1a\u7ba1\u7684\u5b89\u88c5\u548c\u57fa\u672c\u914d\u7f6e",excerpt:'\u9f20\u9b1a\u7ba1\u5e94\u8be5\u662fOSX\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u6700\u4f18\u79c0\u7684\u4e2d\u6587\u8f93\u5165\u6cd5\uff08\u6ca1\u6709\u4e4b\u4e00\uff09\uff0c\u5176\u597d\u5904\u6211\u5c31\u4e0d\u591a\u8bb2\u4e86\uff0c\u6709\u5174\u8da3\u81ea\u5df1\u53bb\u5b98\u65b9\u7f51\u7ad9\u6216\u8005\u6587\u672b\u5217\u51fa\u7684\u53c2\u8003\u94fe\u63a5\u91cc\u9762\u81ea\u5df1\u770b\u5427\u3002\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e0b\u9f20\u9b1a\u7ba1\u7684\u5b89\u88c5\u548c\u57fa\u672c\u7684\u914d\u7f6e\u3002   \u9f20\u9b1a\u7ba1\u7684\u5b89\u88c5   \u53ef\u4ee5\u76f4\u63a5\u5230\u5b98\u65b9\u7f51\u7ad9\u7684\u4e0b\u8f7d\u9875\u9762\u4e0b\u8f7d\u5b89\u88c5\u6587\u4ef6\u5e76\u624b\u52a8\u5b89\u88c5\uff0c \u6216\u8005\u4f7f\u7528Homebrew Cask:   brew install --cask squirrel      \u6ce8\uff1aCask\u5b89\u88c5\u547d\u4ee4\u66f4\u65b0\u4e8e2021-05-20    \u9f20\u9b1a\u7ba1\u7684\u57fa\u672c\u914d\u7f6e   \u9f20\u9b1a\u7ba1\u7684\u552f\u4e00\u7f3a\u70b9\u5c31\u662f\u76ee\u524d\u8fd8\u6ca1\u6709\u4e00\u4e2a\u56fe\u5f62\u754c\u9762\u7684\u914d\u7f6e\u5de5\u5177\uff0c\u4fee\u6539\u914d\u7f6e\u9700\u8981\u76f4\u63a5\u7f16\u8f91YAML\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\u3002\u5176\u5b9e\u8fd9\u4e5f\u4e0d\u80fd\u5b8c\u5168\u7b97\u662f\u7f3a\u70b9\uff0c\u800c\u662f\u4e00\u628a\u53cc\u5203\u5251\u3002\u4e00\u65b9\u9762\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u6700\u5927\u7a0b\u5ea6\u4e0a\u5bf9\u8f93\u5165\u6cd5\u8fdb\u884c\u5b9a\u5236\uff0c\u4ece\u800c\u7cbe\u786e\u63a7\u5236\u81ea\u5df1\u60f3\u8981\u7684\u6548\u679c\uff1b\u53e6\u4e00\u65b9\u9762\u6ca1\u6709\u56fe\u5f62\u754c\u9762\u4e5f\u8ba9\u65b0\u624b\u671b\u800c\u5374\u6b65\uff0c\u9762\u5bf9\u4e00\u5806\u914d\u7f6e\u6587\u4ef6\u4e0d\u77e5\u8be5\u4ece\u54ea\u91cc\u4e0b\u624b\u3002\u672c\u6587\u662f\u9762\u5411\u65b0\u624b\u7684\uff08\u5305\u62ec\u6211\u81ea\u5df1\uff09\uff0c\u53ea\u4ecb\u7ecd\u51e0\u4e2a\u6700\u57fa\u672c\u7684\u914d\u7f6e\uff0c\u8ba9\u6211\u65e5\u5e38\u6253\u5b57\u8212\u670d\u5c31\u591f\u4e86\u3002\u81f3\u4e8e\u9ad8\u7ea7\u7684\u914d\u7f6e\u65b9\u5f0f\uff0c\u8fd8\u8bf7\u79fb\u6b65\u5b98\u65b9\u7684\u5b9a\u5236\u6307\u5357\u3002   \u70b9\u51fbOSX\u53f3\u4e0a\u89d2\u7684\u9f20\u9b1a\u7ba1\u56fe\u6807\uff0c\u5728\u4e0b\u62c9\u83dc\u5355\u4e2d\u9009\u62e9Setting/\u7528\u6237\u8bbe\u5b9a\uff0c\u5373\u53ef\u5728Finder\u4e2d\u6253\u5f00\u914d\u7f6e\u6587\u4ef6\u6240\u5728\u76ee\u5f55\u3002\u53e6\u5916\uff0c\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u4e4b\u540e\u4e0d\u4f1a\u7acb\u5373\u751f\u6548\uff0c\u9700\u8981\u70b9\u51fb\u9f20\u9b1a\u7ba1\u56fe\u6807\uff0c\u5728\u4e0b\u62c9\u83dc\u5355\u4e2d\u9009\u62e9deploy/\u91cd\u65b0\u90e8\u7f72\u3002   \u5207\u6362\u5230\u7b80\u4f53\u8f93\u5165   \u9f20\u9b1a\u7ba1\u9ed8\u8ba4\u662f\u7e41\u4f53\u8f93\u5165\uff0c\u5982\u9700\u5207\u6362\u5230\u7b80\u4f53\u8f93\u5165\uff0c\u8bf7\u9009\u62e9Rime\u8f93\u5165\u6cd5\u5e76\u628a\u7126\u70b9\u653e\u5728\u4efb\u610f\u6587\u5b57\u8f93\u5165\u6846\u5185\uff0c\u7528Ctrl+~\u8c03\u51fa\u5f85\u9009\u9879\uff0c\u7136\u540e\u9009\u62e9 \u201c\u660e\u6708\u62fc\u97f3 \u7b80\u5316\u5b57\u201d   \u4fee\u6539\u5f85\u9009\u5b57\u4e3a\u6392\u5217\u65b9\u5f0f\u548c\u5b57\u4f53\u5927\u5c0f   \u5f85\u9009\u5b57\u9ed8\u8ba4\u662f\u7eb5\u5411\u6392\u5217\u7684\uff0c\u4e0d\u592a\u7b26\u5408\u6211\u7684\u4e60\u60ef\uff0c\u6240\u4ee5\u9700\u8981\u6539\u4e3a\u6a2a\u5411\u6392\u5217\u3002\u5728squirrel.yaml\u6587\u4ef6\u4e2d\u5c06horizontal\u6539\u4e3atrue\uff0cfont_point\u6539\u4e3a16\uff0c\u5982\u4e0b   horizontal: true font_point: 16   \u4fee\u6539\u914d\u8272\u65b9\u6848   \u9f20\u9b1a\u7ba1\u81ea\u5e26\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u5df2\u7ecf\u5b9a\u4e49\u4e86\u51e0\u4e2a\u9884\u8bbe\u7684\u914d\u8272\u65b9\u6848\uff0c\u5982\u679c\u89c9\u5f97\u6ca1\u6709\u5408\u9002\u7684\u8fd8\u53ef\u4ee5\u81ea\u5df1\u5b9a\u5236\u914d\u8272\u65b9\u6848\u3002\u6211\u4e2a\u4eba\u89c9\u5f97\u9884\u8bbe\u7684Google\u914d\u8272\u65b9\u6848\u5c31\u86ee\u597d\u7684\u3002\u4ecd\u7136\u662f\u4fee\u6539squirrel.yaml\uff0c\u5c06color_scheme\u6539\u4e3agoogle   color_scheme: google   \u4fee\u6539\u5019\u9009\u8bcd\u6570\u91cf   \u8fd9\u4e2a\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u559c\u597d\u8bbe\u7f6e\u3002\u6211\u89c9\u5f976\u4e2a\u5019\u9009\u8bcd\u5408\u9002\uff0c\u5c31\u5c06default.yaml\u4e2d\u7684page_size\u6539\u4e3a6   menu:   page_size: 6   \u4fee\u6539\u5019\u9009\u8bcd\u8bcd\u9891\u8c03\u6574\u9600\u9650   \u9f20\u9b1a\u7ba1\u9ed8\u8ba4\u6709\u667a\u80fd\u8bcd\u9891\u8c03\u6574\uff0c\u4f46\u662f\u9891\u6b21\u9600\u9650\u8f83\u9ad8\uff0c\u6240\u4ee5\u8c03\u6574\u6bd4\u8f83\u6162\u3002\u5982\u679c\u5e0c\u671b\u6839\u636e\u5f53\u524d\u7684\u8f93\u5165\u66f4\u5feb\u8fdb\u884c\u8bcd\u9891\u8c03\u6574\uff0c\u5728luna_pinyin_simp.schema.yaml\u7684version\u4e0b\u65b9\u52a0\u4e00\u884csort: by_weight\uff0c\u5982\u4e0b   schema:   schema_id: luna_pinyin_simp   name: \u6719\u6708\u62fc\u97f3\xb7\u7b80\u5316\u5b57   version: "0.22"   sort: by_weight   author:     - \u4f5b\u632f &lt;chen.sst@gmail.com&gt;   description: |     \u6719\u6708\u62fc\u97f3\uff0c\u7c21\u5316\u5b57\u8f38\u51fa\u6a21\u5f0f\u3002   \u53c2\u8003      \u5b98\u65b9\u7f51\u7ad9\u4e0a\u7684\u6587\u6863\uff0c\u5176\u5b9e\u5185\u5bb9\u90fd\u662f\u653e\u5728Rime Github\u9879\u76ee\u7684Wiki\u9875\u9762\u4e2d\u7684   \u9f20\u987b\u7ba1\uff0c\u201c\u795e\u7ea7\u201d\u8f93\u5165\u6cd5 from \u7231\u8303\u513f   \u63a8\u85a6\u4e00\u500b\u795e\u7d1a\u8f38\u5165\u6cd5\u2014\u2014Rime by @byvoid   ',categories:[],tags:["Chinese","rime","ime"],url:"https://www.wiserfirst.com/blog/install-and-configure-rime-ime/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-20/squirrel_1280_400.jpg"},{title:"Running PostgreSQL on OSX",excerpt:'If you use Homebrew, installing PostgreSQL (and a lot of other packages) is really easy. Just type the following command in Terminal:   brew install postgresql   Normally you need to initialize the database with   initdb /usr/local/var/postgres   But again if you installed PostgreSQL with Homebrew, this is already done for you.   Next you can start PostgreSQL server with:   launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist   And stop it with:   launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist   After knowing how to start/stop the database server, it is time to create some databases and user accounts, or roles as they are called in PostgreSQL. This part is pretty complicated, and I\u2019ll only cover a tiny little bit. For more detail, please refer to the offical documentation.   The installation process will also create a database named postgres and a role with permission to create new databases. On OSX, the new role has the same name as the current operating system user; but on Ubuntu, this role is named postgres. There are a few useful commands to manage databases and roles:   # create database createdb my_db_name # remove database dropdb my_db_name # create role/user createuser username # remove role/user dropuser username   You can use the psql command to connect to PostgreSQL server from terminal:   psql mydb   If the database name is not specified, it will default to the current user name.   You can connect to the database as a different role with -U option:   psql -U another_role mydb   You\u2019ll see something like this in psql:   psql (9.4.4) Type "help" for help.  mydb=#   The last line is mydb=#, which means you are a database superuser. For a normal database user, the last line look like this:   mydb=&gt;   Inside psql prompt, you can use \\h to get help about syntax of SQL commands, \\? for help with psql commands and \\q to quit.   ',categories:[],tags:["postgres","macos"],url:"https://www.wiserfirst.com/blog/running-postgresql-on-osx/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-20/elephant_1440_480.jpg"},{title:"Understanding the Use Statement in Elixir with Examples",excerpt:'When you use a module in Elixir, the __using__/1 macro of that module is called.   In the Hello example app from Phoenix Guides, the router is defined as a module named HelloPhoenix.Router in web/router.ex. The first line of its body looks like this:   use HelloPhoenix.Web, :router   It is calling the __using__/1 macro of HelloPhoenix.Web module, with a atom :router as the parameter. If you open web/web.ex, where HelloPhoenix.Web module is defined, you can find the macro near the bottom:   @doc """ When used, dispatch to the appropriate controller/view/etc. """ defmacro __using__(which) when is_atom(which) do   apply(__MODULE__, which, []) end   __MODULE__ is one of Elixir\u2019s read-only pseudo-variables. Similar to Erlang\u2019s ?MODULE, it expands to the current module\u2019s name at compile time, which in our case is HelloPhoenix.Web. As for the apply/3 function, according to Elixir documentation, it has the following signature:   apply(module, fun, args)   So in this case, the current module, an atom :router and an empty list are bind to the module, fun and args parameters respectively. What the apply function does is:      Invokes the given fun from module with the array of arguments args. Inlined by the compiler.    That means a function named router in the current module will be called with an empty list as the parameter. Let\u2019s look at the router function:   def router do   quote do     use Phoenix.Router   end end   The code in a quote block will be turned it into its internal representation in Elixir. You can find more about quoting in the quote and unquote guide. Then we have another round of use, and now the __using__/1 macro of module Phoenix.Router will be called with no parameter, which defaults to an empty list.   ',categories:[],tags:["elixir","use","phoenix"],url:"https://www.wiserfirst.com/blog/understanding-the-use-statement-in-elixir-with-examples/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-20/bottles_of_potion_1280_400.jpg"},{title:"Making My First Contribution to the Phoenix Framework",
excerpt:'To me the idea of contributing to a popular open source project, feels exciting and intimidating at the same time, since I\u2019ve never done that before (except for improving the documentation/guides) and not sure know where to start.   But a few hours ago, my first commit to the Phoenix framework got merged, which made me technically a contributor. I just updated the version of Bootstrap in a newly generated Phoenix app to the latest (3.3.5 as of today). I understand it was just a minor change, but the reasoning process in figuring out how to do it with very little initial understanding of the internals of the Phoenix framework was still worth noting. I suppose there are other people who are interested in contributing to open source, but like me, have no idea how to start. So I\u2019m sharing my experience, in the hope of benefiting other new developers and also myself.   The Start   Recently I got serious in learning the Phoenix framework, and was building a new website with it. While styling the home page, I noticed the version of Bootstrap was still 3.1.1, which was released in Feb 2014. So I think maybe it\u2019s time to update it to the latest version.   OK! Let\u2019s do it!   The (Boring) Details   First I need to figure out where the Bootstrap source file was located in the Phoenix project. Now I understand that in a new Phoenix app, the web/static/css/app.css file is where Bootstrap lives in and a new Phoenix app could be generated by running mix phoenix.new. This is a mix task you get from installing Phoenix. So there must be some clue in what this task would do, which should involve copying files from the Phoenix to a newly generated app. Let\u2019s look into that. I already know mix is a task runner (and more) for Elixir, just like Rake is to Ruby and we can add new tasks for it to run. But unfortunately, I don\u2019t know yet how to define a mix task. Time to consult the documentation for Mix task:      A simple module that provides conveniences for creating, loading and manipulating tasks.     A Mix task can be defined by simply using Mix.Task in a module starting with Mix.Tasks. and defining the run/1 function:     defmodule Mix.Tasks.Hello do  use Mix.Task  def run(_) do    Mix.shell.info "hello"  end end       The run/1 function will receive all arguments passed to the command line.    OK. So to define a new Mix task, just define a module with a name prefix \u201cMix.Tasks\u201d, use the Mix.Task module in it, and provide a run/1 function. According to the convention of a Mix project, the source code of a project usually lives in the lib directory. Let\u2019s take a look there:   phoenix_source git:(master) ll lib total 8 drwxr-xr-x   4 wiser  staff   136B Oct 16 11:06 mix drwxr-xr-x  29 wiser  staff   986B Oct 16 11:06 phoenix -rw-r--r--   1 wiser  staff   1.3K Oct 16 11:06 phoenix.ex phoenix_source git:(master) ll lib/mix total 16 -rw-r--r--   1 wiser  staff   5.1K Oct 16 11:06 phoenix.ex drwxr-xr-x  11 wiser  staff   374B Oct 16 11:06 tasks phoenix_source git:(master) ll lib/mix/tasks total 88 -rw-r--r--  1 wiser  staff   984B Oct 16 11:06 compile.phoenix.ex -rw-r--r--  1 wiser  staff   1.8K Oct 16 11:06 phoenix.digest.ex -rw-r--r--  1 wiser  staff   1.4K Oct 16 11:06 phoenix.gen.channel.ex -rw-r--r--  1 wiser  staff   4.6K Oct 16 11:06 phoenix.gen.html.ex -rw-r--r--  1 wiser  staff   2.9K Oct 16 11:06 phoenix.gen.json.ex -rw-r--r--  1 wiser  staff   6.3K Oct 16 11:06 phoenix.gen.model.ex -rw-r--r--  1 wiser  staff   707B Oct 16 11:06 phoenix.gen.secret.ex -rw-r--r--  1 wiser  staff   1.1K Oct 16 11:06 phoenix.routes.ex -rw-r--r--  1 wiser  staff   829B Oct 16 11:06 phoenix.server.ex   Looks like I\u2019m in the right place! A lot of the tasks of the Phoenix framework are defined here. But if you look closer, you would notice the phoenix.new task, the one I\u2019m looking for, is missing here. So this is actually NOT the right place unfortunately. But it has to be defined somewhere in the project, so how about search for Mix.Tasks:   phoenix_source git:(master) ag --elixir -l "Mix.Tasks" installer/lib/phoenix_new.ex lib/mix/tasks/phoenix.digest.ex lib/mix/tasks/phoenix.gen.channel.ex lib/mix/tasks/phoenix.gen.json.ex lib/mix/tasks/compile.phoenix.ex lib/mix/tasks/phoenix.gen.secret.ex lib/mix/tasks/phoenix.gen.html.ex lib/mix/tasks/phoenix.routes.ex lib/mix/tasks/phoenix.gen.model.ex installer/test/phoenix_new_test.exs lib/mix/tasks/phoenix.server.ex test/mix/tasks/phoenix.digest_test.exs test/mix/tasks/phoenix.gen.channel_test.exs test/mix/tasks/phoenix.routes_test.exs test/mix/tasks/phoenix.gen.secret_test.exs test/mix/tasks/phoenix.new_test.exs test/mix/tasks/phoenix.gen.model_test.exs test/mix/tasks/phoenix.gen.json_test.exs test/phoenix/code_reloader_test.exs test/mix/tasks/phoenix.gen.html_test.exs   I can safely ignore the occurrences in lib and in tests, which leaves only installer/lib/phoenix_new.ex.   defmodule Mix.Tasks.Phoenix.New do   use Mix.Task   ... end   This time I\u2019ve found the definition for the phoenix.new task. The code is pretty complicated for a beginner, but I just want to the origin of the web/static/css/app.css file in a new Phoenix app and there is only one occurrence of the file path web/static/css/app.css:   @brunch [     {:text, "static/brunch/.gitignore",       ".gitignore"},     {:eex,  "static/brunch/brunch-config.js", "brunch-config.js"},     {:text, "static/brunch/package.json",     "package.json"},     {:text, "static/app.css",                 "web/static/css/app.css"},     {:eex,  "static/brunch/app.js",           "web/static/js/app.js"},     {:eex,  "static/brunch/socket.js",        "web/static/js/socket.js"},     {:text, "static/robots.txt",              "web/static/assets/robots.txt"},   ]   So this means the original file is named app.css in directory static. Since there isn\u2019t a static directory directly under installer:   phoenix_source git:(master) ll installer total 16 -rw-r--r--  1 wiser  staff   184B Oct 16 11:06 README.md drwxr-xr-x  3 wiser  staff   102B Oct 17 08:28 _build drwxr-xr-x  3 wiser  staff   102B Oct 16 11:06 lib -rw-r--r--  1 wiser  staff   303B Oct 16 11:06 mix.exs drwxr-xr-x  5 wiser  staff   170B Oct 16 11:06 templates drwxr-xr-x  5 wiser  staff   170B Oct 16 11:06 test   let\u2019s just search for the file name:   phoenix_source git:(master) cd installer installer git:(master) find . -name "app.css" ./templates/static/app.css   Since there is only one hit, it must be the original file I\u2019m looking for. I can easily confirm that by comparing this file and the web/static/css/app.css file in a new Phoenix app.   Actually editing the file is really simple: just delete the older version of Bootstrap in installer/templates/static/app.css and paste in the latest version of Bootstrap. And of course make sure the tests still pass and verify the home page of a new Phoenix app still looks the same as before.   Verification   You can run the tests by mix test in root directory of Phoenix source code, which is pretty simple. But for verifying the home page after my updates, I need to briefly review how Phoenix was installed. As of today, the latest version of Phoenix is 1.0.3 and according to the Installation Guide, it can be installed by running:   mix archive.install https://github.com/phoenixframework/phoenix/releases/download/v1.0.3/phoenix_new-1.0.3.ez   After installing Phoenix, a new mix task phoenix.new would be available in any directory on your system, but other mix tasks provided by Phoenix like phoenix.gen.html or phoenix.routes wouldn\u2019t be available until a Phoenix application is generated and they are only available in the root directory of that application. That means the ez archive you installed is only responsible for bootstrapping a new Phoenix application, namely providing a new command for generating it, as well as providing all the static assets and configuration files required. But the Phoenix framework itself is not included in the archive and is only added as a dependency in the mix.exs file of a newly generated application. So I can guess by now, the installer archive is built from the code in installer directory. Let\u2019s confirm that by looking at the mix.exs file in installer directory:   defmodule Phoenix.New.Mixfile do   use Mix.Project    def project do     [app: :phoenix_new,      version: "1.0.3",      elixir: "~&gt; 1.0-dev"]   end    ... end   As we can see the project name is phoenix_new and version is 1.0.3, which exactly match the file name of the installer archive phoenix_new.1.0.3.ez. Let\u2019s try to build this archive with my updates:   installer git:(master) mix archive.build Generated archive "phoenix_new-1.0.3.ez" with MIX_ENV=dev installer git:(master) ll total 312 -rw-r--r--  1 wiser  staff   184B Oct 16 11:06 README.md drwxr-xr-x  3 wiser  staff   102B Oct 19 21:52 _build drwxr-xr-x  3 wiser  staff   102B Oct 16 11:06 lib -rw-r--r--  1 wiser  staff   303B Oct 16 11:06 mix.exs -rw-r--r--  1 wiser  staff   144K Oct 19 21:52 phoenix_new-1.0.3.ez drwxr-xr-x  5 wiser  staff   170B Oct 16 11:06 templates drwxr-xr-x  5 wiser  staff   170B Oct 16 11:06 test   As expected, the installer archive is built like this, so my guess was confirmed.   According to the documentation of Mix.Tasks.Archive, archives are by default installed at ~/.mix/archives, and that\u2019s why mix tasks from the installed archives are available system wide. We can list the archives currently installed by:   ~  mix archive * hex-0.9.0.ez * phoenix_new-1.0.3.ez Archives installed at: /Users/wiser/.mix/archives   Let\u2019s install this newly built archive:   installer git:(master) \u2717 mix archive.uninstall phoenix_new-1.0.3.ez installer git:(master) \u2717 mix archive.install Found existing archive(s): phoenix_new-1.0.3.ez. Are you sure you want to replace them? [Yn] * creating /Users/wiser/.mix/archives/phoenix_new-1.0.3.ez   Note that I uninstalled the existing \u201cstandard\u201d installer archive before installing the one I just built. Then generate a new Phoenix application and get it running:   elixir mix phoenix.new sample cd sample sample mix deps.get sample mix phoenix.server   Let\u2019s first check the version of web/static/css/app.css in this new application:   /*!  * Bootstrap v3.3.5 (http://getbootstrap.com)  * Copyright 2011-2015 Twitter, Inc.  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)  */ ...   So Bootstrap is updated as expected. Only need to verify that everything still looks normal. I kept a new application generated by the standard installer and compare with the sample application I just generated with my new archive. And they look exactly the same.   Now everything is good. Commit the changes, push to my fork of the Phoenix framework, and create a pull request. :tada:   Retrospect   This was a very small change, but along the whole process, I\u2019ve gained so much more understanding about how Phoenix and Mix works. I now know:      how to define a mix task   Phoenix is divided into two parts: the installer and the rest   How to work with archives, namely list, build, install and uninstall   I belief this new knowledge will be helpful for using Phoenix as well as for making more contributions to it.   ',categories:[],tags:["phoenix","elixir","mix","bootstrap"],url:"https://www.wiserfirst.com/blog/making-first-contribution-to-phoenix-framework/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-20/phoenix_1280_430.jpg"},{title:"How to Increase MySQL Table Size for Memory Storage Engine",excerpt:"Today while trying to test a database related behavior in CakePHP, I created a fixture which imports the 16k records from a existing table. After a painful long wait, MySQL gave a table full error.   So I\u2019ve got a problem to solve. Connect to the test database, check the table size, which is 16M; but in development database, with InnoDB engine, that table is just 1.5M. Then I noticed the storage engine of the test db was Memory. After some Googling, I found the relevant section The MEMORY Storage Engine in MySQL documentation.      The maximum size of MEMORY tables is limited by the max_heap_table_size system variable, which has a default value of 16MB.    That makes a lot of sense. This option doesn\u2019t yet exist in my /etc/mysql/my.cnf. Let\u2019s add it to the bottom of the configuration file (I\u2019ve made a mistake without realising it):   max_heap_table_size=128M   Restart MySQL server by running:   sudo service mysql restart   And then try again, and \u2026 still doesn\u2019t work. Go back to MySQL documentation and look again at the section for option max_heap_table_size:      This variable is also used in conjunction with tmp_table_size to limit the size of internal in-memory tables.    OK, let\u2019s add this option as well:   tmp_table_size=128M   And restart MySQL and try again, and \u2026 it still doesn\u2019t work. After some more Googling, I found this answer on StackOverflow, which says      Add this to /etc/my.cnf     [mysqld] tmp_table_size=2G max_heap_table_size=2G       this will cover mysql restarts.    OK. So I\u2019ve added the correct options, but to the wrong location. Those options must be added under the [mysqld] section in the configuration file. After moving them to the correct section in /etc/mysql/my.cnf and restarting MySQL server, my new test finally works as expected (but still very slow).   Retrospect   I realised a few things, after spending an hour tackling this issue:      Setting up test fixture with existing records may not be the best way to do it.   CakePHP uses memory storage engine for its test database on MySQL.   The memory storage engine probably doesn\u2019t have compression as InnoDB does, since it consumes a lot more space for the same table.   In MySQL configuration file, different sections control different parts of MySQL, which is why adding the options to the bottom wouldn\u2019t work.   ",categories:[],tags:["mysql","CakePHP","InnoDB"],url:"https://www.wiserfirst.com/blog/increase-mysql-table-size-for-memory-storage-engine/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-19/data_center_1440_400.jpg"},{title:"Learning How to Learn, Part 1",excerpt:"Last week, I discovered a wonderful course, Learning How to Learn, from UC San Diego on Coursera. This course was taught by two prestigious scientists in neuroscience, Barbara Oakley and Terrence Sejnowski. After following the material from the first week, I feel the urge to take some notes of my own understanding.   What is learning   As far as our brains are concerned, learning something new means forming new neural pathways in the brain. The newly formed pathways are not strong, which is why we tend to forget new stuff more easily, but they can be strengthened by repeated practice of the new stuff we\u2019ve learnt. Instead of intensive practice in one day, the best outcome could be achieved by arranging the practice sessions according to \u201cspaced repetition\u201d. For example, let\u2019s say you are trying to remember a few new words from a foreign language that you are learning, you\u2019ll get much stronger long term memory of the words if you study them 15 minutes on Monday, Tuesday, Wednesday, Friday and Sunday, rather than spend two hours studying them in one day.   Focused and Diffused modes   Our brains can operate in two different modes: focused mode and diffused mode. They are like the two sides of the same coin: one\u2019s brain can either be in focused mode or diffused mode, but not in both. In focused mode, your frontal lobe cortex (the conscience self) is at work, and the neural signals mainly travel in existing pathways. For example, when a second grade student is working on elementary math problems, he/she is consciously using methods he/she already know to solve the problems. In diffused mode, for instance when your mind is wandering or you\u2019re dreaming, the conscious self is not in control, so the neural signals travel more freely and widely. This mode helps the brain connects \u201cunrelated\u201d concepts together and forms new ideas or understanding.   Multitasking   It was believed human brain can hold up to seven items at one time, but recent researches have shown the number may be just four. Therefore, human brains are intrinsically not good at multitasking. Try not to work on two tasks at once. You\u2019ll very like to fail at both tasks. In the interview, Dr. Sejnowski talked about his own multitasking. But what he meant was just quick context switching between multiple tasks, instead of actually doing two or more things at the same time.   Sleeping   The brain generate toxic products while you are awake. During sleep, the neurons will shrink, unblocking the stream, so that the metabolic toxins in the brain can be washed out by flowing fluid. Sleep is the brain\u2019s way of keeping itself clean and healthy. Furthermore, the brain operates in diffused mode while you are sleeping, and rehearses what you have learnt during the day or before sleeping, which helps to deepen and strengthen the new neural pathways formed during focused mode studies earlier.   Neuron production   All the textbooks say that you get all your neurons at birth. When you grow up, new neural connections are made, but no new neurons are generated in the brain. The neurons may die, which means you have a shrinking cortex. But Rusty Gage discovered new neurons are born in the Hippocampus of an adult brain. The conditions being: a) an enriched environment, where you can communicate with other people and actively participate in events; or b) physical exercise. Exercises not only help make the body stronger, but also help the Hippocampus to give birth to new neurons and provide time for the brain to operate in diffused mode, which in turn benefits your learning.   ",categories:[],tags:["learning"],url:"https://www.wiserfirst.com/blog/learning-how-to-learn-part1/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-19/library_1440_400.jpg"},{title:"2015\u5e74\u4e2a\u4eba\u603b\u7ed3",excerpt:"2015\u5e74\u9759\u6084\u6084\u7684\u8fc7\u53bb\u4e86\uff0c\u6211\u4e5f\u6765\u603b\u7ed3\u4e00\u4e0b\u8fd9\u4e00\u5e74\u7684\u7ecf\u5386\uff0c\u6216\u8bb8\u4e5f\u6709\u4e00\u70b9\u6210\u957f\u3002\u8fd9\u5e74\u662f\u6211\u4ece\u56fd\u5185\u6765\u6089\u5c3c\u7684\u7b2c\u4e8c\u5e74\u4e86\uff0c\u5bf9\u8fd9\u91cc\u8d8a\u6765\u8d8a\u4e60\u60ef\u4e86\uff0c\u751f\u6d3b\u548c\u5de5\u4f5c\u4e5f\u9010\u6e10\u7a33\u5b9a\u4e0b\u6765\u3002   \u5b66\u4e60\u548c\u6210\u957f\u65b9\u9762\uff0c\u4eca\u5e74\u91cd\u70b9\u5b66\u4e60\u4e86\u7b97\u6cd5\u3001Rails\u8fd8\u6709\u5165\u95e8\u4e86\u51e0\u79cd\u51fd\u6570\u5f0f\u8bed\u8a00\u6bd4\u5982Haskell/Elixir/Elm\u3002\u5e74\u521d\u53c2\u52a0\u4e86\u4e00\u4e2a\u5b66\u4e60\u5c0f\u7ec4\u4e00\u8d77\u5b66\u4e86Coursera\u4e0a\u7684Algorithms Part I\u548cPart II\u8bfe\u7a0b\u3002\u8fd9\u4e2a\u8bfe\u7a0b\u7684\u4f5c\u4e1a\u8981\u6c42\u7528Java\uff0c\u4e8e\u662f\u5199\u4e86\u597d\u51e0\u4e2a\u4e0d\u5927\u4e0d\u5c0f\u7684Java\u7a0b\u5e8f\uff1b\u5728\u6b64\u8fc7\u7a0b\u4e2d\u4e5f\u9886\u6559\u4e86Java\u7684\u5197\u7e41\uff08\u8fd8\u6ca1\u5c1d\u5230\u4f20\u95fb\u4e2dLibrary\u4e30\u5bcc\u7684\u751c\u5934\uff09\u3002\u8bfe\u7a0b\u7ed3\u675f\u7684\u65f6\u5019\u5df2\u7ecf\u662f\u516d\u6708\u4efd\u4e86\uff0c\u56de\u8fc7\u5934\u6765\u628a\u4e4b\u524d\u5b66\u4e86\u5927\u534aRails Tutorial\u6361\u8d77\u6765\uff0c\u4f46\u65f6\u95f4\u9694\u5f97\u4e45\u4e86\u5f88\u591a\u4e1c\u897f\u53c8\u5fd8\u4e86\uff0c\u6240\u4ee5\u8fdb\u5c55\u7f13\u6162\u3002\u4e00\u90e8\u5206\u539f\u56e0\u4e5f\u662f\u4e2d\u95f4\u8fd8\u62bd\u65f6\u95f4\u770bDave Thomas\u7684Programming Elxir\uff1b\u8fd8\u6709\u5b66\u4e60Phoenix\u6846\u67b6\uff0c\u8fc7\u7a0b\u4e2d\u8fd8\u7ed9Phoenix Guides\u8d21\u732e\u4e86\u51e0\u4e2acommit\u3002\u8fb9\u5b66\u7528Phoenix\u7ed9\u516c\u53f8\u7f51\u7ad9\u505a\u4e86\u4e2a\u9996\u9875\uff0c\u8fd8\u7ed9Phoenix\u548cElixir\u5404\u8d21\u732e\u4e86\u4e00\u4e2a\u5f88\u5c0f\u7684commit\u3002\u5de7\u7684\u662f\u8fd9\u4e24\u4e2aPull Request\u5c45\u7136\u662f\u540c\u4e00\u5929\u4e4b\u5185\u88ab\u5408\u5e76\u7684\u3002\u7531\u4e8e\u4e5f\u5f00\u59cb\u53c2\u52a0Ruby on Rails Development Hub\uff0c\u8ba4\u8bc6\u4e86\u4e00\u4e9b\u505aRails\u7684\u670b\u53cb\uff1b\u548c\u4ed6\u4eec\u804a\u8fc7\u5de5\u4f5c\u524d\u666f\u4e4b\u540e\uff0c\u51b3\u5fc3\u8fd8\u662f\u5148\u628aRails\u5b66\u8d77\u6765\uff0c\u5c3d\u7ba1\u76ee\u524d\u770b\u5b83\u5df2\u7ecf\u662f\u8d70\u4e0b\u5761\u8def\u4e86\u3002\u6597\u5fd7\u7115\u53d1\u540e\u5f88\u5feb\u628aRails Tutorial\u6536\u5c3e\u4e86\u3002\u63a5\u7740\u53c8\u53d1\u73b0Edx\u4e0a\u6709\u4e2a\u8bfe\u7a0bIntroduction to Functional Programming (FP101x)\uff0c\u548c\u5b66\u4e60\u5c0f\u7ec4\u7684Casper\uff08\u8fd9\u54e5\u4eec\u5728Atlassian\uff0c\u6700\u8fd1\u516c\u53f8\u4e0a\u5e02\u4e86\uff0c\u606d\u559c\u4ed6\uff09\u4ea4\u6d41\u4e4b\u540e\u51b3\u5b9a\u8d81\u6b64\u673a\u4f1a\u5b66\u4e00\u4e0bHaskell\u3002\u7ed3\u679c\u516b\u5468\u7684\u8bfe\u7a0b\u8fc7\u540e\u5c3d\u7ba1\u6210\u7ee9\u4e0a\u770b\u8fd8\u4e0d\u9519\uff0893%\uff09\uff0c\u5bf9Haskell\u4e5f\u5c31\u662f\u521a\u521a\u5165\u95e8\uff0c\u5f88\u591a\u57fa\u7840\u6982\u5ff5\u90fd\u8fd8\u6ca1\u6709\u641e\u6e05\u695a\u3002\u4e2d\u95f4\u8fd8\u62bd\u7a7a\u4e0a\u4e86Coursera\u7684\u53e6\u5916\u4e00\u4e2a\u8bfe\u7a0bLearning How to Learn\u3002\u5bf9\u8fd9\u4e2a\u8bfe\u7a0b\u6211\u8868\u793a\u5f3a\u70c8\u63a8\u8350\uff0c\u800c\u4e14\u662f\u7537\u5973\u8001\u5c11\u7686\u5b9c\u3002\u56e0\u4e3a\u6211\u8ba4\u4e3a\u4e0d\u7ba1\u5904\u5728\u4eba\u751f\u7684\u54ea\u4e2a\u9636\u6bb5\uff0c\u4eba\u603b\u662f\u9700\u8981\u5b66\u4e60\u7684\u2014\u2014\u5f53\u7136\u5177\u4f53\u5b66\u7684\u5185\u5bb9\u4f1a\u6709\u5f88\u5927\u4e0d\u540c\u2014\u2014\u5b66\u4f1a\u66f4\u52a0\u6709\u6548\u7684\u5b66\u4e60\u603b\u662f\u6709\u79ef\u6781\u4f5c\u7528\u7684\u3002\u6b64\u8bfe\u7a0b\u5728\u5927\u8111\u5de5\u4f5c\u539f\u7406\u7684\u5c42\u9762\u4ecb\u7ecd\u4e86\u5b66\u4e60\u662f\u4ec0\u4e48\u3001\u8bb0\u5fc6\u5982\u4f55\u5f62\u6210\u3001\u7761\u7720\u548c\u953b\u70bc\u7684\u4f5c\u7528\u7b49\u5f88\u591a\u975e\u5e38\u91cd\u8981\u7684\u77e5\u8bc6\uff0c\u80fd\u591f\u5e2e\u6211\u4eec\u5728\u5b66\u4e60\u7684\u8def\u4e0a\u5c11\u8d70\u4e00\u4e9b\u5f2f\u8def\uff0c\u7834\u9664\u4e00\u4e9b\u9519\u8bef\u7684\u89c2\u5ff5\u3002FP101x\u7ed3\u675f\u4e4b\u540e\u5df2\u7ecf\u4e34\u8fd1\u5e74\u5e95\u4e86\uff0c\u4e0d\u8fc7\u8fd8\u662f\u62bd\u65f6\u95f4\u5b8c\u6210\u4e86Upcase\u4e0a\u7684Test-Driven Rails\uff0c\u5927\u6982\u7406\u89e3\u4e86TDD\u5728\u5199Rails\u7684\u65f6\u5019\u662f\u600e\u4e48\u73a9\u7684\u3002   \u5de5\u4f5c\u65b9\u9762\u6709\u4e24\u4e2a\u75db\u70b9\uff1a\u4e00\u662f\u516c\u53f8IT\u53ea\u6709\u6211\u4e00\u4e2a\u4eba\uff0c\u6742\u4e8b\u592a\u591a\u7ecf\u5e38\u6253\u65ad\u5f00\u53d1\u7684\u8282\u594f\uff1b\u4e8c\u662f\u516c\u53f8\u7684\u9057\u7559\u7cfb\u7edf\u5b9e\u5728\u5751\u592a\u591a\uff0c\u4e00\u5e74\u591a\u8fd8\u662f\u5f88\u591a\u586b\u4e0d\u5e73\uff0c\u52a0\u4e0a\u9700\u6c42\u53d8\u5316\u53c8\u4f1a\u6709\u65b0\u5751\u3002\u7b2c\u4e00\u70b9\u9650\u4e8e\u73af\u5883\u6211\u6ca1\u6709\u592a\u591a\u89e3\u51b3\u7684\u529e\u6cd5\uff0c\u552f\u4e00\u4e00\u70b9\u6539\u8fdb\u662f\u628a\u6709\u53ef\u80fd\u7528\u7a0b\u5e8f\u5e2e\u52a9\u81ea\u52a8\u5316\u7684\u4efb\u52a1\u5c3d\u91cf\u591a\u81ea\u52a8\u5316\u3002\u7b2c\u4e8c\u70b9\uff0c\u9996\u5148\u6709\u53ef\u80fd\u7684\u65f6\u5019\u5728\u6539\u4ee3\u7801\u7684\u540c\u65f6\uff0c\u662f\u7ed9CakePHP\u5199\u7684\u4ee3\u7801\u589e\u52a0\u5355\u5143\u6d4b\u8bd5\uff0c\u76ee\u524d\u6709\u4e86\u51e0\u5341\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002\u5176\u6b21\u6211\u5728\u5c1d\u8bd5\u628a\u7cfb\u7edf\u7528\u5176\u4ed6\u66f4\u597d\u7684\u6846\u67b6\u91cd\u5199\u3002\u5f00\u59cb\u6253\u7b97\u7528Phoenix\uff0c\u5199\u4e86\u4e2a\u9996\u9875\u4e4b\u540e\u89c9\u5f97Elixir\u867d\u7136\u98ce\u5934\u6b63\u52b2\uff0c\u4e0d\u8fc7\u6bd5\u7adf\u592a\u65b0\uff0c\u5f88\u591a\u529f\u80fd\u7684\u5e93\u53ef\u80fd\u8fd8\u6ca1\u6709\u3002\u6240\u4ee5\u8fd8\u662f\u51b3\u5b9a\u4fdd\u5b88\u4e00\u70b9\u9009\u7528Rails\uff0c\u8ba1\u5212\u662f\u5148\u7528Rails\u5b9e\u73b0API\uff0c\u7136\u540e\u5728\u524d\u7aef\u5f15\u5165\u67d0\u4e2ajs\u6846\u67b6\uff0c\u9010\u6b65\u6539\u5199\u5404\u4e2a\u9875\u9762\u3002\u8fd9\u6837\u5b50\u53ef\u4ee5\u907f\u514d\u6574\u4e2a\u7cfb\u7edf\u6574\u4f53\u5207\u6362\uff0c\u8fc7\u5ea6\u4f1a\u5e73\u6ed1\u5f88\u591a\uff0c\u6700\u5927\u9650\u5ea6\u7684\u964d\u4f4e\u98ce\u9669\u3002\u7f3a\u70b9\u5c31\u662f\u8fc7\u7a0b\u4f1a\u66f4\u957f\u5e76\u4e14\u9ebb\u70e6\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b65\u6539\u52a8\u90fd\u8981\u8003\u8651\u517c\u5bb9\u73b0\u6709\u6ca1\u6539\u8fc7\u7684\u90e8\u5206\u3002\u6709\u90e8\u5206\u5f88\u5c0f\u4e00\u90e8\u5206\u529f\u80fd\u5df2\u7ecf\u7528\u8fd9\u79cd\u65b9\u5f0f\u4e0a\u7ebf\u4e86\uff0c\u4e8e\u662f\u6211\u4e5f\u90e8\u7f72\u4e86\u7b2c\u4e00\u4e2a\u751f\u4ea7\u73af\u5883\u7684Rails API\u5e94\u7528\uff1b\u76ee\u524djs\u6846\u67b6\u7528\u7684\u662fvuejs\uff0c\u611f\u89c9\u8fd8\u662f\u6709\u70b9\u9ebb\u70e6\uff0c\u5f53\u7136\u4e5f\u5f88\u53ef\u80fd\u662f\u6211\u81ea\u5df1\u7528\u7684\u59ff\u52bf\u4e0d\u5bf9\u3002\u7528Rails\u5f00\u53d1API\u7684\u65f6\u5019\uff0c\u4e0d\u60f3\u628aAPI\u548c\u4e3b\u7ad9\u653e\u5230\u540c\u4e00\u4e2a\u57df\u540d\u4e0b\uff0c\u4e8e\u662f\u7814\u7a76\u4e86\u8de8\u6e90\u8d44\u6e90\u5171\u4eab\uff08Cross Origin Resource Sharing\uff09\u5e76\u4e14\u7528\u81ea\u5df1\u5b66\u5230\u7684\u4e1c\u897f\u5728Rorosyd (Ruby on Rails Oceania Sydney)\u505a\u4e86\u4eba\u751f\u7b2c\u4e00\u4e2a\u82f1\u6587\u7684Lighting Talk\u3002\u8fd8\u6709\u4e00\u70b9\u503c\u5f97\u4e00\u63d0\u7684\u662f\u5728\u5723\u8bde\u548c\u5143\u65e6\u5047\u671f\u4e2d\u95f4\u90a3\u51e0\u5929\uff0c\u5f00\u59cb\u7528RSpec+Capybara\u7ed9CakePHP\u505a\u7684\u7cfb\u7edf\u641e\u96c6\u6210\u6d4b\u8bd5\u3002\u603b\u4f53\u6765\u8bb2\u8fdb\u5c55\u6bd4\u8f83\u987a\u5229\uff0c\u800c\u4e14\u6211\u611f\u89c9\u8fd9\u4e9b\u6d4b\u8bd5\u5c06\u662f\u4ee5\u540e\u505a\u5927\u624b\u7b14\u6539\u52a8\u65f6\u7684\u5b89\u5168\u4fdd\u969c\u3002   \u8eab\u4f53\u65b9\u9762\uff0c\u7531\u4e8e\u4ea4\u901a\u4ee5\u5f00\u8f66\u4e3a\u4e3b\u52a0\u4e4b\u953b\u70bc\u5f88\u5c11\uff0c\u4f53\u91cd\u5c61\u521b\u5386\u53f2\u65b0\u9ad8\u3002\u610f\u8bc6\u5230\u8fd9\u4e2a\u95ee\u9898\u4ee5\u540e\uff0c\u9996\u5148\u662f\u6062\u590d\u6bcf\u5468\u6253\u7fbd\u6bdb\u7403\uff0c\u4fdd\u8bc1\u6bcf\u5468\u6709\u4e00\u5b9a\u91cf\u7684\u8fd0\u52a8\u3002\u5230\u73b0\u5728\u6253\u4e86\u8fd120\u6b21\uff0c\u8fd8\u628a\u56fd\u5185\u5e26\u6765\u7684\u62cd\u5b50\u6253\u574f\u4e86\uff0c\u53ea\u597d\u4e70\u4e86\u7b2c\u4e00\u628aYonex\u3002\u56e0\u4e3a\u5728Learning How to Learn\u91cc\u9762\u4e86\u89e3\u4e86\u953b\u70bc\u5bf9\u4e8e\u8eab\u4f53\u4ee5\u53ca\u5b66\u4e60\u548c\u521b\u65b0\u65b9\u9762\u7684\u4f5c\u7528\u4e4b\u540e\uff0c\u5f00\u59cb\u575a\u6301\u6bcf\u5929Seven Minute Workout\uff0c\u5230\u73b0\u5728\u624d\u4e00\u4e2a\u591a\u6708\uff0c\u4e2d\u95f4\u8fd8\u6709\u4e00\u5929\u83ab\u540d\u5176\u5999\u7684\u5fd8\u4e86\u3002\u6bcf\u5929\u953b\u70bc\u7684\u4e60\u60ef\u8981\u52aa\u529b\u575a\u6301\u4e0b\u53bb\uff0c\u6bd5\u7adf\u8eab\u4f53\u624d\u662f\u9769\u547d\u7684\u672c\u94b1\u3002   \u751f\u6d3b\u4e0a\u6700\u5927\u7684\u53d8\u5316\u662f\u7ec8\u4e8e\u4e70\u4e86\u7b2c\u4e00\u5957Unit\uff0c\u5e76\u4e14\u5728\u516b\u6708\u4efd\u642c\u5165\u65b0\u5c45\uff0c\u7b97\u662f\u6709\u4e86\u81ea\u5df1\u7684\u5c0f\u7a9d\u3002\u6700\u8fd1\u8fd8\u60ca\u5947\u7684\u53d1\u73b0\u81ea\u5df1\u5c45\u7136\u5b66\u4f1a\u4e86\u548c\u9762\u4ee5\u53ca\u70d9\u997c\uff0c\u800c\u4e14\u70d9\u7684\u8471\u6cb9\u997c\u88ab\u513f\u5b50\u8ba4\u4e3a\u662f\u201c\u4e16\u754c\u4e0a\u6700\u597d\u5403\u7684\u997c\u201d\uff0c\u6bcf\u6b21\u90fd\u5403\u4e0d\u5c11\u3002\u5ba2\u89c2\u7684\u8bf4\uff0c\u4e16\u754c\u6700\u597d\u5403\u80af\u5b9a\u8c08\u4e0d\u4e0a\uff0c\u4e0d\u8fc7\u5bb6\u4eba\u548c\u6211\u81ea\u5df1\u90fd\u89c9\u5f97\u5473\u9053\u8fd8\u4e0d\u9519\u4e5f\u5c31\u591f\u4e86\u3002\u6211\u5176\u5b9e\u5f88\u5c11\u505a\u996d\uff0c\u548c\u9762\u8fd9\u79cd\u4e8b\u60c5\u5bf9\u6211\u800c\u8a00\u4e00\u76f4\u662f\u590d\u6742\u5230\u4ece\u6ca1\u60f3\u8fc7\u8981\u5c1d\u8bd5\uff1b\u73b0\u5728\u6ca1\u6709\u975e\u592a\u591a\u529f\u592b\u5c31\u5b66\u4f1a\u4e86\uff0c\u771f\u662f\u6709\u70b9\u610f\u5916\u3002   \u603b\u7ed3\u4e00\u4e0b\uff0c\u81ea\u5df1\u597d\u7684\u65b9\u9762\u662f\u73b0\u5728\u8d8a\u6765\u8d8a\u6562\u4e8e\u5c1d\u8bd5\u4e86\uff0c\u4ece\u7f16\u7a0b\u8bed\u8a00\u3001\u6846\u67b6\u7b49\u6280\u672f\u7684\u5b66\u4e60\uff0c\u5230\u7b2c\u4e00\u6b21\u505a\u6280\u672f\u5206\u4eab\uff0c\u518d\u5230\u8bd5\u7740\u81ea\u5df1\u505a\u5404\u79cd\u597d\u5403\u7684\u3002\u5404\u79cd\u5c1d\u8bd5\u7684\u7ed3\u679c\u4e0d\u80fd\u8bf4\u90fd\u5f88\u6210\u529f\uff0c\u4e0d\u8fc7\u786e\u5b9e\u90fd\u6709\u4e0d\u5c11\u6536\u83b7\u3002\u5c1d\u8bd5\u6c38\u8fdc\u662f\u505a\u597d\u6216\u8005\u6210\u529f\u7684\u7b2c\u4e00\u6b65\uff0c\u81ea\u5df1\u5c1d\u8bd5\u53bb\u505a\u5c31\u4f1a\u53d1\u73b0\u6709\u4e9b\u4e1c\u897f\u8fdc\u6ca1\u6709\u60f3\u8c61\u7684\u90a3\u4e48\u590d\u6742\uff1b\u6709\u4e9b\u4e1c\u897f\u521d\u5b66\u8d77\u6765\u786e\u5b9e\u5f88\u590d\u6742\uff0c\u4e0d\u8fc7\u591a\u82b1\u70b9\u529f\u592b\u5f80\u5f80\u4e5f\u662f\u80fd\u641e\u5b9a\u7684\u3002\u4e0d\u597d\u7684\u65b9\u9762\u662f\u8ba1\u5212\u8fd8\u505a\u7684\u4e0d\u597d\uff0c\u6280\u672f\u5b66\u4e60\u4e0a\u592a\u6cdb\u800c\u4e0d\u591f\u6df1\u5165\u3002\u65b0\u7684\u4e00\u5e74\u91cc\u8981\u66f4\u597d\u7684\u505a\u8ba1\u5212\uff0c\u5408\u7406\u5229\u7528\u6709\u9650\u7684\u65f6\u95f4\uff0c\u7ee7\u7eed\u52a0\u6df1\u5bf9Rails\u7684\u4e86\u89e3\uff1b\u51fd\u6570\u5f0f\u7f16\u7a0b\u65b9\u9762\u4e5f\u60f3\u518d\u8fdb\u4e00\u6b65\uff1b\u53e6\u5916\u5c31\u662f\u524d\u7aef\u6253\u7b97\u5c1d\u8bd5\u4e00\u4e0b\u76ee\u524d\u6700\u706b\u7684ReactJS\u3002  ",categories:[],tags:["Chinese","year-summary"],url:"https://www.wiserfirst.com/blog/2015-summary/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-19/taktsang_trail_1440_400.jpg"},{title:"Elixir's quote and unquote",excerpt:"For a very long time, I had a hard time trying to understand how macros work in Elixir. Since I don\u2019t have any Lisp background, that\u2019s a whole new concept for me.   But yesterday, after reading the relevant section in Elixir\u2019s getting started guild, I suddenly realised how quote and unquote work. First of all, an Elixir expression is internally represented as a tuple with three elements, which is Elixir\u2019s version of the Abstract Syntax Tree (AST). quote can give you the AST representation of a piece of code, so that you can manipulate later. unquote only works inside quote and it can evaluate an expression and then inject the resulting value into the AST. quote and unquote are probably the most important building blocks of macros in Elixir.   ",categories:[],tags:["elixir","macro","tiny-tips"],url:"https://www.wiserfirst.com/blog/elixirs-quote-and-unquote/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-19/sunlight_1440_400.jpg"},{title:"Restore Gem to Original State after Bundle Open",excerpt:"When trying to understand how a gem works,   bundle open [gem]   can be a very useful command. But after finished debugging, logging and etc., it would be awesome to be able to restore the gem you\u2019ve messed with to its original state. Thankfully there is a command for exactly that:   bundle exec gem pristine [gem]   Reference: https://github.com/bundler/bundler-features/issues/5  ",categories:[],tags:["ruby","bundle","gem","tiny-tips"],url:"https://www.wiserfirst.com/blog/restore-gem-to-original-state-after-bundle-open/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-19/gemstone_1440_420.jpg"},{title:"Remap Caps Lock to ESC on macOS",excerpt:"As a Vim user, I always want to remap Caps Lock to ESC on my Mac computers. In the past, this required a third party app named Seil and more info in this StackOverflow question. But as another answer for the same question pointed out, since macOS Sierra (10.12), this can be done natively in System Preferences -&gt; Keyboard -&gt; Modifier Keys:      ",categories:[],tags:["macos","tiny-tips"],url:"https://www.wiserfirst.com/blog/remap-caps-lock-to-esc-on-macos/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-19/macbook_keyboard_1440_400.jpg"},{title:"Make a Shell Command Always Succeed",
excerpt:"In bash and many other shells, zero is called successful exit status code, whereas any non-zero codes are failure exit codes. That is to say when a command returns exit code of zero, it\u2019s considered successful; otherwise, it\u2019s considered a failure.   In some situations, one want to make sure a command always return zero, ignoring potential failures. This can be done with the true command:   random_thing || true   The most recent example is in our CI, there is a step to upload code coverage report to codecov.io, but unfortunately their site has been flaky over the past couple weeks, which might cause otherwise successful builds to fail. In this case, we try to upload code coverage report, but if it fails for whatever reason, it\u2019s okay to ignore. So the true command to the rescue:   ./.codecov || true   where .codecov is the script for uploading the report.  ",categories:[],tags:["linux","bash","tiny-tips"],url:"https://www.wiserfirst.com/blog/make-a-shell-command-always-succeed/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-19/golden_hour_1440_400.jpg"},{title:"Better Tooling for Development with Elixir",excerpt:'We \u2764\ufe0f Elixir, so we want to the development process as smooth as possible. Fortunately there are various tools that can help with the following:      keep the code nicely formatted   keep the code in a consistent style   automate those two and more   In this article, I\u2019ll cover how we used these tools to improve our local development setup and hopefully you could find a thing or two that are useful for you too.   Format Elixir code   In Elixir 1.6, a very nice code formatter has been provided, which could format your code automatically without changing the semantics. So it helps a great deal in keeping the code style consistent across the whole codebase or even multiple codebases.   Without any setup, you can run mix format file1 file2 ... to format a few individual Elixir source files. Or if you want to format all files in a repo with one single command, you could provide a .formatter.exs file with a list of file paths and patterns under the inputs key. For example:   [   inputs: [     "{mix,.formatter}.exs",     "config/*.exs",     "apps/**/*.{ex,exs}"   ] ]   will capture all Elixir files in a typical umbrella project. As you can see, wildcards are supported in the file patterns and they are expanded with Path.wildcard/2. Please refer to mix format documentation for more details.   Check format with Git pre-commit hook   The only problem is that if people need to run it manually, they tend to forget from time to time. As many of us have experienced, pointing out style violations in code reviews is usually not the most enjoyable thing to do. We want to make sure that all our Elixir code is nicely formatted before it is committed to Git and this is exactly what pre-commit hook can help us with.   The easies way to do this is by adding a file named pre-commit under .git/hooks with content similar to the following:   #!/bin/bash  cd `git rev-parse --show-toplevel` mix format --check-formatted if [ $? == 1 ]; then    echo "commit failed due to format issues..."    exit 1 fi   Then when you try to commit new changes in command line, format will be checked and if there is any Elixir file that has not been properly formatted, the commit attempt will fail with an error message. So far so good.   Auto-format in your editor   To make one\u2019s life even easier, there are editor plugins to automatically run the formatter upon saving:   Vim https://github.com/mhinz/vim-mix-format   VsCode https://github.com/jakesorce/vscode-elixir-formatter   Atom https://github.com/rgreenjr/atom-elixir-formatter   If you use other editors, very likely there is an existing plugin/extension for formatting Elixir code too and Google is your friend.   Leverage mix aliases   mix aliases can be very useful in running the same group of tasks over and over again. For example, in the top level mix.exs file, we have the following aliases defined:   defmodule OurProject.Mixfile do   use Mix.Project    def project do     [       .       .       deps: deps(),       aliases: aliases()     ]   end    defp deps do     [       .       .       {:credo, "~&gt; 1.0.0", only: [:dev, :test], runtime: false}     ]   end    defp aliases do     [       "ecto.setup": ["ecto.create", "ecto.migrate"],       "ecto.reset": ["ecto.drop", "ecto.setup"],       test: ["compile --warnings-as-errors", "ecto.reset", "test", "credo -a --strict"]     ]   end end   So with just mix test we are actually running the following:   mix compile --warnings-as-errors mix ecto.drop mix ecto.create mix ecto.migrate mix test mix credo -a --strict   all in test env. Only caveat of setting aliases like this is that any test file paths with optional line number passed in as command line arguments are ignored and I haven\u2019t quite figured out how to get around that. Another thing worth noting is the last step, namely mix credo -a --strict, will use credo to run static code analysis and thus keep the style consistent.   Of course you could setup different aliases to suit your needs.   Run test suite with pre-push hook   Since the pre-commit hook worked really well for us and also we would like to avoid CI failures due to typos or other minor issues, running the test suite with a git hook seems a reasonable next step. Although our entire test suite only takes around two minutes to run, it\u2019s still a bit too much delay for committing any changes. But it feels legit to run the test suite before pushing to Github, thus preventing almost all failures on CI.   This can be done by creating a file named pre-push with the following content under .git/hooks in your repo:   #!/bin/bash  set -euxo pipefail  cd `git rev-parse --show-toplevel` mix clean mix format --check-formatted mix test   If you are curious about what does set -euxo pipefile do, explainshell.com might be helpful.   Of course there are cases where one might want to push potentially failing code to a remote branch. That can be done with the --no-verify option:   git push origin your-remote-branch --no-verify   Make hooks work for GUI Git clients   If you, like me, also use GUI Git clients like SourceTree to add commits, you\u2019ll notice that the formatting check is skipped. As Sindre Sorhus pointed out in this StackOverflow answer, this is due to:      GUI apps on OS X doesn\u2019t load the stuff in .bashrc/.bash_profile, which means they won\u2019t have user specified $PATH additions like /usr/local/bin, which is where the grunt binary is. You can either specify the full path or fix the $PATH in your pre-commit hook, by adding this after the top comments: PATH="/usr/local/bin:$PATH\u201d    Since people might install Elixir differently, the full path for Elixir binaries could be different. So adding the paths in the $PATH environment variable should work better. For example, setting the following in the pre-commit hook   PATH="/Users/$(whoami)/.asdf/shims:/usr/local/bin:$PATH"   should work for Elixir installed either with asdf or homebrew.   Same Git hooks for the team   Up to now, the setup should be reasonably good for one developer, but if you work within a team, the same setup for all team members might be a very good idea. This should help in avoiding most of the only works or only doesn\u2019t work on one particular machine problems. It can be achieved in a number of ways. The simplest way I could think of is by committing the hooks in the repo (for example ./bin/git_hooks) rather than in .git/hooks and then run   git config core.hooksPath ./path/to/your/git_hooks   on each team member\u2019s development machine.   Summary   I\u2019ve introduced the formatter for making sure code is consistently formatted, credo for keeping code in great style, mix aliases for running groups of mix tasks easier and also Git pre-commit and pre-push hooks for running them automatically. While those might not be exactly what you want, hopefully this article can offer some hints on how you could archive your similar needs.   Acknowledgement   Special thanks to Paul Fioravanti for his great feedback to my first draft, which made this article much better.   ',categories:[],tags:["elixir","credo","git_hooks"],url:"https://www.wiserfirst.com/blog/better-tooling-for-development-with-elixir/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-19/elixir_1440_400.jpg"},{title:"Reset Forgotten Hex Local Password",excerpt:"Hex is the package manager for the Erlang ecosystem. When you first install it with mix local.hex and authenticate with your hex.pm account, you are required to create a local password. It\u2019ll be needed when you publish/update a package on hex.pm. Since I had never done that until a few days ago, unsurprisingly my local password was forgotten.   There is a command mix hex.user reset_password local for updating your local password, but it requires you to enter your current local password. So that didn\u2019t help.   After some googling, I found out the local password is stored in ~/.hex/hex.config file. Considering it\u2019s set during hex user authentication (mix hex.user auth), it occurred to me that deleting the config file and re-authenticating with hex.pm account might help. And it actually did! I was able to set a new local password and publish my first hex package, even though it\u2019s pretty much just for demonstration purpose.   Interested to learn more about hex? You might find Become a Hex Power User by Todd Resudek a good read.   ",categories:[],tags:["hex","tiny-tips"],url:"https://www.wiserfirst.com/blog/reset-forgotten-hex-local-password/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-19/blue_flowers_1440_430.jpg"},{title:"Install Java with asdf",excerpt:"For some reason, I needed to install Java on my work laptop, which is a Macbook Pro. I could use Homebrew, but it would only allow me to have one version of Java, or two if you count Java11. If I ever need to run different versions of Java for different projects, it would be very cumbersome to manage, if not downright impossible. For that reason, I generally use a tool called asdf to manage the installations of programming languages.   If you don\u2019t already have it and want to give it a go, the asdf installation instructions for macOS and Linux on their website should be handy. Once you have asdf, installing a version of Java, or most popular programming languages, should be reasonably painless.   Add the plugin   First add the plugin for Java:   asdf plugin-add java   List available versions   This could be helpful when you are not sure which versions are available and you can do that by:   asdf list-all java   If you, like me, haven\u2019t followed the development of Java over the past decade, you might be surprised by the number of options for Java with asdf. Among them, OpenJDK is Oracle\u2019s open source implementation of Java Standard Edition. According to this StackOverflow Answer, Oracle stopped offering downloads of Java 8/9/10, which is why there is the AdoptOpenJDK project. Since I\u2019m not exactly an expert on Java, if you\u2019d like to know more, my friend, Google is a good starting point.   Install a version   Once you pick which version you want, install it with:   asdf install java openjdk-14.0.1   In the example above, I wanted the latest version of OpenJDK, which is 14.0.1 as of July 2020.   Select a global version   After installing the first version, you might also want to select it as the global version for that language by:   asdf global java openjdk-14.0.1   Set JAVA_HOME   To set JAVA_HOME environment variable for Zsh initialisation, add the following:   . ~/.asdf/plugins/java/set-java-home.zsh   Refer to asdf-java documentation for Bash or Fish shells.   Summary   Hopefully this short introduction to installing Java with asdf could be helpful to someone else too. I use asdf to manage all my programming language installations (literally one tool to rule them all!) and I love it.   Update (May 2021)   If you like this short introduction to asdf, I\u2019ve recently published a more complete guide to asdf How to Use asdf Version Manager on macOS, which you might also find interesting.   ",categories:[],tags:["java","asdf"],url:"https://www.wiserfirst.com/blog/install-java-with-asdf/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-18/east_java_1440_450.jpg"},{title:"API Mocking with Prism",excerpt:'Recently my team has been working on API integration with a third party service. Unfortunately, for some reason we do not yet have access to a sandbox environment. Didn\u2019t want to be blocked by this, we decided to build a local mocked API server.   Luckily for us, we were able to find an OpenAPI specification file for the API of this service and also discovered an excellent tool called Prism for creating a mock server out of that. This offers a very simple way to spin up a local mock server with all the endpoints mocked. And with minimal changes to the specification file, the ability to send back custom responses if necessary.   Setup   In this post, I\u2019ll use the OpenAPI specification file of the PetStore API to demonstrate what Prism has to offer. Please download it as well if you\u2019d like to follow along.   curl -o petstore.json https://raw.githubusercontent.com/api-evangelist/swagger/master/dev-api-openapi.json      Note: The OpenAPI specification can be in JSON or YAML formats, but I\u2019m be using JSON in this post.    You\u2019ll also need to install the prism npm package by   npm install -g @stoplight/prism-cli   And then run   prism mock petstore.json   If everything goes well, your local mock server for the PetStore API should be running :tada:.   Add Example Responses   Having the server running is great, but at this point it would only return empty responses because no example response has been defined in the JSON file. To add example responses for various HTTP status codes, you\u2019ll need to edit the petstore.json file.   For instance, say we\u2019d like the /pet/:petId endpoint to return the following example response for a successful GET request:   {   "id": 3,   "name": "Kitten",   "status": "available" }   What we need to do is to add an examples key under paths -&gt; /pet/{petId} -&gt; get -&gt; responses -&gt; 200 -&gt; content -&gt; application/json with the following value:     "examples": {     "success": {       "value": {         "id": 3,         "name": "Kitten",         "status": "available"       }     }   }   For failure cases, say we want to add a 400 example response for the same endpoint, it would involve adding the following under paths -&gt; /pet/{petId} -&gt; get -&gt; responses -&gt; 200 -&gt; content -&gt; application/json:     "examples": {     "failure": {       "value": {         "message": "Bad Request"       }     }   }   Of course there are a lot more you could do with the specification file. I\u2019m just scratching the surface here. Please refer to the Responses Object Example section in the OpenAPI Specification for more information.   Send Requests   Now that we have a local mock server with a butch of endpoints, and the capability of returning desired example responses, it\u2019s time to send some sample requests. Surely creating all the requests manually in your favorite HTTP client would work, but if you use Postman, there is a better alternative. Postman can directly import the OpenAPI specification file and create a new collection with requests for each endpoint. After that you might still need to fill in some variables like baseUrl for all endpoints or petId for the /pet/:petId endpoint. But being able to import from the OpenAPI specification file still saves a lot of effort.   Please refer to the screenshots below:      Postman Environment Configuration    get /pet/:petId/ endpoint    Warning before Celebration   Being able to create a local mock server and to send sample requests to it are definitely useful in some scenarios. Maybe you (like us) want to start the development work before having access to the sandbox environment; or maybe you would like some confirmations before sending out requests to the real API server. But regardless, please always bear in mind that no matter how well it worked with the mock server, this does NOT replace actually integrating with the API server and verifying things actually work. The work is far from done with requests just hitting a local mock server. Again, always test with the real API server and make sure everything works as expected.   Summary   As you can see, if a third party service offer an OpenAPI specification file, it is reasonably simple to get a local mock server up and running with Prism for their API. It is also very approachable to add example responses for the mocked endpoints by editing the specification file. Since Postman can import an OpenAPI specification file into a Postman collection, sending sample requests to the mock server is super easy as well.   ',categories:[],tags:["OpenAPI","mocking","prism","Postman"],url:"https://www.wiserfirst.com/blog/api-mocking-with-prism/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-18/prism_1440_600.jpg"},{title:"Migrating Blog to Jekyll",excerpt:'Back in 2010, I started blogging on WordPress. The reason was simple, I thought since it is the world\u2019s most popular blogging system, it should offer reasonably good user experience. But to my surprise, The UI wasn\u2019t that great especially for technical posts with code snippets. Having done no web development at all back then, I just had to cope with it.   Fast forward to 2012, I started doing web development with ASP.NET/C#. My former colleagues Yijun Xu and Jianguo Ning at the time were creating their blog sites with Jekyll + Octopress and hosted on Github Pages under custom domains. So with their help, I managed to do the same. I really liked the result, because for me writing markdown felt more in control than fiddling with WordPress\u2019 WYSIWYG interface. My old Jekyll blog was using a theme named Scribble. I liked the fact that it was a fairly minimalist theme, but there were things I had hoped to be different. For example, when viewed on a modern computer, the viewing area was too narrow. While syntax highlighting for code snippets was possible, the color schema wasn\u2019t the best. Having said all that though, it was probably the best I could have done. I was still new as a web developer by then and my frontend skills are fairly limited, so designing or customising a Jekyll theme was too far-fetched for me.   After not blogging for the whole 2016, I started writing super short posts on Medium in early 2017, because those are more approachable than longer form articles. I was quite impressed by Medium\u2019s editing interface, which is a fine balance between markdown and WYSIWYG and the published articles look gorgeous as well. So I was happy with Medium for a few years, until they started to enforce what they call a \u201cmetered paywall\u201d. Of course there was a rational behind the Medium Model and to be honest, that was a nice idea, but still I wasn\u2019t a fan. I write to share what I\u2019ve learnt and I want my writings freely available for everyone who\u2019s interested. So naturally any form of paywalls are at odds with my purpose for writings.   A few months ago, I finally decided 2020 is the year to stop putting up with the platform with a paywall and to migrate my personal blog back to Jekyll. Apparently Jekyll has improved massively over the past eight years in terms of user experience. Kudos to the Jekyll team :+1:! Also I received lots of help from Paul and the source for his blog at paulfioravanti.com was a great resource to learn from. I ended up picking the same theme Minimal Mistakes, but chose the dark skin because I like dark mode for everything. Since I got help again, setting up the blog itself was a pleasant task.   Content Migration   Because of the phases of my blogging journey, I have content in three different forms, which means I\u2019ll need to migrate them in different ways too.   WordPress   Posts in WordPress can be exported in XML format and then there is a node tool called wordpress-export-to-markdown that can help convert them into markdown.   First login to the WordPress admin console and navigate to the \u201cExport Content\u201d page via Tools -&gt; Export . Then hitting the \u201cExport all\u201d button should get all the posts in WordPress exported in a single XML file.   Next run wordpress-export-to-markdown with npx to convert the posts from XML into markdown:   npx wordpress-export-to-markdown --input=path-to-your-export-file.xml   Or another option is to clone the repository and run it locally, which makes repeated runs much faster:   git clone git@github.com:lonekorean/wordpress-export-to-markdown.git cd wordpress-export-to-markdown npm install node index.js   The nice thing about this tool is by default it starts in wizard mode and asks about any options not provided on the command line. To learn more about available options, head over to its Github repository. Also How To Convert WordPress To Markdown by Kev Quirk covers converting WordPress to markdown in great details. You might want to check it out.   Jekyll   For posts from my old Jekyll blog, it should have been straightforward because they were originally written in markdown already. But regrettably for some reason I only put the generated site in the blog repository on Github without the markdown files, so the HTML files were what I had to work with. That was definitely more work than if I could just copy over the original markdown files, but I found an online tool called Turndown to convert HTML to Markdown, which made working on this much more tolerable. It also offer options to choose heading style, code block style and etc., which I found quite handy.   For each of my old Jekyll posts, I had to paste in the HTML source and copy the markdown output into a new file. That was quite repetitive for sure, but since there was only less than ten posts in this category, it wasn\u2019t too bad. This time around, I wouldn\u2019t make the same mistake. The source of my blog is in this repository. Hopefully open-soucing the blog itself would make the life of future me a bit easier and might even help others too.   Medium   Lastly it comes to migrating my posts in Medium and for that there is an npm package named mediumexporter. First install it with   npm install -g mediumexporter   Then run it with   mediumexporter https://url-to-the-medium-post-to-export &gt; exported_post.md   Similar to Turndown, I had to go through all my Medium posts one by one with mediumexporter. Again there was less than ten, so it was okay.   If you\u2019d like more details about exporting Medium posts to markdown, check out Export your Medium posts to Markdown.   Content Adjustment   After getting the content as markdown from the three sources, I still need to make various adjustments.   Front Matter   Most posts exported from the above tools do not include Jekyll front matter and even when front matter is included, it doesn\u2019t have the relevant tags. So I\u2019d like to add front matter with title, date and tags to all posts, which would look like the following:   --- title: "Understanding the Use Statement in Elixir with Examples" date: "2015-10-14" tags: elixir use ---   Style Consistency   As mentioned earlier, Turndown supports choosing markdown styles for heading, code block, etc., which is handy. But unfortunately, the other two export tools doesn\u2019t provide such options, therefore I had to make manual adjustments in order to keep the style consistent.   For example, mediumexporter uses indentation for code blocks:       asdf plugin-add java   But I prefer fenced with back ticks:   ```bash asdf plugin-add java ```   Updating Stale Links   I have been blogging on and off for ten years, which is a long time. Unfortunately during that time many of the sites that I originally linked to are no longer live, so there are a fair number of stale links in my posts. For some of the linked pages, the site was moved and I was able to find their new home then update to the new links. For others the site was simply gone, but I still kept the stale links as plain text maybe just to note that there used to be this article on the Internet.   Also even for the valid links, after all these years the content might be out-of-date or even irrelevant. Sadly there is not much I could do about that. Like it or not, nothing lasts for ever in this world.   Summary   In this post, I briefly went through my blogging journey over the past ten years, noted down how I migrated content from three different sources to the current Jekyll blog and the various adjustments that were made.   Hopefully this would serve as a reference for people who want to do the same and might even be helpful for my future self as well.   Again I\u2019d like to thank Paul, Yijun and Jianguo for their generous help, thank the authors to the articles I referenced for sharing their knowledge for free and thank the creators and contributors of the open source tools I used for their great work.   ',categories:[],tags:["jekyll","blog"],url:"https://www.wiserfirst.com/blog/migrating-blog-to-jekyll/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-16/typewriter_1440_480.jpg"},{title:"Git Tip: Prune Stale Remote References",excerpt:"When a colleague pushes a new branch to Github, we can run the following to get it locally:   git pull # or git fetch git checkout &lt;branch-name&gt;   This works because git uses what\u2019s called \u201cremote references\u201d to keep track of the last known state of remote branches, which are essentially read-only bookmarks. In this case, git pull would create a new remote reference for the new remote branch apart from updating existing remote references. Then git checkout ... would create a new local branch that tracks the new remote branch and switch to it.   That\u2019s all well and good until there are too many branches in the codebase, which is not at all uncommon when working in a reasonably sized team. Git automatically creates remote references for all known remote branches, but it doesn\u2019t automatically remove stale remote references when the remote branches are deleted. This annoys me because the stale remote references might mess with my auto-completion for branch names. After some Googling, I managed to find a way to remove them for the default remote connection origin:   git remote prune origin   Also the following command lists remote references:   git remote show origin   After sharing my findings with my colleagues, they pointed out that passing the --prune option to git pull or git fetch would do the trick as well. As mentioned in this nice tutorial for git prune, the following:   git fetch --prune   is the same as:   git fetch --all &amp;&amp; git remote prune   ",categories:[],tags:["tiny-tips","git"],url:"https://www.wiserfirst.com/blog/git-tip-prune-stale-remote-references/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-16/git_1440_480.jpg"},{title:"Vim Tip: Fix Legacy Parser Warning for snipMate",excerpt:"If you use both Vim and snipMate, and upgraded snipMate to the latest version recently, you might encounter a warning:      The legacy SnipMate parser is deprecated. Please see :h SnipMate-deprecate    If you follow the instruction and run :h SnipMate-deprecate, you\u2019ll see the following in a help window:      The legacy parser, version 0, is deprecated. It is currently still the default parser, but that will be changing. NOTE that switching which parser you use could require changes to your snippets\u2013see the previous section.     To continue using the old parser, set g:snipMate.snippet_version (see |SnipMate-options|) to 0 in your |vimrc|.     Setting g:snipMate.snippet_version to either 0 or 1 will remove the start up message. One way this can be done\u2013to use the new parser\u2013is as follows:     let g:snipMate = { \u2018snippet_version\u2019 : 1 }    Basically there is a new parser in snipMate, but the deprecated legacy parser is still the default, which would cause this warning. Explicitly setting the parser version to either 0 for the old parser or 1 for the new parser would remove this start up warning message.   There doesn\u2019t seem to be a reason not to use the new parser, so I just added the following in my .vimrc:       let g:snipMate = { 'snippet_version' : 1 }   Now the annoying warning upon starting Vim is gone :tada:  ",categories:[],tags:["tiny-tips","vim"],url:"https://www.wiserfirst.com/blog/vim-tip-snipmate-legacy-parser-warning/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-16/vim_1440_400.jpg"},{title:"Converting mov/avi to mp4 with ffmpeg",excerpt:'Since I have a camera that captures video in Quicktime movie format, I end up with a lot of .mov videos. While it\u2019s a reasonable format, it does have a big drawback: the video files are really big and therefore my SSD is running out of space.   In order to save some space, I\u2019d like to convert the .mov files to .mp4.   There are various online tools that I can use for the conversion, but uploading the original videos and downloading the resulting videos would take a long time, especially considering I have multiple videos that are several Gigabytes. So the online tools aren\u2019t right for me.   Luckily there is a neat cli tool named ffmpeg that can do the trick. If you don\u2019t already have it, you can install (on macOS) by   brew install ffmpeg   Or if you are on Linux, most likely you can install it with your package manager; if not, go to its download page to find the appropriate installer.   To convert a .mov file to .mp4, you can run   ffmpeg -i input-video-name.mov -vcodec h264 output-video-name.mp4   For more details, please refer to the ffmpeg documentation.   This is good enough if there are only a handful of videos to convert, but it can become tedious to run the command manually for say 20 videos. So I created a quick and dirty Ruby script for converting all the .mov or .avi videos in a directory. And yes, thanks to ffmpeg, the same command can work with .avi videos as well.   #!/usr/bin/env ruby  def usage   puts &lt;&lt;~HEREDOC     Usage:     ./video-converter.rb [dir]     to convert mov/avi files to mp4 with H.264 video codec and AAC audio codec"   HEREDOC end  if ARGV.length &gt; 1   usage   exit 1 end  dir = ARGV.length == 1 ? ARGV[0] : \'.\'  unless Dir.exist?(dir)   puts "\\e[31mDirectory #{dir} not found\\e[0m"   exit 1 end  Dir.chdir(dir) Dir.glob(\'*.{avi,mov}\') do |filename|   basename = filename.split(\'.\')[0]   puts "\\n\\e[32mConverting #{filename} to #{basename}.mp4\\e[0m"   system("ffmpeg -i #{filename} -vcodec h264 #{basename}.mp4") end   I understand there are various ways to improve this script to make it more flexible/robust, but for now this is good enough for my purpose and hopefully it is useful for someone else too.   ',categories:[],tags:["ffmpeg","mov","avi","mp4"],url:"https://www.wiserfirst.com/blog/converting-mov-to-mp4-ffmpeg/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-16/hobbit_1440_420.jpg"},{title:"How to Use asdf Version Manager on macOS",
excerpt:"Last year, I wrote a post titled Install Java with asdf and slightly surprising to me, it ended up becoming the most visited article on my personal blog. Given that, I decided to write another more complete guide to asdf. Even though this guide is meant for macOS, most things covered here should apply to Linux systems too, potentially with some minor tweaks.   Why asdf   Before we begin, let\u2019s talk about why we might need it in the first place.   Say you work as a developer for a company and their tech stack is backend Ruby on Rails and frontend React. There are quite a number of repositories for different services and unsurprisingly not all of them use the same versions of Ruby or Node.js.   To manage the different versions of Ruby, rbenv is a good tool and for Node.js, you have nvm. Then Python is introduced for some machine learning related tasks, so here comes pyenv.   Three tools to manage versions for three programming languages doesn\u2019t sound too bad, but they all have slightly different command syntax for you to remember and use from time to time. The situation only gets worse with more languages introduced to the mix. For example, what if you want to build a side project with Elixir/Phoenix or learn some Rust.   One version manager for each programming language is still okay for three languages, but once the number reaches five or six, it becomes too much effort.   asdf to the rescue   Luckily there is asdf and you can replace rbenv, nvm, pyenv and more with just this one tool.   Thanks to its plugin system, asdf is extendable enough for you to install and manage versions of almost all programming languages that you might want to use. And with asdf you only need to learn one set of simple commands to do that.   Furthermore, if you\u2019d like to manage something and there isn\u2019t yet a plugin for it, it\u2019s possible to create a plugin yourself.   With a relatively small core and the powerful plugin system, asdf offers nearly infinite possibilities.   Install asdf   First make sure that coreutils, curl and git are installed:   brew install coreutils curl git   Install with Git   Personally I prefer installing asdf with Git, because it gives complete control and avoids some pitfalls.   Cloning the latest tag is enough:   git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.1   v0.8.1 is the latest tag as of September 2021, but obviously that would change over time, so make sure to check its Github repository for that before you install.   Then for Zsh add the following to the bottom of ~/.zshrc:   . $HOME/.asdf/asdf.sh   Open a new terminal tab and you should be ready to use asdf :tada:   Install with Homebrew   The alternative is to install asdf with Homebrew:   brew install asdf   If you prefer this method, before continuing, do check out Common Homebrew issues to be aware of potential issues you might run into.   And add the following line to the bottom of your ~/.zshrc:   . $(brew --prefix asdf)/asdf.sh      If you use Bash or Fish shell, please refer to the Add to your Shell section in asdf documentation for instructions.    Manage Plugins   Before you could install Ruby, Node.js or anything else, you\u2019ll need to add the appropriate plugins. Plugins are how asdf understands handling of different programming languages or, say, packages.   There is an asdf plugins repository and for all the plugins listed there, you can add with just the plugin name. For example, here is how to add the plugins for Ruby and Node.js:   asdf plugin add ruby asdf plugin add nodejs   If the plugin you want is not part of this repository, you can still add it with its repository URL. For example:   asdf plugin-add elm https://github.com/vic/asdf-elm   You can list installed plugins with:   asdf plugin list   Or list all available plugins from the asdf plugin repository:   asdf plugin list-all   Manage Language Versions   If you\u2019ve looked through the asdf plugin repository, you may have noticed that there are plugins not only for programming languages, but also for many other cli tools like fzf, minikube etc.   For the purpose of our discussion here, whether it\u2019s a programming language or something else doesn\u2019t really matter, because the commands for managing them are going to be the same. I\u2019ll just refer to them as programming languages in this post, but please keep in mind that you could use asdf to manage other cli tools as well.   Install Versions   Suppose we want to install the latest stable release of Ruby 2 and the latest LTS release of Node.js, which are 2.7.2 and 14.16.1 respectively as of this writing. We can simply run the following:   asdf install ruby 2.7.2 asdf install nodejs 14.16.1      When you run into issues trying to install a particular language version, make sure to check out the Github repository for the plugin. It\u2019s very likely that you\u2019ll find instructions on how to solve those issues.    Set Global Versions   After installing the first versions, you might also want to set them as global versions for Ruby and Node.js:   asdf global ruby 2.7.2 asdf global nodejs 14.16.1   With this, we\u2019ve made Ruby 2.7.2 and Node.js 14.16.1 \u201cglobally\u201d available for the current user.   In asdf terms, \u201cglobal\u201d means default everywhere. So unless it\u2019s overridden with either a local or shell version, which are covered in the following sections, asdf will assume the global version is the one to use.   Set Local Versions (Optional)   Suppose we have a legacy project that we need to maintain and it only runs on Node.js 10. What we can do with asdf is to install Node.js 10 and set a local version in the project directory:   asdf install nodejs 10.22.0 # run in the project directory asdf local nodejs 10.22.0   With this local version set, when you are in the legacy project directory or its subdirectories, asdf will automatically switch to Node.js version 10.22; when you are in any other directories, it\u2019ll fallback to the global Node.js version, unless of course if there is another local Node.js version set.   Set Shell Version (Optional)   I had a fairly interesting situation at work recently. On this project, the backend server and frontend client each lives in a subdirectory in the same repository and we are in the process of developing a new client app to replace the old one.   Normally I just run the server and new client, both of which run on Node.js 14. This time I needed to run the old client to confirm some behaviours on a page, but it requires Node.js 10.   In order to run the old client together with the server, I made another copy of the whole project, set a local Node.js version to 10.22.0 in the new directory and run the old client. For the server, since the local Node.js version is already set to 14.16.1 in the original project directory, I could still start it in as normal.   That certainly worked fine for me. But later I learned that there is a much simpler way: to use an asdf shell version. Without making an extra copy of the project, I could simply start a new shell session in the project directory and set a shell version for Node.js by:   cd path/to/project asdf shell nodejs 10.22.0 # run old client   This shell version only affects the current shell session, nothing else.   As for the server, just run it in another shell session would do.   Quick Recap   So basically asdf allows you to select different versions of programming languages on a per directory basis, and on top of that you have the option to set a shell version which only affects the current shell session.   I think that should be flexible enough for anyone to cope with most of (if not all) the situations they\u2019ll ever encounter.   Under the Hood                       Blue Mustang Coupe with Hood Open by       Alison Ivansek       from Unsplash           To someone who\u2019s new that might sound like magic, but in fact how asdf works is actually quite straightforward.   Global Versions   When you set a global version for a programming language, it\u2019ll add or update a line for the language in a .tool-versions file under the current user\u2019s home directory. If the file doesn\u2019t already exist, it\u2019ll create it first and then add the new line.   If you\u2019ve followed this post to install asdf, install Ruby and Node.js, and then set the global versions, your .tool-versions file in home directory should look like the following:   # cat ~/.tool-versions nodejs 14.16.1 ruby 2.7.2   Local Versions   When you set a local version in a directory, asdf will add or update a line for the language in a .tool-versions file under that directory. Same as the global .tool-versions file, it\u2019ll be created if not exist already.   Say you do have that legacy project where Node.js 10.22 is required and therefore you\u2019ve set a local version for Node.js in the project directory. The .tool-versions file under the project directory should look like this:   # cd path/to/project # cat ~/.tool-versions nodejs 10.22.0   If you\u2019re working on a personal project or your team has adopted asdf, it would be a very good idea to commit the .tool-version file to Git or the version control system you use.   On the other hand, if your team hasn\u2019t reached an agreement on adopting asdf, I\u2019d recommend adding it to .gitignore and keeping it locally without committing to version control. The Migrate from Legacy Tools section might offer more useful information, if you found yourself in situations like this.   Shell Versions   How shell versions work is even simpler in my opinion. When you set one, asdf will set an environment variable ASDF_${LANG}_VERSION for the current session.   For example, when I set a shell version for Node.js to 10.22.0, asdf creates an environment variable named ASDF_NODEJS_VERSION with value 10.22.0 in my shell session.   Given that\u2019s how it works, setting the environment variable for a particular language directly in a shell session or even for just one command would work too.   The following example starts the Rails server with Ruby version 2.5.3:   ASDF_RUBY_VERSION=2.5.3 bundle exec rails server   Current Versions   When you run node for example, asdf will look for a .tool-versions file in the current directory, then the parent directory, then parent\u2019s parent directory etc. If it does find one and a local Node.js version is specified, it\u2019ll use that version. In the case it couldn\u2019t find one, it\u2019ll fallback to the global version set in the .tool-versions file under the current user\u2019s home directory. So the logic is quite straightforward.   You could run asdf current to get a list of current versions of installed programming languages in the current directory. For example, say we are in the legacy project directory, where a local Node.js version is set, but no Ruby version is set. What you get should be something like this:   # asdf current nodejs          10.22.0         /Users/username/workspace/legacy-project/.tool-versions ruby            2.7.2           /Users/username/.tool-versions   Whereas if you run it in another directory, assuming no local versions are set, what you get is slightly different:   # asdf current nodejs          14.16.1         /Users/username/.tool-versions ruby            2.7.2           /Users/username/.tool-versions   As you can see, in the output, it not only tells you what the current versions are, but also shows from which .tool-versions file asdf got each version.   I reckon this command could come in handy when you try to figure out where a particular local version is set.   Use asdf in a Team   Coming back to the scenario mentioned at the beginning of this article, where you work for a company which uses Ruby on Rails for backend and React for frontend and different projects might have different language version requirements.   After introducing asdf you no longer have to deal with different tools for managing versions of different programming languages, which is great. But obviously when starting to work on a different project for the first time, everyone still need to get the correct local versions installed.   What I used to do is to check out what are the versions specified in the .tool-versions file of the project and then manually install them. For example, if the file has   nodejs 10.22.0 ruby 2.5.3   Running the following should do it:   asdf install nodejs 10.22.0 asdf install ruby 2.5.3   But this feels slightly tedious and it is.   Luckily as it turns out there is a much better way: running asdf install without any arguments. If a required version is not installed yet, asdf will go ahead and install it; if a version is already installed, it will tell you that and does nothing.   I think this is a rather neat trick for installing the specified local versions for a project, therefore it makes this aspect of onboarding new team members to a project pretty much painless.   Migrate from Legacy Tools   If you are sold on asdf but for whatever reason can\u2019t adopt it at work, there is a configuration option that could allow you to still use it.   What you need to do is to create a .asdfrc file in your home directory with the following content:   legacy_version_file = yes   Setting this to yes will cause asdf plugins to read \u201clegacy\u201d version files, for example .ruby-versions for Ruby and .nvmrc or .node-versions for Node.js.   This is especially helpful when you are in a team where your teammates don\u2019t want to change to a different tool for managing the programming languages. Change is hard even when there are obviously benefits, so expect resistance if people are not already familiar with asdf.   With this setting though, they can continue to use the legacy tools they prefer, but you would have the option to use asdf if you want.      Note: not all plugins support this feature. If you rely on this behaviour, please do check the documentation of the plugins you use.    Hopefully one day they\u2019ll start noticing conveniences of asdf and change their minds, at which point the whole team could fully adopt asdf and enjoy the benefits it brings.   Summary   In this post, I covered:      how to install asdf   how to add plugins   how to manage versions   how versions work under the hood   how asdf fits in a team setting   how to use asdf with legacy tools   While there are definitely aspects of asdf that I didn\u2019t cover, this should be a solid starting point for someone new. After reading this post and following along, you should be able to start using asdf with confidence. If you do run into issues, check out asdf documentation and Google is your friend.   With asdf, one could manage different versions of all the programming languages that they might need without any trouble, and also it makes sharing a common set of programming language versions across a team for a project very easy.   Because of the conveniences it offers, I\u2019m a big fan of asdf and I truly believe that every developer should use it or at least know it as a potential option to consider.   ",categories:[],tags:["asdf","version-manager","macos","ruby","nodejs","python"],url:"https://www.wiserfirst.com/blog/how-to-use-asdf-on-macos/",teaser:"https://www.wiserfirst.com/assets/images/2021-05-15/coding_1440_400.jpg"},{title:"Get Random Array Element in Typescript",excerpt:"Recently I needed to be able to get a random element from an array. It was slightly surprising to me that the Javascript Array class doesn\u2019t provide a built-in function for that.   In this post I talks about how I built a function to do that and also compared with the _.sample function from the popular Javascript library lodash.   Initial Implementation   I\u2019m building it in Typescript, since the project I am working on already uses Typescript.   The function takes an array and returns a random element from it. The type of array element doesn\u2019t matter here. So the function signature should be something like this:   (arr: any[]) =&gt; any   For an array, the lowest valid index is 0 and the highest valid index is arr.length - 1. I could generate an random integer between 0 and arr.length - 1. Then if I use that number as index for the array, I could get back a random element. That should look like this:   Math.floor(Math.random() * arr.length)   So we have our function:   const getRandomElement = (arr: any[]) =&gt;   arr[Math.floor(Math.random() * arr.length)]   It does the job and it\u2019s fairly straightforward. But there is actually a small issue, which I\u2019ll address in later.   Comparison with _.sample   After implementing it, I thought that there is a _.sample function from the popular library lodash, it would be interesting to see how it was implemented.   I\u2019m going to look at the latest version of lodash, which is 4.17.21 as of this writing.   The _.sample function looks like this:   /**  * Gets a random element from `collection`.  *  * @static  * @memberOf _  * @since 2.0.0  * @category Collection  * @param {Array|Object} collection The collection to sample.  * @returns {*} Returns the random element.  * @example  *  * _.sample([1, 2, 3, 4]);  * // =&gt; 2  */ function sample(collection) {   var func = isArray(collection) ? arraySample : baseSample;   return func(collection); }   Apparently it handles not only arrays but also collections in general.   I won\u2019t worry about baseSample for collections that are not array in this article. But if you like, feel free to check out its source.   For arrays, it delegates to a arraySample function, which looks like this:   /**  * A specialized version of `_.sample` for arrays.  *  * @private  * @param {Array} array The array to sample.  * @returns {*} Returns the random element.  */ function arraySample(array) {   var length = array.length;   return length ? array[baseRandom(0, length - 1)] : undefined; }   So it checks the array length, and if length is 0 it returns undefined. Otherwise it\u2019s very similar to my implementation: it calls baseRandom with 0 and length - 1 to (presumably) get a random integer, then use it as index for the array and gets a random element from the array.   In order for this to work, the baseRandom function must generate a random integer between its two arguments.   /**  * The base implementation of `_.random` without support for returning  * floating-point numbers.  *  * @private  * @param {number} lower The lower bound.  * @param {number} upper The upper bound.  * @returns {number} Returns the random number.  */ function baseRandom(lower, upper) {   return lower + nativeFloor(nativeRandom() * (upper - lower + 1)); }   And looks like it does!   nativeFloor and nativeRandom in here are just aliases for the built-in methods Math.Floor and Math.random.   Improvement   I\u2019m glad to see that the core logic of _.sample for arrays is very similar to the getRandomElement function I got. However, it did check the array length, which I forgot to do.   In my use case, getRandomElement is just used as a test helper and the same non-empty array constant is always passed in, so omitting the array length check isn\u2019t causing any issue for now.   But for completeness\u2019 sake and also to allow it to be used in other scenarios in the future, I should add the array length check. So the function becomes:   const getRandomElement = (arr: any[]) =&gt;   arr.length ? arr[Math.floor(Math.random() * arr.length)] : undefined   Summary   In this article, I walked through how to implement a function for getting a random element from an array, had a tour in lodash source code around _.sample and improved the initial implementation by adding an array length check to make it more complete and robust.   Open source not only come in handy when we need to use them directly in our projects, but also serve as a great resource for learning.   I definitely should look more into source code of open source libraries and frameworks. Maybe you should too :smile:   ",categories:[],tags:["Javascript","Typescript","mini-patterns","array","lodash"],url:"https://www.wiserfirst.com/blog/typescript-random-array-element/",teaser:"https://www.wiserfirst.com/assets/images/2021-07-25/dice_1440_400.jpg"},{title:"Setup New Mac for Software Development",excerpt:'Many software developers use Mac computers for work or personal use. To start on a new Mac, the most convenient option is to transfer from an existing Mac or restore from a Time Machine backup. But from time to time, we still need to set it up as a brand new computer, maybe because an existing Mac isn\u2019t available or we simply want to start fresh with the new laptop.   In this post, I\u2019ll document what I consider the best way to setup a brand new Mac for software development. The primary purpose is to serve as a reference for my future self, but if some readers find it useful, that would be awesome too.   These are just based on my personal experience, so there is no guarantee they\u2019ll work well for you too. If you find other better ways to do certain steps, please let me know in the public comment below or reach out to me directly.   Step 1: Install Homebrew   I use Homebrew to install and manage most of command line tools and GUI apps.   Install it with:   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"   This script is quite intelligent. It works on Intel or Apple Silicon based Macs and even Linux, and it installs Homebrew to different preferred prefixes based on the situation. For more information, please refer to the Homebrew Installation guide.   Step 2: brew bundle   Manually installing all the packages needed on a new Mac is tedious, but luckily we don\u2019t have to do that thanks to Homebrew Bundle.   One can create a Brewfile with brew bundle dump and then run brew bundle to install and upgrade all packages from the Brewfile. For more details, please refer to the brew bundle section of the brew man output or brew bundle --help.   I\u2019ve saved a Brewfile to my dotfiles repository on Github, so I can just download it with:   curl -fL -o Brewfile https://raw.githubusercontent.com/wiserfirst/dotfiles/master/Brewfile   And then run brew bundle to install the packages.   Step 3: Add SSH key to Github   The next couple steps involve cloning from Github, so generating a new SSH key and adding it to my Github account is necessary.   Generate new SSH key   ssh-keygen -t ed25519 -C "your_email@example.com"   Reference: Generating a new SSH key and adding it to the ssh-agent   Add to Github account   First copy your SSH public key to clipboard with   pbcopy &lt; ~/.ssh/id_ed25519.pub   Then login to your Github account, go to Settings -&gt; SSH and GPG keys -&gt; New SSH key. Give it a title and paste your key into the \u201cKey\u201d field.   Reference: Adding a new SSH key to your Github account   Step 4: Install my dotfiles   git clone git@github.com:wiserfirst/dotfiles.git cd dotfiles ruby ./install.rb   Step 5: Install maximum-awesome   git clone git@github.com:wiserfirst/maximum-awesome.git cd maximum-awesome git checkout qing rake   For installing Vim plugins separately, just run :PlugInstall in Vim.   Step 6: Install asdf-vm and programming languages   git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.8.1   If you don\u2019t already have this in your zshrc, the following is needed:   echo -e \'\\n. $HOME/.asdf/asdf.sh\' &gt;&gt; ~/.zshrc echo -e \'\\n. $HOME/.asdf/completions/asdf.bash\' &gt;&gt; ~/.zshrc   Now I\u2019d like to install Erlang and Elixir:   asdf plugin-add erlang asdf plugin-add elixir # actual Openssl version depends on what\'s in `brew list` export KERL_CONFIGURE_OPTIONS="--without-javac --with-ssl=$(brew --prefix openssl@1.1)" asdf install erlang 23.3.4 asdf install elixir 1.12.3 asdf global erlang 23.3.4 asdf global elixir 1.12.3   Obviously you could install whatever programming languages you need, be that Ruby, Node.js, Python or something else.   For more details on how to do that with asdf, check out my comprehensive guide: How to Use asdf Version Manager on macOS.   Step 7: Install prezto and set zsh as default shell   git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto" setopt EXTENDED_GLOB for rcfile in "${ZDOTDIR:-$HOME}"/.zprezto/runcoms/^README.md(.N); do   ln -s "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile:t}" done sudo chsh -s /bin/zsh   Step 8: Install fzf   git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf ~/.fzf/install   Step 10: Preferences in GUI      iTerm            Profiles -&gt; Colors -&gt; Color Presets -&gt; Solarized Dark       Profiles -&gt; Text -&gt; Font -&gt; Size to 14       Profiles -&gt; Terminal -&gt; Scrollback Buffer -&gt; tick \u201cUnlimited scrollback\u201d           System Preferences            Keyboard -&gt; Modifier Keys -&gt; Map \u201cCaps lock\u201d key to Escape       Trackpad -&gt; Point &amp; Click -&gt; tick \u201cTap to click\u201d       Accessibility -&gt; Pointer Control -&gt; Trackpad Options -&gt; tick \u201cEnable   dragging\u201d -&gt; three finger drag       (Optional for external monitor) Displays -&gt; (on the external monitor)   Option + click \u201cScaled\u201d and choose 2560 x 1440           Step 11: Ignore new system update (optional)   If you are not ready to upgrade to the latest version of macOS, you can stop it from showing up in System Preferences -&gt; Software Update with:   sudo /usr/sbin/softwareupdate --ignore "macOS [version name]"   Here version name could be Catalina, Big Sur or Monterey, depending on which you\u2019d like to ignore.   When you are ready to install the new version, just restore it with:   sudo /usr/sbin/softwareupdate --reset-ignored   Summary   After following the steps in this post, there may be things you still need to install or tweak, but the new Mac should be fairly close to be ready as the primary development machine.   Surely, these steps are going to evolve over time and I\u2019ll try my best to keep them up-to-date. But again, I don\u2019t do this very often, so they may get out of date.   Anyway, please feel free to take what you need and let me know what you think :slightly_smiling_face:   ',categories:[],tags:["Apple","Mac","macos"],url:"https://www.wiserfirst.com/blog/setup-macbook-for-developers/",teaser:"https://www.wiserfirst.com/assets/images/2021-09-07/macbook_1440_400.jpg"},{title:"Journey of upgrading an app to Phoenix 1.6",
excerpt:'Phoenix 1.6 RC0 was released just over three weeks ago and I\u2019m really excited about it. Because it provides the option to replace webpack with esbuild, so that we no longer need Node for asset building.   True that it\u2019s just the first release candidate, but we are still one step closer to the formal release.   Last week, I managed to upgrade my little side project Rubik\u2019s Cube Algorithms Trainer to Phoenix 1.6 and I\u2019ll share my journey in this post. For the most part, I was following the Phoenix 1.5.x to 1.6 upgrade instructions by Chris McCord.   If you prefer watching a video than reading, I also did a talk about it at Elixir Sydney September 2021 meetup and the recording is on Youtube.   Update dependencies in Mixfile   First we need to update the dependencies in the mix.exs file:   def deps do   [     {:phoenix, "~&gt; 1.6.0-rc.0", override: true},     {:phoenix_html, "~&gt; 3.0"},     {:phoenix_live_view, "~&gt; 0.16.0"},     {:phoenix_live_dashboard, "~&gt; 0.5"},     {:telemetry_metrics, "~&gt; 0.6"},     {:telemetry_poller, "~&gt; 0.5"},     ...   ] end   Then run mix deps.get to install the new dependencies.   Two thing to note here:      For phoenix, the override: true option is important, because Phoenix 1.6 is still in RC   If you want to use the new HEEx templates, add phoenix_live_view even if you don\u2019t actually use live view   esbuild for Javascript and CSS bundling (optional)   Next step is to use esbuild for Javascript and CSS bundling. This is an optional step in upgrading to Phoenix 1.6, but it is what I\u2019m all excited about, so it\u2019s not optional for me :smirk:   Phoenix asset pipeline overview   Before jumping into replacing webpack with esbuild, it\u2019s worth having a quick review of the existing Phoenix asset pipeline:      All static assets are served from priv/static   Javascript: webpack bundles from assets/js to priv/static/js   CSS: webpack bundles from assets/css to priv/static/css   Images and other assets: webpack copies from assets/static -&gt; priv/static   Now with the new asset pipeline based on esbuild, all static assets are still served from priv/static directory, so the first item stays the same.   With webpack gone, the other three obviously will change. For JS and CSS, esbuild will handle them; but we do need to deal with images and other assets separately.   Alright, let\u2019s dive into how to make those changes.   Remove webpack config and related node files   First we need to remove webpack config and related node files:   $ cd assets $ rm webpack.config.js package.json      package-lock.json .babelrc $ rm -rf node_modules   If you use yarn, remove yarn.lock instead of package-lock.json.   Add esbuild in deps   Then add esbuild as a dependency:   def deps do   [     ...     {:esbuild, "~&gt; 0.2", runtime: Mix.env() == :dev},   ] end   Configure esbuild   Next add configuration for esbuild in config/config.exs:   # config/config.exs config :esbuild,   version: "0.12.18",   default: [     args: ~w(js/app.js --bundle --target=es2016 --outdir=../priv/static/assets),     cd: Path.expand("../assets", __DIR__),     env: %{"NODE_PATH" =&gt; Path.expand("../deps", __DIR__)}   ]      Note: here we are providing the relative path from config to assets with the :cd option, so that the esbuild command can be run in the assets directory. Given that, if you have a umbrella app, the path should be something like ../apps/your_web_app/assets.    Update watcher in endpoint configuration   In your config/dev.exs file, there should be a node watcher that uses webpack under the endpoint configuration. We want to replace that one with the esbuild watcher below:   # config/dev.exs config :your_web_app, YourWebApp.Endpoint,   ...,   watchers: [     esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]}   ]      Note: this is for local development only.    Move images and other assets   Then we deal with images.   The following is not mentioned in the Phoenix 1.6 upgrade instructions, but I found Jos\xe9 Valim\u2019s recommendation in a reddit thread.   He recommends to move everything in assets/static to priv/static; stop ignoring priv/static and commit it in version control; also ignore priv/static/assets instead, since that\u2019s where esbuild puts the compiled Javascript and CSS files.   Add assets.deploy mix alias   Then we add a new mix alias for deployment:   defp aliases do   [     ...,     "assets.deploy": ["esbuild default --minify", "phx.digest"]   ] end   As we can see, it has two parts:      esbuild will create minified Javascript and CSS and put them in priv/static/assets   the phx.digest task will add digests for all static assets priv/static   This is for deployment, so we only need to run it on build servers. For example when deploying to Heroku or the like, make sure it is run.   If you did run it locally, it would generate a whole bunch of digested assets. Since we no longer ignore priv/static, they would show up when you run git status for example and could be annoying.   We can remove them with the following command:   mix phx.digest.clean --all   Update layouts   As mentioned in the last section, esbuild puts compiled Javascript and CSS in priv/static/assets directory, so we need to update the references to them in the layouts, usually in app.html.eex or root.html.eex:   # update Routes.static_path(@conn, "/js/app.js") Routes.static_path(@conn, "/css/app.css") # to Routes.static_path(@conn, "/assets/app.js") Routes.static_path(@conn, "/assets/app.css")   Update Plug.Static configuration   Last step for the new asset pipeline is to update configuration for Plug.Static.   We need to add the new assets directory in the :only option and also remove js and css from there since we no longer have them.   plug Plug.Static,   at: "/",   from: :my_app,   gzip: false,   only: ~w(assets fonts images favicon.ico robots.txt)   With the changes above, the new asset pipeline should be working, which means we are officially free of webpack and node in our Phoenix application :tada:   Migrate to HEEx templates (optional)   With Phoenix 1.6 the leex templates are deprecated and there is a new HEEx engine, which is being used in all the HTML files generated by phx.new, phx.gen.html etc.   It is HTML-aware and it enforces valid markup. It\u2019s also more strict for the Elixir expressions inside tags.   In order to use it in an existing Phoenix project, make sure phoenix_live_view is added as a dependency, because the HEEx engine is part of phoenix_live_view.   Then rename all the existing .html.eex and .html.leex templates to .html.heex   Update Elixir expressions   When Elixir expressions appear in the body of HTML tags, HEEx templates use &lt;%= ... %&gt; for interpolation just like EEx templates.   So code in the following example stays the same:   &lt;h2&gt;Hello &lt;%= @name %&gt;&lt;/h2&gt;  &lt;%= Enum.map(names, fn name -&gt; %&gt;   &lt;li&gt;&lt;%= name %&gt;&lt;/li&gt; &lt;% end) %&gt;   But when an Elixir expression is used inside a tag, as the attribute value for example:   &lt;div id="&lt;%= @id %&gt;"&gt;   It needs to be updated to:   &lt;div id={@id}&gt;   Notice the EEx interpolation is inside double quotes, the curly braces are not. So the Elixir expression has to serve as the whole attribute value, not part of it.   With EEx, the Elixir expression can serve as part of the attribute value:   &lt;a href="/prefix/&lt;%= @item.text %&gt;"&gt;   In situations like this, directly replacing it with a pair of curly braces won\u2019t work.   # this doesn\'t work &lt;a href="/prefix/{@item.text}"&gt;   One way I could think of is to interpolate the original Elixir term in a string and then put that string in a pair of curly braces like the following:   &lt;a href={"/prefix/#{@item.text}"}&gt;   Now the resulting string is the Elixir expression and it serves as the whole attribute value, so this works.   After making those changes, the new HEEx templates should be working.   Deployment   There are changes to the deployment process as well and I\u2019ll cover that for Gigalixir, since that\u2019s where my app is deployed to. But if you use Heroku, the changes should be fairly similar.   Since we no longer use webpack and node to build assets, phoenix_static_buildpack is not necessary any more. We can just get rid of it.   Also we need to make sure the assets.deploy task is run during deployment. We can use hook_post_compile in Elixir buildpack for that.   Just add this line in your elixir_buildpack.config:   hook_post_compile="eval mix assets.deploy &amp;&amp; rm -f _build/esbuild"   With those two changes, my app can be deployed to Gigalixir without any issue.   If you\u2019d like to deploy a new Phoenix 1.6 app to Gigalixir, check out the full guide.   New generators   I\u2019d like to quickly mention that Phoenix 1.6 also ships with two new generators:      phx.gen.auth generates a complete authentication solution for your application   phx.gen.notifier generates a notifier for sending emails   In my little app, I didn\u2019t need to use them. But if you do need an authentication solution or a notifier, check them out.   Summary   The release of Phoenix 1.6 is quite exciting, because by default webpack and node is replaced by esbuild. Now we can focus on developing the application in Elixir and Phoenix, without wasting time on breaking changes and nonsense security alerts in node dependencies.   In this post, I walked through how I upgraded my humble little Phoenix app to 1.6, with a focus on updating the asset pipeline to use esbuild and migrating to HEEx templates. Hope this helps someone who\u2019s trying to do the same.   Phoenix 1.6 do have other new features that are not covered in this post. For those, make sure to check out the release note.   If you have a more complex workflow around building CSS, you might want to check out this guide, which uses esbuild, postcss, tailwind and etc. It might not be exactly what you need, but it should offer you some good ideas.   ',categories:[],tags:["elixir","esbuild","phoenix","webpack"],url:"https://www.wiserfirst.com/blog/upgrade-to-phoenix-16/",teaser:"https://www.wiserfirst.com/assets/images/2021-09-19/elixir_code_1440_420.jpg"}];