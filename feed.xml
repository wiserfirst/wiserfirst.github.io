<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://www.wiserfirst.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://www.wiserfirst.com/" rel="alternate" type="text/html"/><updated>2021-09-28T12:43:59+10:00</updated><id>https://www.wiserfirst.com/feed.xml</id><title type="html">Peaceful Revolution</title><subtitle>Just another personal blog</subtitle><author><name>Qing Wu</name><email>wiserfirst@gmail.com</email><uri>https://www.wiserfirst.com</uri></author><entry><title type="html">Journey of upgrading an app to Phoenix 1.6</title><link href="https://www.wiserfirst.com/blog/upgrade-to-phoenix-16/" rel="alternate" type="text/html" title="Journey of upgrading an app to Phoenix 1.6"/><published>2021-09-19T12:25:00+10:00</published><updated>2021-09-28T12:05:00+10:00</updated><id>https://www.wiserfirst.com/blog/upgrade-to-phoenix-16</id><content type="html" xml:base="https://www.wiserfirst.com/blog/upgrade-to-phoenix-16/">&lt;p&gt;Phoenix 1.6 RC0 was released just over three weeks ago and I’m really excited about it. Because it provides the option to replace webpack with esbuild, so that we no longer need Node for asset building.&lt;/p&gt; &lt;p&gt;True that it’s just the first release candidate, but we are still one step closer to the formal release.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;strong&gt;Update (28 September 2021):&lt;/strong&gt; &lt;a href=&quot;https://github.com/phoenixframework/phoenix/releases/tag/v1.6.0&quot;&gt;Phoenix 1.6.0&lt;/a&gt; was released three days ago on 25 September, so now we do have our formal release&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Last week, I managed to upgrade my little side project &lt;a href=&quot;https://github.com/wiserfirst/rubiks_cube_algs_trainer&quot;&gt;Rubik’s Cube Algorithms Trainer&lt;/a&gt; to Phoenix 1.6 and I’ll share my journey in this post. For the most part, I was following the &lt;a href=&quot;https://gist.github.com/chrismccord/2ab350f154235ad4a4d0f4de6decba7b&quot;&gt;Phoenix 1.5.x to 1.6 upgrade instructions&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/chris_mccord&quot;&gt;Chris McCord&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you prefer watching a video than reading, I also did a talk about it at &lt;a href=&quot;https://www.meetup.com/elixir-sydney/events/gztkjsyccmbtb/&quot;&gt;Elixir Sydney September 2021 meetup&lt;/a&gt; and the recording is on &lt;a href=&quot;https://www.youtube.com/watch?v=NR_Jk3yUEqc&quot;&gt;Youtube&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;update-dependencies-in-mixfile&quot;&gt;Update dependencies in Mixfile&lt;/h2&gt; &lt;p&gt;First we need to update the dependencies in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; file:&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:phoenix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.6.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:phoenix_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 3.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:phoenix_live_view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 0.16.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:phoenix_live_dashboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 0.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:telemetry_metrics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 0.6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:telemetry_poller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 0.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix deps.get&lt;/code&gt; to install the new dependencies.&lt;/p&gt; &lt;p&gt;Two thing to note here:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;del&gt;For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phoenix&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;override: true&lt;/code&gt; option is important, because Phoenix 1.6 is still in RC&lt;/del&gt; (This is no longer the case, since Phoenix 1.6.0 has been released)&lt;/li&gt; &lt;li&gt;If you want to use the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEEx&lt;/code&gt; templates, add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phoenix_live_view&lt;/code&gt; even if you don’t actually use live view&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;esbuild-for-javascript-and-css-bundling-optional&quot;&gt;esbuild for Javascript and CSS bundling (optional)&lt;/h2&gt; &lt;p&gt;Next step is to use esbuild for Javascript and CSS bundling. This is an optional step in upgrading to Phoenix 1.6, but it is what I’m all excited about, so it’s not optional for me :smirk:&lt;/p&gt; &lt;h3 id=&quot;phoenix-asset-pipeline-overview&quot;&gt;Phoenix asset pipeline overview&lt;/h3&gt; &lt;p&gt;Before jumping into replacing webpack with esbuild, it’s worth having a quick review of the existing Phoenix asset pipeline:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;All static assets are served from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Javascript: webpack bundles from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/js&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static/js&lt;/code&gt;&lt;/li&gt; &lt;li&gt;CSS: webpack bundles from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/css&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static/css&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Images and other assets: webpack copies from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/static&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Now with the new asset pipeline based on esbuild, all static assets are still served from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static&lt;/code&gt; directory, so the first item stays the same.&lt;/p&gt; &lt;p&gt;With webpack gone, the other three obviously will change. For JS and CSS, esbuild will handle them; but we do need to deal with images and other assets separately.&lt;/p&gt; &lt;p&gt;Alright, let’s dive into how to make those changes.&lt;/p&gt; &lt;h3 id=&quot;remove-webpack-config-and-related-node-files&quot;&gt;Remove webpack config and related node files&lt;/h3&gt; &lt;p&gt;First we need to remove webpack config and related node files:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;assets &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;webpack.config.js package.json package-lock.json .babelrc &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; node_modules &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;If you use yarn, remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn.lock&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package-lock.json&lt;/code&gt;.&lt;/p&gt; &lt;h3 id=&quot;add-esbuild-in-deps&quot;&gt;Add esbuild in deps&lt;/h3&gt; &lt;p&gt;Then add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esbuild&lt;/code&gt; as a dependency:&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:esbuild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 0.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;runtime:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;configure-esbuild&quot;&gt;Configure esbuild&lt;/h3&gt; &lt;p&gt;Next add configuration for esbuild in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/config.exs&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/config.exs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:esbuild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.12.18&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;args:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;~w(js/app.js --bundle --target=es2016 --outdir=../priv/static/assets)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;cd:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;../assets&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__DIR__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;env:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NODE_PATH&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;../deps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__DIR__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;blockquote&gt; &lt;p&gt;Note: here we are providing the relative path from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:cd&lt;/code&gt; option, so that the esbuild command can be run in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets&lt;/code&gt; directory. Given that, if you have a umbrella app, the path should be something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;../apps/your_web_app/assets&lt;/code&gt;.&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id=&quot;update-watcher-in-endpoint-configuration&quot;&gt;Update watcher in endpoint configuration&lt;/h3&gt; &lt;p&gt;In your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/dev.exs&lt;/code&gt; file, there should be a node watcher that uses webpack under the endpoint configuration. We want to replace that one with the esbuild watcher below:&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/dev.exs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:your_web_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YourWebApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;watchers:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;esbuild:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Esbuild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:install_and_run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;~w(--sourcemap=inline --watch)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;blockquote&gt; &lt;p&gt;Note: this is for local development only.&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id=&quot;move-images-and-other-assets&quot;&gt;Move images and other assets&lt;/h3&gt; &lt;p&gt;Then we deal with images.&lt;/p&gt; &lt;p&gt;The following is not mentioned in the Phoenix 1.6 upgrade instructions, but I found &lt;a href=&quot;https://www.reddit.com/r/elixir/comments/p9t68v/with_the_new_esbuild_transition_what_do_you_use/ha0cskv?context=3&quot;&gt;José Valim’s recommendation&lt;/a&gt; in a reddit thread.&lt;/p&gt; &lt;p&gt;He recommends to move everything in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets/static&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static&lt;/code&gt;; stop ignoring &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static&lt;/code&gt; and commit it in version control; also ignore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static/assets&lt;/code&gt; instead, since that’s where esbuild puts the compiled Javascript and CSS files.&lt;/p&gt; &lt;h3 id=&quot;add-assetsdeploy-mix-alias&quot;&gt;Add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets.deploy&lt;/code&gt; mix alias&lt;/h3&gt; &lt;p&gt;Then we add a new mix alias for deployment:&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aliases&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;assets.deploy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;esbuild default --minify&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;phx.digest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;As we can see, it has two parts:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;esbuild will create minified Javascript and CSS and put them in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static/assets&lt;/code&gt;&lt;/li&gt; &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phx.digest&lt;/code&gt; task will add digests for all static assets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static&lt;/code&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;This is for deployment, so we only need to run it on build servers. For example when deploying to Heroku or the like, make sure it is run.&lt;/p&gt; &lt;p&gt;If you did run it locally, it would generate a whole bunch of digested assets. Since we no longer ignore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static&lt;/code&gt;, they would show up when you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; for example and could be annoying.&lt;/p&gt; &lt;p&gt;We can remove them with the following command:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix phx.digest.clean &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;update-layouts&quot;&gt;Update layouts&lt;/h3&gt; &lt;p&gt;As mentioned in the last section, esbuild puts compiled Javascript and CSS in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static/assets&lt;/code&gt; directory, so we need to update the references to them in the layouts, usually in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.html.eex&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root.html.eex&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# update&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/js/app.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/css/app.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# to&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/assets/app.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;static_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/assets/app.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;update-plugstatic-configuration&quot;&gt;Update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plug.Static&lt;/code&gt; configuration&lt;/h3&gt; &lt;p&gt;Last step for the new asset pipeline is to update configuration for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plug.Static&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;We need to add the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets&lt;/code&gt; directory in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:only&lt;/code&gt; option and also remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;css&lt;/code&gt; from there since we no longer have them.&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;at:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:my_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;gzip:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;only:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;~w(assets fonts images favicon.ico robots.txt)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;With the changes above, the new asset pipeline should be working, which means we are officially free of webpack and node in our Phoenix application :tada:&lt;/p&gt; &lt;h2 id=&quot;migrate-to-heex-templates-optional&quot;&gt;Migrate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEEx&lt;/code&gt; templates (optional)&lt;/h2&gt; &lt;p&gt;With Phoenix 1.6 the leex templates are deprecated and there is a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEEx&lt;/code&gt; engine, which is being used in all the HTML files generated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phx.new&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phx.gen.html&lt;/code&gt; etc.&lt;/p&gt; &lt;p&gt;It is HTML-aware and it enforces valid markup. It’s also more strict for the Elixir expressions inside tags.&lt;/p&gt; &lt;p&gt;In order to use it in an existing Phoenix project, make sure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phoenix_live_view&lt;/code&gt; is added as a dependency, because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEEx&lt;/code&gt; engine is part of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phoenix_live_view&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Then rename all the existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html.eex&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html.leex&lt;/code&gt; templates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html.heex&lt;/code&gt;&lt;/p&gt; &lt;h3 id=&quot;update-elixir-expressions&quot;&gt;Update Elixir expressions&lt;/h3&gt; &lt;p&gt;When Elixir expressions appear in the body of HTML tags, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEEx&lt;/code&gt; templates use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;%= ... %&amp;gt;&lt;/code&gt; for interpolation just like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EEx&lt;/code&gt; templates.&lt;/p&gt; &lt;p&gt;So code in the following example stays the same:&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;But when an Elixir expression is used inside a tag, as the attribute value for example:&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;%= @id %&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;It needs to be updated to:&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Notice the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EEx&lt;/code&gt; interpolation is inside double quotes, the curly braces are not. So the Elixir expression has to serve as the whole attribute value, not part of it.&lt;/p&gt; &lt;p&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EEx&lt;/code&gt;, the Elixir expression can serve as part of the attribute value:&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/prefix/&amp;lt;%= @item.text %&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;In situations like this, directly replacing it with a pair of curly braces won’t work.&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# this doesn't work&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/prefix/{@item.text}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;One way I could think of is to interpolate the original Elixir term in a string and then put that string in a pair of curly braces like the following:&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/prefix/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Now the resulting string is the Elixir expression and it serves as the whole attribute value, so this works.&lt;/p&gt; &lt;p&gt;After making those changes, the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEEx&lt;/code&gt; templates should be working.&lt;/p&gt; &lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt; &lt;p&gt;There are changes to the deployment process as well and I’ll cover that for Gigalixir, since that’s where my app is deployed to. But if you use Heroku, the changes should be fairly similar.&lt;/p&gt; &lt;p&gt;Since we no longer use webpack and node to build assets, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phoenix_static_buildpack&lt;/code&gt; is not necessary any more. We can just get rid of it.&lt;/p&gt; &lt;p&gt;Also we need to make sure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assets.deploy&lt;/code&gt; task is run during deployment. We can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hook_post_compile&lt;/code&gt; in Elixir buildpack for that.&lt;/p&gt; &lt;p&gt;Just add this line in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elixir_buildpack.config&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hook_post_compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eval mix assets.deploy &amp;amp;&amp;amp; rm -f _build/esbuild&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;With those two changes, my app can be deployed to Gigalixir without any issue.&lt;/p&gt; &lt;p&gt;If you’d like to deploy a new Phoenix 1.6 app to Gigalixir, check out the &lt;a href=&quot;https://hexdocs.pm/phoenix/1.6.0-rc.0/gigalixir.html&quot;&gt;full guide&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;new-generators&quot;&gt;New generators&lt;/h2&gt; &lt;p&gt;I’d like to quickly mention that Phoenix 1.6 also ships with two new generators:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phx.gen.auth&lt;/code&gt; generates a complete authentication solution for your application&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phx.gen.notifier&lt;/code&gt; generates a notifier for sending emails&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In my little app, I didn’t need to use them. But if you do need an authentication solution or a notifier, check them out.&lt;/p&gt; &lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt; &lt;p&gt;The release of Phoenix 1.6 is quite exciting, because by default webpack and node is replaced by esbuild. Now we can focus on developing the application in Elixir and Phoenix, without wasting time on breaking changes and nonsense security alerts in node dependencies.&lt;/p&gt; &lt;p&gt;In this post, I walked through how I upgraded my humble little Phoenix app to 1.6, with a focus on updating the asset pipeline to use esbuild and migrating to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEEx&lt;/code&gt; templates. Hope this helps someone who’s trying to do the same.&lt;/p&gt; &lt;p&gt;Phoenix 1.6 do have other new features that are not covered in this post. For those, make sure to check out the &lt;a href=&quot;https://www.phoenixframework.org/blog/phoenix-1.6-released&quot;&gt;release note&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you have a more complex workflow around building CSS, you might want to check out &lt;a href=&quot;https://gist.github.com/felix-starman/e038696c9c30d6596210980ce7de56c8&quot;&gt;this guide&lt;/a&gt;, which uses esbuild, postcss, tailwind and etc. It might not be exactly what you need, but it should offer you some good ideas.&lt;/p&gt;</content><author><name>Qing Wu</name><email>wiserfirst@gmail.com</email><uri>https://www.wiserfirst.com</uri></author><category term="elixir"/><category term="esbuild"/><category term="phoenix"/><category term="webpack"/><summary type="html">Say goodbye to webpack and Node in your Phoenix applications</summary></entry><entry><title type="html">Setup New Mac for Software Development</title><link href="https://www.wiserfirst.com/blog/setup-macbook-for-developers/" rel="alternate" type="text/html" title="Setup New Mac for Software Development"/><published>2021-09-07T11:35:00+10:00</published><updated>2021-09-18T12:50:00+10:00</updated><id>https://www.wiserfirst.com/blog/setup-macbook-for-developers</id><content type="html" xml:base="https://www.wiserfirst.com/blog/setup-macbook-for-developers/">&lt;p&gt;Many software developers use Mac computers for work or personal use. To start on a new Mac, the most convenient option is to transfer from an existing Mac or restore from a Time Machine backup. But from time to time, we still need to set it up as a brand new computer, maybe because an existing Mac isn’t available or we simply want to start fresh with the new laptop.&lt;/p&gt; &lt;p&gt;In this post, I’ll document what I consider the best way to setup a brand new Mac for software development. The primary purpose is to serve as a reference for my future self, but if some readers find it useful, that would be awesome too.&lt;/p&gt; &lt;p&gt;These are just based on my personal experience, so there is no guarantee they’ll work well for you too. If you find other better ways to do certain steps, please let me know in the public comment below or reach out to me directly.&lt;/p&gt; &lt;h2 id=&quot;step-1-install-homebrew&quot;&gt;Step 1: Install Homebrew&lt;/h2&gt; &lt;p&gt;I use Homebrew to install and manage most of command line tools and GUI apps.&lt;/p&gt; &lt;p&gt;Install it with:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/bin/bash &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This script is quite intelligent. It works on Intel or Apple Silicon based Macs and even Linux, and it installs Homebrew to different preferred prefixes based on the situation. For more information, please refer to the &lt;a href=&quot;https://docs.brew.sh/Installation&quot;&gt;Homebrew Installation guide&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;step-2-brew-bundle&quot;&gt;Step 2: brew bundle&lt;/h2&gt; &lt;p&gt;Manually installing all the packages needed on a new Mac is tedious, but luckily we don’t have to do that thanks to &lt;a href=&quot;https://github.com/Homebrew/homebrew-bundle&quot;&gt;Homebrew Bundle&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;One can create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Brewfile&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew bundle dump&lt;/code&gt; and then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew bundle&lt;/code&gt; to install and upgrade all packages from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Brewfile&lt;/code&gt;. For more details, please refer to &lt;a href=&quot;https://docs.brew.sh/Manpage#bundle-subcommand&quot;&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew bundle&lt;/code&gt; section of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew man&lt;/code&gt; output&lt;/a&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew bundle --help&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;I’ve saved a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Brewfile&lt;/code&gt; to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotfiles&lt;/code&gt; repository on Github, so I can just download it with:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-fL&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; Brewfile https://raw.githubusercontent.com/wiserfirst/dotfiles/master/Brewfile &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;And then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew bundle&lt;/code&gt; to install the packages.&lt;/p&gt; &lt;h2 id=&quot;step-3-add-ssh-key-to-github&quot;&gt;Step 3: Add SSH key to Github&lt;/h2&gt; &lt;p&gt;The next couple steps involve cloning from Github, so generating a new SSH key and adding it to my Github account is necessary.&lt;/p&gt; &lt;h3 id=&quot;generate-new-ssh-key&quot;&gt;Generate new SSH key&lt;/h3&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ed25519 &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;your_email@example.com&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Reference: &lt;a href=&quot;https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent&quot;&gt;Generating a new SSH key and adding it to the ssh-agent&lt;/a&gt;&lt;/p&gt; &lt;h3 id=&quot;add-to-github-account&quot;&gt;Add to Github account&lt;/h3&gt; &lt;p&gt;First copy your SSH public key to clipboard with&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pbcopy &amp;lt; ~/.ssh/id_ed25519.pub &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Then login to your Github account, go to Settings -&amp;gt; SSH and GPG keys -&amp;gt; New SSH key. Give it a title and paste your key into the “Key” field.&lt;/p&gt; &lt;p&gt;Reference: &lt;a href=&quot;https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account&quot;&gt;Adding a new SSH key to your Github account&lt;/a&gt;&lt;/p&gt; &lt;h2 id=&quot;step-4-install-my-dotfiles&quot;&gt;Step 4: Install my dotfiles&lt;/h2&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:wiserfirst/dotfiles.git &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;dotfiles ruby ./install.rb &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;step-5-install-maximum-awesome&quot;&gt;Step 5: Install maximum-awesome&lt;/h2&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:wiserfirst/maximum-awesome.git &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;maximum-awesome git checkout qing rake &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;For installing Vim plugins separately, just run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:PlugInstall&lt;/code&gt; in Vim.&lt;/p&gt; &lt;h2 id=&quot;step-6-install-asdf-vm-and-programming-languages&quot;&gt;Step 6: Install asdf-vm and programming languages&lt;/h2&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/asdf-vm/asdf.git ~/.asdf &lt;span class=&quot;nt&quot;&gt;--branch&lt;/span&gt; v0.8.1 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;If you don’t already have this in your zshrc, the following is needed:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n. $HOME/.asdf/asdf.sh'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n. $HOME/.asdf/completions/asdf.bash'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Now I’d like to install Erlang and Elixir:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf plugin-add erlang asdf plugin-add elixir &lt;span class=&quot;c&quot;&gt;# actual Openssl version depends on what's in `brew list`&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KERL_CONFIGURE_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--without-javac --with-ssl=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;brew &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt; openssl@1.1&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; asdf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;erlang 23.3.4 asdf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;elixir 1.12.3 asdf global erlang 23.3.4 asdf global elixir 1.12.3 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Obviously you could install whatever programming languages you need, be that Ruby, Node.js, Python or something else.&lt;/p&gt; &lt;p&gt;For more details on how to do that with asdf, check out my comprehensive guide: &lt;a href=&quot;/blog/how-to-use-asdf-on-macos/&quot;&gt;How to Use asdf Version Manager on macOS&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;step-7-install-prezto-and-set-zsh-as-default-shell&quot;&gt;Step 7: Install prezto and set zsh as default shell&lt;/h2&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt; https://github.com/sorin-ionescu/prezto.git &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ZDOTDIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.zprezto&quot;&lt;/span&gt; setopt EXTENDED_GLOB &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;rcfile &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ZDOTDIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;/.zprezto/runcoms/^README.md&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.N&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rcfile&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ZDOTDIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rcfile&lt;/span&gt;:t&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;chsh &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /bin/zsh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;step-8-install-fzf&quot;&gt;Step 8: Install fzf&lt;/h2&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt; 1 https://github.com/junegunn/fzf.git ~/.fzf ~/.fzf/install &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;step-10-preferences-in-gui&quot;&gt;Step 10: Preferences in GUI&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;iTerm &lt;ul&gt; &lt;li&gt;Profiles -&amp;gt; Colors -&amp;gt; Color Presets -&amp;gt; Solarized Dark&lt;/li&gt; &lt;li&gt;Profiles -&amp;gt; Text -&amp;gt; Font -&amp;gt; Size to 14&lt;/li&gt; &lt;li&gt;Profiles -&amp;gt; Terminal -&amp;gt; Scrollback Buffer -&amp;gt; tick “Unlimited scrollback”&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;System Preferences &lt;ul&gt; &lt;li&gt;Keyboard -&amp;gt; Modifier Keys -&amp;gt; Map “Caps lock” key to Escape&lt;/li&gt; &lt;li&gt;Trackpad -&amp;gt; Point &amp;amp; Click -&amp;gt; tick “Tap to click”&lt;/li&gt; &lt;li&gt;Accessibility -&amp;gt; Pointer Control -&amp;gt; Trackpad Options -&amp;gt; tick “Enable dragging” -&amp;gt; three finger drag&lt;/li&gt; &lt;li&gt;(Optional for external monitor) Displays -&amp;gt; (on the external monitor) Option + click “Scaled” and choose 2560 x 1440&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;step-11-ignore-new-system-update-optional&quot;&gt;Step 11: Ignore new system update (optional)&lt;/h2&gt; &lt;p&gt;If you are not ready to upgrade to the latest version of macOS, you can stop it from showing up in System Preferences -&amp;gt; Software Update with:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/sbin/softwareupdate &lt;span class=&quot;nt&quot;&gt;--ignore&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;macOS [version name]&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version name&lt;/code&gt; could be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Catalina&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Big Sur&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Monterey&lt;/code&gt;, depending on which you’d like to ignore.&lt;/p&gt; &lt;p&gt;When you are ready to install the new version, just restore it with:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/sbin/softwareupdate &lt;span class=&quot;nt&quot;&gt;--reset-ignored&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt; &lt;p&gt;After following the steps in this post, there may be things you still need to install or tweak, but the new Mac should be fairly close to be ready as the primary development machine.&lt;/p&gt; &lt;p&gt;Surely, these steps are going to evolve over time and I’ll try my best to keep them up-to-date. But again, I don’t do this very often, so they may get out of date.&lt;/p&gt; &lt;p&gt;Anyway, please feel free to take what you need and let me know what you think :slightly_smiling_face:&lt;/p&gt;</content><author><name>Qing Wu</name><email>wiserfirst@gmail.com</email><uri>https://www.wiserfirst.com</uri></author><category term="Apple"/><category term="Mac"/><category term="macos"/><summary type="html">Step by step guide for setting up a new Mac computer</summary></entry><entry><title type="html">Get Random Array Element in Typescript</title><link href="https://www.wiserfirst.com/blog/typescript-random-array-element/" rel="alternate" type="text/html" title="Get Random Array Element in Typescript"/><published>2021-07-24T16:35:00+10:00</published><updated>2021-07-24T16:35:00+10:00</updated><id>https://www.wiserfirst.com/blog/typescript-random-array-element</id><content type="html" xml:base="https://www.wiserfirst.com/blog/typescript-random-array-element/">&lt;p&gt;Recently I needed to be able to get a random element from an array. It was slightly surprising to me that the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;Javascript Array class&lt;/a&gt; doesn’t provide a built-in function for that.&lt;/p&gt; &lt;p&gt;In this post I talks about how I built a function to do that and also compared with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.sample&lt;/code&gt; function from the popular Javascript library &lt;a href=&quot;https://www.npmjs.com/package/lodash&quot;&gt;lodash&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;initial-implementation&quot;&gt;Initial Implementation&lt;/h2&gt; &lt;p&gt;I’m building it in Typescript, since the project I am working on already uses Typescript.&lt;/p&gt; &lt;p&gt;The function takes an array and returns a random element from it. The type of array element doesn’t matter here. So the function signature should be something like this:&lt;/p&gt; &lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;any&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;For an array, the lowest valid index is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; and the highest valid index is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arr.length - 1&lt;/code&gt;. I could generate an random integer between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arr.length - 1&lt;/code&gt;. Then if I use that number as index for the array, I could get back a random element. That should look like this:&lt;/p&gt; &lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;So we have our function:&lt;/p&gt; &lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getRandomElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;It does the job and it’s fairly straightforward. But there is actually a small issue, which I’ll address in later.&lt;/p&gt; &lt;h2 id=&quot;comparison-with-_sample&quot;&gt;Comparison with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.sample&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;After implementing it, I thought that there is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.sample&lt;/code&gt; function from the popular library &lt;a href=&quot;https://www.npmjs.com/package/lodash&quot;&gt;lodash&lt;/a&gt;, it would be interesting to see how it was implemented.&lt;/p&gt; &lt;p&gt;I’m going to look at the latest version of lodash, which is 4.17.21 as of this writing.&lt;/p&gt; &lt;p&gt;The &lt;a href=&quot;https://github.com/lodash/lodash/blob/4.17.21/lodash.js#L9820-L9837&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.sample&lt;/code&gt;&lt;/a&gt; function looks like this:&lt;/p&gt; &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/** * Gets a random element from `collection`. * * @static * @memberOf _ * @since 2.0.0 * @category Collection * @param {Array|Object} collection The collection to sample. * @returns {*} Returns the random element. * @example * * _.sample([1, 2, 3, 4]); * // =&amp;gt; 2 */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arraySample&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baseSample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Apparently it handles not only arrays but also collections in general.&lt;/p&gt; &lt;p&gt;I won’t worry about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;baseSample&lt;/code&gt; for collections that are not array in this article. But if you like, feel free to check out &lt;a href=&quot;https://github.com/lodash/lodash/blob/4.17.21/lodash.js#L3986-L3995&quot;&gt;its source&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For arrays, it delegates to a &lt;a href=&quot;https://github.com/lodash/lodash/blob/4.17.21/lodash.js#L2452-L2462&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arraySample&lt;/code&gt;&lt;/a&gt; function, which looks like this:&lt;/p&gt; &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/** * A specialized version of `_.sample` for arrays. * * @private * @param {Array} array The array to sample. * @returns {*} Returns the random element. */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arraySample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baseRandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;So it checks the array length, and if length is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;. Otherwise it’s very similar to my implementation: it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;baseRandom&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length - 1&lt;/code&gt; to (presumably) get a random integer, then use it as index for the array and gets a random element from the array.&lt;/p&gt; &lt;p&gt;In order for this to work, the &lt;a href=&quot;https://github.com/lodash/lodash/blob/4.17.21/lodash.js#L3910-L3921&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;baseRandom&lt;/code&gt;&lt;/a&gt; function must generate a random integer between its two arguments.&lt;/p&gt; &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/** * The base implementation of `_.random` without support for returning * floating-point numbers. * * @private * @param {number} lower The lower bound. * @param {number} upper The upper bound. * @returns {number} Returns the random number. */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;baseRandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lower&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nativeFloor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nativeRandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;upper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lower&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;And looks like it does!&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://github.com/lodash/lodash/blob/4.17.21/lodash.js#L1532&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nativeFloor&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/lodash/lodash/blob/4.17.21/lodash.js#L1542&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nativeRandom&lt;/code&gt;&lt;/a&gt; in here are just aliases for the built-in methods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.Floor&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.random&lt;/code&gt;.&lt;/p&gt; &lt;h2 id=&quot;improvement&quot;&gt;Improvement&lt;/h2&gt; &lt;p&gt;I’m glad to see that the core logic of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.sample&lt;/code&gt; for arrays is very similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRandomElement&lt;/code&gt; function I got. However, it did check the array length, which I forgot to do.&lt;/p&gt; &lt;p&gt;In my use case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRandomElement&lt;/code&gt; is just used as a test helper and the same non-empty array constant is always passed in, so omitting the array length check isn’t causing any issue for now.&lt;/p&gt; &lt;p&gt;But for completeness’ sake and also to allow it to be used in other scenarios in the future, I should add the array length check. So the function becomes:&lt;/p&gt; &lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getRandomElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt; &lt;p&gt;In this article, I walked through how to implement a function for getting a random element from an array, had a tour in lodash source code around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_.sample&lt;/code&gt; and improved the initial implementation by adding an array length check to make it more complete and robust.&lt;/p&gt; &lt;p&gt;Open source not only come in handy when we need to use them directly in our projects, but also serve as a great resource for learning.&lt;/p&gt; &lt;p&gt;I definitely should look more into source code of open source libraries and frameworks. Maybe you should too :smile:&lt;/p&gt;</content><author><name>Qing Wu</name><email>wiserfirst@gmail.com</email><uri>https://www.wiserfirst.com</uri></author><category term="Javascript"/><category term="Typescript"/><category term="mini-patterns"/><category term="array"/><category term="lodash"/><summary type="html">Typescript Mini-patterns</summary></entry><entry><title type="html">How to Use asdf Version Manager on macOS</title><link href="https://www.wiserfirst.com/blog/how-to-use-asdf-on-macos/" rel="alternate" type="text/html" title="How to Use asdf Version Manager on macOS"/><published>2021-05-15T19:35:00+10:00</published><updated>2021-09-05T17:30:00+10:00</updated><id>https://www.wiserfirst.com/blog/how-to-use-asdf-on-macos</id><content type="html" xml:base="https://www.wiserfirst.com/blog/how-to-use-asdf-on-macos/">&lt;p&gt;Last year, I wrote a post titled &lt;a href=&quot;/blog/install-java-with-asdf/&quot;&gt;Install Java with asdf&lt;/a&gt; and slightly surprising to me, it ended up becoming the most visited article on my personal blog. Given that, I decided to write another more complete guide to asdf. Even though this guide is meant for macOS, most things covered here should apply to Linux systems too, potentially with some minor tweaks.&lt;/p&gt; &lt;h2 id=&quot;why-asdf&quot;&gt;Why asdf&lt;/h2&gt; &lt;p&gt;Before we begin, let’s talk about why we might need it in the first place.&lt;/p&gt; &lt;p&gt;Say you work as a developer for a company and their tech stack is backend Ruby on Rails and frontend React. There are quite a number of repositories for different services and unsurprisingly not all of them use the same versions of Ruby or Node.js.&lt;/p&gt; &lt;p&gt;To manage the different versions of Ruby, &lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;rbenv&lt;/a&gt; is a good tool and for Node.js, you have &lt;a href=&quot;https://github.com/nvm-sh/nvm&quot;&gt;nvm&lt;/a&gt;. Then Python is introduced for some machine learning related tasks, so here comes &lt;a href=&quot;https://github.com/pyenv/pyenv&quot;&gt;pyenv&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Three tools to manage versions for three programming languages doesn’t sound too bad, but they all have slightly different command syntax for you to remember and use from time to time. The situation only gets worse with more languages introduced to the mix. For example, what if you want to build a side project with Elixir/Phoenix or learn some Rust.&lt;/p&gt; &lt;p&gt;One version manager for each programming language is still okay for three languages, but once the number reaches five or six, it becomes too much effort.&lt;/p&gt; &lt;h3 id=&quot;asdf-to-the-rescue&quot;&gt;asdf to the rescue&lt;/h3&gt; &lt;p&gt;Luckily there is asdf and you can replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rbenv&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nvm&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv&lt;/code&gt; and more with just this one tool.&lt;/p&gt; &lt;p&gt;Thanks to its plugin system, asdf is extendable enough for you to install and manage versions of almost all programming languages that you might want to use. And with asdf you only need to learn one set of simple commands to do that.&lt;/p&gt; &lt;p&gt;Furthermore, if you’d like to manage something and there isn’t yet a plugin for it, it’s possible to &lt;a href=&quot;https://asdf-vm.com/#/plugins-create&quot;&gt;create a plugin&lt;/a&gt; yourself.&lt;/p&gt; &lt;p&gt;With a relatively small core and the powerful plugin system, asdf offers nearly infinite possibilities.&lt;/p&gt; &lt;h2 id=&quot;install-asdf&quot;&gt;Install asdf&lt;/h2&gt; &lt;p&gt;First make sure that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;coreutils&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; are installed:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;coreutils curl git &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;install-with-git&quot;&gt;Install with Git&lt;/h3&gt; &lt;p&gt;Personally I prefer installing asdf with Git, because it gives complete control and avoids some pitfalls.&lt;/p&gt; &lt;p&gt;Cloning the latest tag is enough:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/asdf-vm/asdf.git ~/.asdf &lt;span class=&quot;nt&quot;&gt;--branch&lt;/span&gt; v0.8.1 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v0.8.1&lt;/code&gt; is the latest tag as of September 2021, but obviously that would change over time, so make sure to check its &lt;a href=&quot;https://github.com/asdf-vm/asdf/tags&quot;&gt;Github repository&lt;/a&gt; for that before you install.&lt;/p&gt; &lt;p&gt;Then for Zsh add the following to the bottom of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.asdf/asdf.sh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Open a new terminal tab and you should be ready to use asdf :tada:&lt;/p&gt; &lt;h3 id=&quot;install-with-homebrew&quot;&gt;Install with Homebrew&lt;/h3&gt; &lt;p&gt;The alternative is to install asdf with Homebrew:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;asdf &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;If you prefer this method, before continuing, do check out &lt;a href=&quot;https://github.com/asdf-vm/asdf/issues/785&quot;&gt;Common Homebrew issues&lt;/a&gt; to be aware of potential issues you might run into.&lt;/p&gt; &lt;p&gt;And add the following line to the bottom of your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;brew &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt; asdf&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;/asdf.sh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;blockquote&gt; &lt;p&gt;If you use Bash or Fish shell, please refer to the &lt;a href=&quot;https://asdf-vm.com/#/core-manage-asdf?id=add-to-your-shell&quot;&gt;Add to your Shell&lt;/a&gt; section in asdf documentation for instructions.&lt;/p&gt; &lt;/blockquote&gt; &lt;h2 id=&quot;manage-plugins&quot;&gt;Manage Plugins&lt;/h2&gt; &lt;p&gt;Before you could install Ruby, Node.js or anything else, you’ll need to add the appropriate plugins. Plugins are how asdf understands handling of different programming languages or, say, packages.&lt;/p&gt; &lt;p&gt;There is an &lt;a href=&quot;https://asdf-vm.com/#/plugins-all&quot;&gt;asdf plugins repository&lt;/a&gt; and for all the plugins listed there, you can add with just the plugin name. For example, here is how to add the plugins for Ruby and Node.js:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf plugin add ruby asdf plugin add nodejs &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;If the plugin you want is not part of this repository, you can still add it with its repository URL. For example:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf plugin-add elm https://github.com/vic/asdf-elm &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;You can list installed plugins with:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf plugin list &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Or list all available plugins from the asdf plugin repository:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf plugin list-all &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;manage-language-versions&quot;&gt;Manage Language Versions&lt;/h2&gt; &lt;p&gt;If you’ve looked through the asdf plugin repository, you may have noticed that there are plugins not only for programming languages, but also for many other cli tools like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fzf&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube&lt;/code&gt; etc.&lt;/p&gt; &lt;p&gt;For the purpose of our discussion here, whether it’s a programming language or something else doesn’t really matter, because the commands for managing them are going to be the same. I’ll just refer to them as programming languages in this post, but please keep in mind that you could use asdf to manage other cli tools as well.&lt;/p&gt; &lt;h3 id=&quot;install-versions&quot;&gt;Install Versions&lt;/h3&gt; &lt;p&gt;Suppose we want to install the latest stable release of Ruby 2 and the latest LTS release of Node.js, which are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.7.2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;14.16.1&lt;/code&gt; respectively as of this writing. We can simply run the following:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby 2.7.2 asdf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nodejs 14.16.1 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;blockquote&gt; &lt;p&gt;When you run into issues trying to install a particular language version, make sure to check out the Github repository for the plugin. It’s very likely that you’ll find instructions on how to solve those issues.&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id=&quot;set-global-versions&quot;&gt;Set Global Versions&lt;/h3&gt; &lt;p&gt;After installing the first versions, you might also want to set them as global versions for Ruby and Node.js:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf global ruby 2.7.2 asdf global nodejs 14.16.1 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;With this, we’ve made Ruby &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.7.2&lt;/code&gt; and Node.js &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;14.16.1&lt;/code&gt; “globally” available for the current user.&lt;/p&gt; &lt;p&gt;In asdf terms, “global” means default everywhere. So unless it’s overridden with either a local or shell version, which are covered in the following sections, asdf will assume the global version is the one to use.&lt;/p&gt; &lt;h3 id=&quot;set-local-versions-optional&quot;&gt;Set Local Versions (Optional)&lt;/h3&gt; &lt;p&gt;Suppose we have a legacy project that we need to maintain and it only runs on Node.js 10. What we can do with asdf is to install Node.js 10 and set a local version in the project directory:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nodejs 10.22.0 &lt;span class=&quot;c&quot;&gt;# run in the project directory&lt;/span&gt; asdf &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;nodejs 10.22.0 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;With this local version set, when you are in the legacy project directory or its subdirectories, asdf will automatically switch to Node.js version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.22&lt;/code&gt;; when you are in any other directories, it’ll fallback to the global Node.js version, unless of course if there is another local Node.js version set.&lt;/p&gt; &lt;h3 id=&quot;set-shell-version-optional&quot;&gt;Set Shell Version (Optional)&lt;/h3&gt; &lt;p&gt;I had a fairly interesting situation at work recently. On this project, the backend server and frontend client each lives in a subdirectory in the same repository and we are in the process of developing a new client app to replace the old one.&lt;/p&gt; &lt;p&gt;Normally I just run the server and new client, both of which run on Node.js 14. This time I needed to run the old client to confirm some behaviours on a page, but it requires Node.js 10.&lt;/p&gt; &lt;p&gt;In order to run the old client together with the server, I made another copy of the whole project, set a local Node.js version to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.22.0&lt;/code&gt; in the new directory and run the old client. For the server, since the local Node.js version is already set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;14.16.1&lt;/code&gt; in the original project directory, I could still start it in as normal.&lt;/p&gt; &lt;p&gt;That certainly worked fine for me. But later I learned that there is a much simpler way: to use an asdf shell version. Without making an extra copy of the project, I could simply start a new shell session in the project directory and set a shell version for Node.js by:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;path/to/project asdf shell nodejs 10.22.0 &lt;span class=&quot;c&quot;&gt;# run old client&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This shell version only affects the current shell session, nothing else.&lt;/p&gt; &lt;p&gt;As for the server, just run it in another shell session would do.&lt;/p&gt; &lt;h3 id=&quot;quick-recap&quot;&gt;Quick Recap&lt;/h3&gt; &lt;p&gt;So basically asdf allows you to select different versions of programming languages on a per directory basis, and on top of that you have the option to set a shell version which only affects the current shell session.&lt;/p&gt; &lt;p&gt;I think that should be flexible enough for anyone to cope with most of (if not all) the situations they’ll ever encounter.&lt;/p&gt; &lt;h2 id=&quot;under-the-hood&quot;&gt;Under the Hood&lt;/h2&gt; &lt;div style=&quot;margin: auto; text-align: center; width: 100%;&quot;&gt; &lt;figure style=&quot;display: block&quot;&gt; &lt;img src=&quot;/assets/images/2021-05-15/underhood_1024_540.jpg&quot; alt=&quot;Mustang car with open hood&quot; /&gt; &lt;figcaption style=&quot;text-align: center;&quot;&gt; Blue Mustang Coupe with Hood Open by &lt;a href=&quot;https://unsplash.com/@aliivan&quot;&gt;Alison Ivansek&lt;/a&gt; from &lt;a href=&quot;https://unsplash.com/photos/HAI-GVIEvSQ&quot;&gt;Unsplash&lt;/a&gt; &lt;/figcaption&gt; &lt;/figure&gt; &lt;/div&gt; &lt;p&gt;To someone who’s new that might sound like magic, but in fact how asdf works is actually quite straightforward.&lt;/p&gt; &lt;h3 id=&quot;global-versions&quot;&gt;Global Versions&lt;/h3&gt; &lt;p&gt;When you set a global version for a programming language, it’ll add or update a line for the language in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-versions&lt;/code&gt; file under the current user’s home directory. If the file doesn’t already exist, it’ll create it first and then add the new line.&lt;/p&gt; &lt;p&gt;If you’ve followed this post to install asdf, install Ruby and Node.js, and then set the global versions, your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-versions&lt;/code&gt; file in home directory should look like the following:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# cat ~/.tool-versions&lt;/span&gt; nodejs 14.16.1 ruby 2.7.2 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;local-versions&quot;&gt;Local Versions&lt;/h3&gt; &lt;p&gt;When you set a local version in a directory, asdf will add or update a line for the language in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-versions&lt;/code&gt; file under that directory. Same as the global &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-versions&lt;/code&gt; file, it’ll be created if not exist already.&lt;/p&gt; &lt;p&gt;Say you do have that legacy project where Node.js &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.22&lt;/code&gt; is required and therefore you’ve set a local version for Node.js in the project directory. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-versions&lt;/code&gt; file under the project directory should look like this:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# cd path/to/project&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# cat ~/.tool-versions&lt;/span&gt; nodejs 10.22.0 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;If you’re working on a personal project or your team has adopted asdf, it would be a very good idea to commit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-version&lt;/code&gt; file to Git or the version control system you use.&lt;/p&gt; &lt;p&gt;On the other hand, if your team hasn’t reached an agreement on adopting asdf, I’d recommend adding it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; and keeping it locally without committing to version control. The &lt;a href=&quot;/blog/how-to-use-asdf-on-macos/#migrate-from-legacy-tools&quot;&gt;Migrate from Legacy Tools&lt;/a&gt; section might offer more useful information, if you found yourself in situations like this.&lt;/p&gt; &lt;h3 id=&quot;shell-versions&quot;&gt;Shell Versions&lt;/h3&gt; &lt;p&gt;How shell versions work is even simpler in my opinion. When you set one, asdf will set an environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASDF_${LANG}_VERSION&lt;/code&gt; for the current session.&lt;/p&gt; &lt;p&gt;For example, when I set a shell version for Node.js to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.22.0&lt;/code&gt;, asdf creates an environment variable named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASDF_NODEJS_VERSION&lt;/code&gt; with value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.22.0&lt;/code&gt; in my shell session.&lt;/p&gt; &lt;p&gt;Given that’s how it works, setting the environment variable for a particular language directly in a shell session or even for just one command would work too.&lt;/p&gt; &lt;p&gt;The following example starts the Rails server with Ruby version &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.5.3&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ASDF_RUBY_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2.5.3 bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails server &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;current-versions&quot;&gt;Current Versions&lt;/h3&gt; &lt;p&gt;When you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node&lt;/code&gt; for example, asdf will look for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-versions&lt;/code&gt; file in the current directory, then the parent directory, then parent’s parent directory etc. If it does find one and a local Node.js version is specified, it’ll use that version. In the case it couldn’t find one, it’ll fallback to the global version set in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-versions&lt;/code&gt; file under the current user’s home directory. So the logic is quite straightforward.&lt;/p&gt; &lt;p&gt;You could run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asdf current&lt;/code&gt; to get a list of current versions of installed programming languages in the current directory. For example, say we are in the legacy project directory, where a local Node.js version is set, but no Ruby version is set. What you get should be something like this:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# asdf current&lt;/span&gt; nodejs 10.22.0 /Users/username/workspace/legacy-project/.tool-versions ruby 2.7.2 /Users/username/.tool-versions &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Whereas if you run it in another directory, assuming no local versions are set, what you get is slightly different:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# asdf current&lt;/span&gt; nodejs 14.16.1 /Users/username/.tool-versions ruby 2.7.2 /Users/username/.tool-versions &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;As you can see, in the output, it not only tells you what the current versions are, but also shows from which &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-versions&lt;/code&gt; file asdf got each version.&lt;/p&gt; &lt;p&gt;I reckon this command could come in handy when you try to figure out where a particular local version is set.&lt;/p&gt; &lt;h2 id=&quot;use-asdf-in-a-team&quot;&gt;Use asdf in a Team&lt;/h2&gt; &lt;p&gt;Coming back to the scenario mentioned at the beginning of this article, where you work for a company which uses Ruby on Rails for backend and React for frontend and different projects might have different language version requirements.&lt;/p&gt; &lt;p&gt;After introducing asdf you no longer have to deal with different tools for managing versions of different programming languages, which is great. But obviously when starting to work on a different project for the first time, everyone still need to get the correct local versions installed.&lt;/p&gt; &lt;p&gt;What I used to do is to check out what are the versions specified in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-versions&lt;/code&gt; file of the project and then manually install them. For example, if the file has&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nodejs 10.22.0 ruby 2.5.3 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Running the following should do it:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nodejs 10.22.0 asdf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby 2.5.3 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;But this feels slightly tedious and it is.&lt;/p&gt; &lt;p&gt;Luckily as it turns out there is a much better way: running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asdf install&lt;/code&gt; without any arguments. If a required version is not installed yet, asdf will go ahead and install it; if a version is already installed, it will tell you that and does nothing.&lt;/p&gt; &lt;p&gt;I think this is a rather neat trick for installing the specified local versions for a project, therefore it makes this aspect of onboarding new team members to a project pretty much painless.&lt;/p&gt; &lt;h2 id=&quot;migrate-from-legacy-tools&quot;&gt;Migrate from Legacy Tools&lt;/h2&gt; &lt;p&gt;If you are sold on asdf but for whatever reason can’t adopt it at work, there is a configuration option that could allow you to still use it.&lt;/p&gt; &lt;p&gt;What you need to do is to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.asdfrc&lt;/code&gt; file in your home directory with the following content:&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;legacy_version_file &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Setting this to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yes&lt;/code&gt; will cause asdf plugins to read “legacy” version files, for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ruby-versions&lt;/code&gt; for Ruby and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.nvmrc&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.node-versions&lt;/code&gt; for Node.js.&lt;/p&gt; &lt;p&gt;This is especially helpful when you are in a team where your teammates don’t want to change to a different tool for managing the programming languages. Change is hard even when there are obviously benefits, so expect resistance if people are not already familiar with asdf.&lt;/p&gt; &lt;p&gt;With this setting though, they can continue to use the legacy tools they prefer, but you would have the option to use asdf if you want.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Note: not all plugins support this feature. If you rely on this behaviour, please do check the documentation of the plugins you use.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Hopefully one day they’ll start noticing conveniences of asdf and change their minds, at which point the whole team could fully adopt asdf and enjoy the benefits it brings.&lt;/p&gt; &lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt; &lt;p&gt;In this post, I covered:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;how to install asdf&lt;/li&gt; &lt;li&gt;how to add plugins&lt;/li&gt; &lt;li&gt;how to manage versions&lt;/li&gt; &lt;li&gt;how versions work under the hood&lt;/li&gt; &lt;li&gt;how asdf fits in a team setting&lt;/li&gt; &lt;li&gt;how to use asdf with legacy tools&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;While there are definitely aspects of asdf that I didn’t cover, this should be a solid starting point for someone new. After reading this post and following along, you should be able to start using asdf with confidence. If you do run into issues, check out &lt;a href=&quot;https://asdf-vm.com/#/core-manage-asdf&quot;&gt;asdf documentation&lt;/a&gt; and Google is your friend.&lt;/p&gt; &lt;p&gt;With asdf, one could manage different versions of all the programming languages that they might need without any trouble, and also it makes sharing a common set of programming language versions across a team for a project very easy.&lt;/p&gt; &lt;p&gt;Because of the conveniences it offers, I’m a big fan of asdf and I truly believe that every developer should use it or at least know it as a potential option to consider.&lt;/p&gt;</content><author><name>Qing Wu</name><email>wiserfirst@gmail.com</email><uri>https://www.wiserfirst.com</uri></author><category term="asdf"/><category term="version-manager"/><category term="macos"/><category term="ruby"/><category term="nodejs"/><category term="python"/><summary type="html">Discover a fantastic version manager for programming languages</summary></entry><entry><title type="html">Converting mov/avi to mp4 with ffmpeg</title><link href="https://www.wiserfirst.com/blog/converting-mov-to-mp4-ffmpeg/" rel="alternate" type="text/html" title="Converting mov/avi to mp4 with ffmpeg"/><published>2021-04-02T12:50:00+11:00</published><updated>2021-05-16T17:40:00+10:00</updated><id>https://www.wiserfirst.com/blog/converting-mov-to-mp4-ffmpeg</id><content type="html" xml:base="https://www.wiserfirst.com/blog/converting-mov-to-mp4-ffmpeg/">&lt;p&gt;Since I have a camera that captures video in Quicktime movie format, I end up with a lot of .mov videos. While it’s a reasonable format, it does have a big drawback: the video files are really big and therefore my SSD is running out of space.&lt;/p&gt; &lt;p&gt;In order to save some space, I’d like to convert the .mov files to .mp4.&lt;/p&gt; &lt;p&gt;There are various online tools that I can use for the conversion, but uploading the original videos and downloading the resulting videos would take a long time, especially considering I have multiple videos that are several Gigabytes. So the online tools aren’t right for me.&lt;/p&gt; &lt;p&gt;Luckily there is a neat cli tool named &lt;a href=&quot;https://www.ffmpeg.org/&quot;&gt;ffmpeg&lt;/a&gt; that can do the trick. If you don’t already have it, you can install (on macOS) by&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ffmpeg &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Or if you are on Linux, most likely you can install it with your package manager; if not, go to its &lt;a href=&quot;https://www.ffmpeg.org/download.html&quot;&gt;download page&lt;/a&gt; to find the appropriate installer.&lt;/p&gt; &lt;p&gt;To convert a .mov file to .mp4, you can run&lt;/p&gt; &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ffmpeg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; input-video-name.mov &lt;span class=&quot;nt&quot;&gt;-vcodec&lt;/span&gt; h264 output-video-name.mp4 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;For more details, please refer to the &lt;a href=&quot;https://www.ffmpeg.org/ffmpeg.html&quot;&gt;ffmpeg documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This is good enough if there are only a handful of videos to convert, but it can become tedious to run the command manually for say 20 videos. So I created a quick and dirty Ruby script for converting all the .mov or .avi videos in a directory. And yes, thanks to ffmpeg, the same command can work with .avi videos as well.&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;usage&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HEREDOC&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; Usage: ./video-converter.rb [dir] to convert mov/avi files to mp4 with H.264 video codec and AAC audio codec&quot; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt; HEREDOC&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exist?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\e&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[31mDirectory &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; not found&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\e&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[0m&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*.{avi,mov}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\e&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[32mConverting &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.mp4&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\e&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[0m&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ffmpeg -i &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -vcodec h264 &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.mp4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;I understand there are various ways to improve this script to make it more flexible/robust, but for now this is good enough for my purpose and hopefully it is useful for someone else too.&lt;/p&gt;</content><author><name>Qing Wu</name><email>wiserfirst@gmail.com</email><uri>https://www.wiserfirst.com</uri></author><category term="ffmpeg"/><category term="mov"/><category term="avi"/><category term="mp4"/><summary type="html">Explore a great cli tool for converting between video formats</summary></entry><entry><title type="html">Vim Tip: Fix Legacy Parser Warning for snipMate</title><link href="https://www.wiserfirst.com/blog/vim-tip-snipmate-legacy-parser-warning/" rel="alternate" type="text/html" title="Vim Tip: Fix Legacy Parser Warning for snipMate"/><published>2021-03-13T10:40:00+11:00</published><updated>2021-05-16T17:35:00+10:00</updated><id>https://www.wiserfirst.com/blog/vim-tip-snipmate-legacy-parser-warning</id><content type="html" xml:base="https://www.wiserfirst.com/blog/vim-tip-snipmate-legacy-parser-warning/">&lt;p&gt;If you use both Vim and snipMate, and upgraded snipMate to the latest version recently, you might encounter a warning:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;The legacy SnipMate parser is deprecated. Please see :h SnipMate-deprecate&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;If you follow the instruction and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:h SnipMate-deprecate&lt;/code&gt;, you’ll see the following in a help window:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;The legacy parser, version 0, is deprecated. It is currently still the default parser, but that will be changing. NOTE that switching which parser you use could require changes to your snippets–see the previous section.&lt;/p&gt; &lt;p&gt;To continue using the old parser, set g:snipMate.snippet_version (see |SnipMate-options|) to 0 in your |vimrc|.&lt;/p&gt; &lt;p&gt;Setting g:snipMate.snippet_version to either 0 or 1 will remove the start up message. One way this can be done–to use the new parser–is as follows:&lt;/p&gt; &lt;p&gt;let g:snipMate = { ‘snippet_version’ : 1 }&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Basically there is a new parser in snipMate, but the deprecated legacy parser is still the default, which would cause this warning. Explicitly setting the parser version to either 0 for the old parser or 1 for the new parser would remove this start up warning message.&lt;/p&gt; &lt;p&gt;There doesn’t seem to be a reason not to use the new parser, so I just added the following in my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:snipMate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'snippet_version'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Now the annoying warning upon starting Vim is gone :tada:&lt;/p&gt;</content><author><name>Qing Wu</name><email>wiserfirst@gmail.com</email><uri>https://www.wiserfirst.com</uri></author><category term="tiny-tips"/><category term="vim"/><summary type="html">A quick tip for resolving a warning message from snipMate</summary></entry><entry><title type="html">Git Tip: Prune Stale Remote References</title><link href="https://www.wiserfirst.com/blog/git-tip-prune-stale-remote-references/" rel="alternate" type="text/html" title="Git Tip: Prune Stale Remote References"/><published>2020-10-31T19:20:00+11:00</published><updated>2021-05-16T18:15:00+10:00</updated><id>https://www.wiserfirst.com/blog/git-tip-prune-stale-remote-references</id><content type="html" xml:base="https://www.wiserfirst.com/blog/git-tip-prune-stale-remote-references/">&lt;p&gt;When a colleague pushes a new branch to Github, we can run the following to get it locally:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git pull &lt;span class=&quot;c&quot;&gt;# or git fetch&lt;/span&gt; git checkout &amp;lt;branch-name&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This works because git uses what’s called “remote references” to keep track of the last known state of remote branches, which are essentially read-only bookmarks. In this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; would create a new remote reference for the new remote branch apart from updating existing remote references. Then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout ...&lt;/code&gt; would create a new local branch that tracks the new remote branch and switch to it.&lt;/p&gt; &lt;p&gt;That’s all well and good until there are too many branches in the codebase, which is not at all uncommon when working in a reasonably sized team. Git automatically creates remote references for all known remote branches, but it doesn’t automatically remove stale remote references when the remote branches are deleted. This annoys me because the stale remote references might mess with my auto-completion for branch names. After some Googling, I managed to find a way to remove them for the default remote connection &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;origin&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote prune origin &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Also the following command lists remote references:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote show origin &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;After sharing my findings with my colleagues, they pointed out that passing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--prune&lt;/code&gt; option to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; would do the trick as well. As mentioned in this nice &lt;a href=&quot;https://www.atlassian.com/git/tutorials/git-prune&quot;&gt;tutorial for git prune&lt;/a&gt;, the following:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git fetch &lt;span class=&quot;nt&quot;&gt;--prune&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;is the same as:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git fetch &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git remote prune &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Qing Wu</name><email>wiserfirst@gmail.com</email><uri>https://www.wiserfirst.com</uri></author><category term="tiny-tips"/><category term="git"/><summary type="html">A Git tip that I didn't know before and I find it very useful at times</summary></entry><entry><title type="html">Migrating Blog to Jekyll</title><link href="https://www.wiserfirst.com/blog/migrating-blog-to-jekyll/" rel="alternate" type="text/html" title="Migrating Blog to Jekyll"/><published>2020-10-26T16:31:00+11:00</published><updated>2021-05-16T18:22:00+10:00</updated><id>https://www.wiserfirst.com/blog/migrating-blog-to-jekyll</id><content type="html" xml:base="https://www.wiserfirst.com/blog/migrating-blog-to-jekyll/">&lt;p&gt;Back in 2010, I started blogging on &lt;a href=&quot;https://wordpress.com/&quot;&gt;WordPress&lt;/a&gt;. The reason was simple, I thought since it is the world’s most popular blogging system, it should offer reasonably good user experience. But to my surprise, The UI wasn’t that great especially for technical posts with code snippets. Having done no web development at all back then, I just had to cope with it.&lt;/p&gt; &lt;p&gt;Fast forward to 2012, I started doing web development with ASP.NET/C#. My former colleagues &lt;a href=&quot;https://twitter.com/jun_cn&quot;&gt;Yijun Xu&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/aqi678&quot;&gt;Jianguo Ning&lt;/a&gt; at the time were creating their blog sites with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; + &lt;a href=&quot;https://github.com/octopress/octopress&quot;&gt;Octopress&lt;/a&gt; and hosted on &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; under custom domains. So with their help, I managed to do the same. I really liked the result, because for me writing markdown felt more in control than fiddling with WordPress’ WYSIWYG interface. My old Jekyll blog was using a theme named &lt;a href=&quot;https://github.com/muan/scribble&quot;&gt;Scribble&lt;/a&gt;. I liked the fact that it was a fairly minimalist theme, but there were things I had hoped to be different. For example, when viewed on a modern computer, the viewing area was too narrow. While syntax highlighting for code snippets was possible, the color schema wasn’t the best. Having said all that though, it was probably the best I could have done. I was still new as a web developer by then and my frontend skills are fairly limited, so designing or customising a Jekyll theme was too far-fetched for me.&lt;/p&gt; &lt;p&gt;After not blogging for the whole 2016, I started writing super short posts on &lt;a href=&quot;https://medium.com/@wiserfirst&quot;&gt;Medium&lt;/a&gt; in early 2017, because those are more approachable than longer form articles. I was quite impressed by Medium’s editing interface, which is a fine balance between markdown and WYSIWYG and the published articles look gorgeous as well. So I was happy with Medium for a few years, until they started to enforce what they call a “&lt;a href=&quot;https://help.medium.com/hc/en-us/articles/360017581433-About-the-metered-paywall&quot;&gt;metered paywall&lt;/a&gt;”. Of course there was a rational behind the &lt;a href=&quot;https://blog.medium.com/the-medium-model-3ec28c6f603a&quot;&gt;Medium Model&lt;/a&gt; and to be honest, that was a nice idea, but still I wasn’t a fan. I write to share what I’ve learnt and I want my writings freely available for everyone who’s interested. So naturally any form of paywalls are at odds with my purpose for writings.&lt;/p&gt; &lt;p&gt;A few months ago, I finally decided 2020 is the year to stop putting up with the platform with a paywall and to migrate my personal blog back to Jekyll. Apparently Jekyll has improved massively over the past eight years in terms of user experience. Kudos to the &lt;a href=&quot;https://jekyllrb.com/team/&quot;&gt;Jekyll team&lt;/a&gt; :+1:! Also I received lots of help from &lt;a href=&quot;https://twitter.com/paulfioravanti&quot;&gt;Paul&lt;/a&gt; and the &lt;a href=&quot;https://github.com/paulfioravanti/paulfioravanti.github.io&quot;&gt;source for his blog&lt;/a&gt; at &lt;a href=&quot;https://www.paulfioravanti.com&quot;&gt;paulfioravanti.com&lt;/a&gt; was a great resource to learn from. I ended up picking the same theme &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;Minimal Mistakes&lt;/a&gt;, but chose the dark skin because I like dark mode for everything. Since I got help again, setting up the blog itself was a pleasant task.&lt;/p&gt; &lt;h2 id=&quot;content-migration&quot;&gt;Content Migration&lt;/h2&gt; &lt;p&gt;Because of the phases of my blogging journey, I have content in three different forms, which means I’ll need to migrate them in different ways too.&lt;/p&gt; &lt;h3 id=&quot;wordpress&quot;&gt;WordPress&lt;/h3&gt; &lt;p&gt;Posts in WordPress can be exported in XML format and then there is a node tool called &lt;a href=&quot;https://github.com/lonekorean/wordpress-export-to-markdown&quot;&gt;wordpress-export-to-markdown&lt;/a&gt; that can help convert them into markdown.&lt;/p&gt; &lt;p&gt;First login to the WordPress admin console and navigate to the “Export Content” page via Tools -&amp;gt; Export . Then hitting the “Export all” button should get all the posts in WordPress exported in a single XML file.&lt;/p&gt; &lt;p&gt;Next run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wordpress-export-to-markdown&lt;/code&gt; with npx to convert the posts from XML into markdown:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npx wordpress-export-to-markdown &lt;span class=&quot;nt&quot;&gt;--input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;path-to-your-export-file.xml &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Or another option is to clone the repository and run it locally, which makes repeated runs much faster:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:lonekorean/wordpress-export-to-markdown.git &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;wordpress-export-to-markdown npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;node index.js &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The nice thing about this tool is by default it starts in wizard mode and asks about any options not provided on the command line. To learn more about available options, head over to &lt;a href=&quot;https://github.com/lonekorean/wordpress-export-to-markdown&quot;&gt;its Github repository&lt;/a&gt;. Also &lt;a href=&quot;https://kevq.uk/how-to-convert-wordpress-to-markdown/&quot;&gt;How To Convert WordPress To Markdown&lt;/a&gt; by Kev Quirk covers converting WordPress to markdown in great details. You might want to check it out.&lt;/p&gt; &lt;h3 id=&quot;jekyll&quot;&gt;Jekyll&lt;/h3&gt; &lt;p&gt;For posts from my old Jekyll blog, it should have been straightforward because they were originally written in markdown already. But regrettably for some reason I only put the generated site in the blog repository on Github without the markdown files, so the HTML files were what I had to work with. That was definitely more work than if I could just copy over the original markdown files, but I found an online tool called &lt;a href=&quot;https://mixmark-io.github.io/turndown/&quot;&gt;Turndown&lt;/a&gt; to convert HTML to Markdown, which made working on this much more tolerable. It also offer options to choose heading style, code block style and etc., which I found quite handy.&lt;/p&gt; &lt;p&gt;For each of my old Jekyll posts, I had to paste in the HTML source and copy the markdown output into a new file. That was quite repetitive for sure, but since there was only less than ten posts in this category, it wasn’t too bad. This time around, I wouldn’t make the same mistake. The source of my blog is in &lt;a href=&quot;https://github.com/wiserfirst/wiserfirst.github.io&quot;&gt;this repository&lt;/a&gt;. Hopefully open-soucing the blog itself would make the life of future me a bit easier and might even help others too.&lt;/p&gt; &lt;h3 id=&quot;medium&quot;&gt;Medium&lt;/h3&gt; &lt;p&gt;Lastly it comes to migrating my posts in Medium and for that there is an npm package named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mediumexporter&lt;/code&gt;. First install it with&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; mediumexporter &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Then run it with&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mediumexporter https://url-to-the-medium-post-to-export &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; exported_post.md &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Similar to Turndown, I had to go through all my Medium posts one by one with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mediumexporter&lt;/code&gt;. Again there was less than ten, so it was okay.&lt;/p&gt; &lt;p&gt;If you’d like more details about exporting Medium posts to markdown, check out &lt;a href=&quot;https://medium.com/@macropus/export-your-medium-posts-to-markdown-b5ccc8cb0050&quot;&gt;Export your Medium posts to Markdown&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;content-adjustment&quot;&gt;Content Adjustment&lt;/h2&gt; &lt;p&gt;After getting the content as markdown from the three sources, I still need to make various adjustments.&lt;/p&gt; &lt;h3 id=&quot;front-matter&quot;&gt;Front Matter&lt;/h3&gt; &lt;p&gt;Most posts exported from the above tools do not include Jekyll front matter and even when front matter is included, it doesn’t have the relevant tags. So I’d like to add front matter with title, date and tags to all posts, which would look like the following:&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Understanding&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Use&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Statement&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Elixir&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Examples&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2015-10-14&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elixir use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;style-consistency&quot;&gt;Style Consistency&lt;/h3&gt; &lt;p&gt;As mentioned earlier, Turndown supports choosing markdown styles for heading, code block, etc., which is handy. But unfortunately, the other two export tools doesn’t provide such options, therefore I had to make manual adjustments in order to keep the style consistent.&lt;/p&gt; &lt;p&gt;For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mediumexporter&lt;/code&gt; uses indentation for code blocks:&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; asdf plugin-add java &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;But I prefer fenced with back ticks:&lt;/p&gt; &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;```&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;bash &lt;/span&gt;asdf plugin-add java &lt;span class=&quot;p&quot;&gt;```&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;updating-stale-links&quot;&gt;Updating Stale Links&lt;/h3&gt; &lt;p&gt;I have been blogging on and off for ten years, which is a long time. Unfortunately during that time many of the sites that I originally linked to are no longer live, so there are a fair number of stale links in my posts. For some of the linked pages, the site was moved and I was able to find their new home then update to the new links. For others the site was simply gone, but I still kept the stale links as plain text maybe just to note that there used to be this article on the Internet.&lt;/p&gt; &lt;p&gt;Also even for the valid links, after all these years the content might be out-of-date or even irrelevant. Sadly there is not much I could do about that. Like it or not, nothing lasts for ever in this world.&lt;/p&gt; &lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt; &lt;p&gt;In this post, I briefly went through my blogging journey over the past ten years, noted down how I migrated content from three different sources to the current Jekyll blog and the various adjustments that were made.&lt;/p&gt; &lt;p&gt;Hopefully this would serve as a reference for people who want to do the same and might even be helpful for my future self as well.&lt;/p&gt; &lt;p&gt;Again I’d like to thank Paul, Yijun and Jianguo for their generous help, thank the authors to the articles I referenced for sharing their knowledge for free and thank the creators and contributors of the open source tools I used for their great work.&lt;/p&gt;</content><author><name>Qing Wu</name><email>wiserfirst@gmail.com</email><uri>https://www.wiserfirst.com</uri></author><category term="jekyll"/><category term="blog"/><summary type="html">Phases of my ten-year blogging journey and how it landed back on Jekyll</summary></entry><entry><title type="html">API Mocking with Prism</title><link href="https://www.wiserfirst.com/blog/api-mocking-with-prism/" rel="alternate" type="text/html" title="API Mocking with Prism"/><published>2020-07-18T18:31:00+10:00</published><updated>2021-05-18T10:39:00+10:00</updated><id>https://www.wiserfirst.com/blog/api-mocking-with-prism</id><content type="html" xml:base="https://www.wiserfirst.com/blog/api-mocking-with-prism/">&lt;p&gt;Recently my team has been working on API integration with a third party service. Unfortunately, for some reason we do not yet have access to a sandbox environment. Didn’t want to be blocked by this, we decided to build a local mocked API server.&lt;/p&gt; &lt;p&gt;Luckily for us, we were able to find an &lt;a href=&quot;http://spec.openapis.org/oas/v3.0.3&quot;&gt;OpenAPI&lt;/a&gt; specification file for the API of this service and also discovered an excellent tool called &lt;a href=&quot;https://meta.stoplight.io/docs/prism/README.md&quot;&gt;Prism&lt;/a&gt; for creating a mock server out of that. This offers a very simple way to spin up a local mock server with all the endpoints mocked. And with minimal changes to the specification file, the ability to send back custom responses if necessary.&lt;/p&gt; &lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt; &lt;p&gt;In this post, I’ll use the OpenAPI &lt;a href=&quot;https://raw.githubusercontent.com/api-evangelist/swagger/master/dev-api-openapi.json&quot;&gt;specification file&lt;/a&gt; of the &lt;a href=&quot;https://petstore.swagger.io/&quot;&gt;PetStore API&lt;/a&gt; to demonstrate what Prism has to offer. Please download it as well if you’d like to follow along.&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; petstore.json https://raw.githubusercontent.com/api-evangelist/swagger/master/dev-api-openapi.json &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;blockquote&gt; &lt;p&gt;Note: The OpenAPI specification can be in JSON or YAML formats, but I’m be using JSON in this post.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;You’ll also need to install the &lt;a href=&quot;https://www.npmjs.com/package/prismjs&quot;&gt;prism npm package&lt;/a&gt; by&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @stoplight/prism-cli &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;And then run&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prism mock petstore.json &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;If everything goes well, your local mock server for the PetStore API should be running :tada:.&lt;/p&gt; &lt;h2 id=&quot;add-example-responses&quot;&gt;Add Example Responses&lt;/h2&gt; &lt;p&gt;Having the server running is great, but at this point it would only return empty responses because no example response has been defined in the JSON file. To add example responses for various HTTP status codes, you’ll need to edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;petstore.json&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;For instance, say we’d like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/pet/:petId&lt;/code&gt; endpoint to return the following example response for a successful GET request:&lt;/p&gt; &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Kitten&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;available&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;What we need to do is to add an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;examples&lt;/code&gt; key under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paths&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/pet/{petId}&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responses&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;200&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/json&lt;/code&gt; with the following value:&lt;/p&gt; &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;examples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Kitten&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;available&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;For failure cases, say we want to add a 400 example response for the same endpoint, it would involve adding the following under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paths&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/pet/{petId}&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;responses&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;200&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/json&lt;/code&gt;:&lt;/p&gt; &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;examples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;failure&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bad Request&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Of course there are a lot more you could do with the specification file. I’m just scratching the surface here. Please refer to the &lt;a href=&quot;http://spec.openapis.org/oas/v3.0.3#responses-object-example&quot;&gt;Responses Object Example&lt;/a&gt; section in the OpenAPI Specification for more information.&lt;/p&gt; &lt;h2 id=&quot;send-requests&quot;&gt;Send Requests&lt;/h2&gt; &lt;p&gt;Now that we have a local mock server with a butch of endpoints, and the capability of returning desired example responses, it’s time to send some sample requests. Surely creating all the requests manually in your favorite HTTP client would work, but if you use &lt;a href=&quot;https://www.postman.com/downloads/&quot;&gt;Postman&lt;/a&gt;, there is a better alternative. Postman can directly import the OpenAPI specification file and create a new collection with requests for each endpoint. After that you might still need to fill in some variables like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;baseUrl&lt;/code&gt; for all endpoints or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;petId&lt;/code&gt; for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/pet/:petId&lt;/code&gt; endpoint. But being able to import from the OpenAPI specification file still saves a lot of effort.&lt;/p&gt; &lt;p&gt;Please refer to the screenshots below:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Postman Environment Configuration &lt;img src=&quot;/assets/images/2020-07-31/postman-env-config.png&quot; alt=&quot;environment configuration&quot; /&gt;&lt;/li&gt; &lt;li&gt;get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/pet/:petId/&lt;/code&gt; endpoint &lt;img src=&quot;/assets/images/2020-07-31/postman-get-pet.png&quot; alt=&quot;get endpoint example&quot; /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;warning-before-celebration&quot;&gt;Warning before Celebration&lt;/h2&gt; &lt;p&gt;Being able to create a local mock server and to send sample requests to it are definitely useful in some scenarios. Maybe you (like us) want to start the development work before having access to the sandbox environment; or maybe you would like some confirmations before sending out requests to the real API server. But regardless, please always bear in mind that no matter how well it worked with the mock server, this does &lt;em&gt;NOT&lt;/em&gt; replace actually integrating with the API server and verifying things actually work. The work is far from done with requests just hitting a local mock server. Again, always test with the real API server and make sure everything works as expected.&lt;/p&gt; &lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt; &lt;p&gt;As you can see, if a third party service offer an OpenAPI specification file, it is reasonably simple to get a local mock server up and running with Prism for their API. It is also very approachable to add example responses for the mocked endpoints by editing the specification file. Since Postman can import an OpenAPI specification file into a Postman collection, sending sample requests to the mock server is super easy as well.&lt;/p&gt;</content><author><name>Qing Wu</name><email>wiserfirst@gmail.com</email><uri>https://www.wiserfirst.com</uri></author><category term="OpenAPI"/><category term="mocking"/><category term="prism"/><category term="Postman"/><summary type="html">Want to start integration before having access to the API? Mocking is the way to go</summary></entry><entry><title type="html">Install Java with asdf</title><link href="https://www.wiserfirst.com/blog/install-java-with-asdf/" rel="alternate" type="text/html" title="Install Java with asdf"/><published>2020-07-12T12:30:00+10:00</published><updated>2021-05-27T14:36:00+10:00</updated><id>https://www.wiserfirst.com/blog/install-java-with-asdf</id><content type="html" xml:base="https://www.wiserfirst.com/blog/install-java-with-asdf/">&lt;p&gt;For some reason, I needed to install Java on my work laptop, which is a Macbook Pro. I could use Homebrew, but it would only allow me to have one version of Java, or two if you count Java11. If I ever need to run different versions of Java for different projects, it would be very cumbersome to manage, if not downright impossible. For that reason, I generally use a tool called asdf to manage the installations of programming languages.&lt;/p&gt; &lt;p&gt;If you don’t already have it and want to give it a go, the &lt;a href=&quot;https://asdf-vm.com/#/core-manage-asdf-vm&quot;&gt;asdf installation instructions&lt;/a&gt; for macOS and Linux on their website should be handy. Once you have asdf, installing a version of Java, or most popular programming languages, should be reasonably painless.&lt;/p&gt; &lt;h3 id=&quot;add-the-plugin&quot;&gt;Add the plugin&lt;/h3&gt; &lt;p&gt;First add the plugin for Java:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf plugin-add java &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;list-available-versions&quot;&gt;List available versions&lt;/h3&gt; &lt;p&gt;This could be helpful when you are not sure which versions are available and you can do that by:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf list-all java &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;If you, like me, haven’t followed the development of Java over the past decade, you might be surprised by the number of options for Java with asdf. Among them, OpenJDK is Oracle’s open source implementation of Java Standard Edition. According to &lt;a href=&quot;https://stackoverflow.com/a/32811065/1228752&quot;&gt;this StackOverflow Answer&lt;/a&gt;, Oracle stopped offering downloads of Java 8/9/10, which is why there is the AdoptOpenJDK project. Since I’m not exactly an expert on Java, if you’d like to know more, my friend, Google is a good starting point.&lt;/p&gt; &lt;h3 id=&quot;install-a-version&quot;&gt;Install a version&lt;/h3&gt; &lt;p&gt;Once you pick which version you want, install it with:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;java openjdk-14.0.1 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;In the example above, I wanted the latest version of OpenJDK, which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;14.0.1&lt;/code&gt; as of July 2020.&lt;/p&gt; &lt;h3 id=&quot;select-a-global-version&quot;&gt;Select a global version&lt;/h3&gt; &lt;p&gt;After installing the first version, you might also want to select it as the global version for that language by:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asdf global java openjdk-14.0.1 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h3 id=&quot;set-java_home&quot;&gt;Set JAVA_HOME&lt;/h3&gt; &lt;p&gt;To set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JAVA_HOME&lt;/code&gt; environment variable for Zsh initialisation, add the following:&lt;/p&gt; &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; ~/.asdf/plugins/java/set-java-home.zsh &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Refer to &lt;a href=&quot;https://github.com/halcyon/asdf-java#java_home&quot;&gt;asdf-java documentation&lt;/a&gt; for Bash or Fish shells.&lt;/p&gt; &lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt; &lt;p&gt;Hopefully this short introduction to installing Java with asdf could be helpful to someone else too. I use asdf to manage all my programming language installations (literally one tool to rule them all!) and I love it.&lt;/p&gt; &lt;h3 id=&quot;update-may-2021&quot;&gt;Update (May 2021)&lt;/h3&gt; &lt;p&gt;If you like this short introduction to asdf, I’ve recently published a more complete guide to asdf &lt;a href=&quot;/blog/how-to-use-asdf-on-macos/&quot;&gt;How to Use asdf Version Manager on macOS&lt;/a&gt;, which you might also find interesting.&lt;/p&gt;</content><author><name>Qing Wu</name><email>wiserfirst@gmail.com</email><uri>https://www.wiserfirst.com</uri></author><category term="java"/><category term="asdf"/><summary type="html">Getting Java installed on macOS or Linux can be painless if you have chosen the right tool</summary></entry></feed>